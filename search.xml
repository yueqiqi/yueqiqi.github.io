<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>9个超实用ES6特性</title>
    <url>/2020/07/13/9%E4%B8%AA%E8%B6%85%E5%AE%9E%E7%94%A8ES6%E7%89%B9%E6%80%A7/</url>
    <content><![CDATA[<h3 id="展开操作符"><a href="#展开操作符" class="headerlink" title="展开操作符"></a>展开操作符</h3><p>顾名思义，用于对象或数组之前的展开操作符（…），将一个结构展开为列表。<br>el:<br>演示一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let firstHalf = [  one ,  two ];</span><br><span class="line">let secondHalf = [ three ,  four , ...firstHalf];</span><br></pre></td></tr></table></figure>

<p>这种写法够优雅，够简洁吧？如果不用展开操作符<br>我们得这么写：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let firstHalf = [  one ,  two ];</span><br><span class="line">let secondHalf = [ three ,  four ];</span><br><span class="line">for(var i=0, i &lt;firstHalf.length; i++ ) &#123;</span><br><span class="line">  secondHalf.push(firstHalf[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>展开操作符也适用于合并对象的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const hero = &#123;</span><br><span class="line">  name:  Xena - Warrior Princess ,</span><br><span class="line">  realName:  Lucy Lawless</span><br><span class="line">&#125;</span><br><span class="line">const heroWithSword = &#123;</span><br><span class="line"> ...hero,</span><br><span class="line"> weapon:  sword</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不用展开操作符的话，需要遍历对象的属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let keys = Object.keys(hero);</span><br><span class="line">let obj = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">for(var i=0; i&lt; keys.length; i++) &#123;</span><br><span class="line">   obj[keys[i]] = keys[props[i]];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="剩余参数"><a href="#剩余参数" class="headerlink" title="剩余参数"></a>剩余参数</h3><p>剩余参数将剩余的参数收入数列。JavaScript 的特性是参数数目很灵活。通常会有一个 arguments 变量收集参数。</p>
<p>让我们看一个例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(first, second, ...remaining) &#123;</span><br><span class="line">  return first + second;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面的一段代码仅仅将 first 和 second 加起来，也就是说，调用 add(1, 2) 和 add(1, 2, 3, 4) 会得到相同的结果。</p>
<p>下面我们修正一下：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function add(first, second, ...remaining) &#123;</span><br><span class="line">  return first + second + remaining.reduce((acc, curr) =&gt; acc + curr, 0);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如前所述，…remaining 收集了剩余的参数，为我们提供了这些参数的命名，清楚地表明我们打算处理剩余的参数。我记得至迟 ES5 已经有 arguments 了，不过少有人知。</p>
<h3 id="字符串插值"><a href="#字符串插值" class="headerlink" title="字符串插值"></a>字符串插值</h3><p>见过这样的语句吗？</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">class Product &#123;</span><br><span class="line"> constructor(name, description, price) &#123;</span><br><span class="line">   this.name = name;</span><br><span class="line">   this.description = description;</span><br><span class="line">   this.price = price;</span><br><span class="line"> &#125;</span><br><span class="line">getDescription() &#123;</span><br><span class="line">   return &quot; Full description</span><br><span class="line">&quot; +</span><br><span class="line">   &quot; name: &quot; + this.name +</span><br><span class="line">   &quot; description: &quot; + this.description</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>当然，我指的是 getDescription() 方法中那个可读性不佳的多行长语句。大多数编程语言中都存在类似现象。一些语言提供了字符串插值，幸运的是，JavaScript 正是其中之一。</p>
<p>我们改写一下 getDescription() 方法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getDescription() &#123;</span><br><span class="line">   return `Full description</span><br><span class="line">:</span><br><span class="line">   name: $&#123;this.name&#125;</span><br><span class="line">   description $&#123;this.description&#125;</span><br><span class="line">   `;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一对 包起来的字符串中可以使用 ${} 插值。现在看起来舒服多了。</p>
<h3 id="简写属性"><a href="#简写属性" class="headerlink" title="简写属性"></a>简写属性</h3><p>在 ES5 中必须这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createCoord(x, y) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    x: x,</span><br><span class="line">    y: y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 以后可以使用简写属性：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function createCoord(x, y) &#123;</span><br><span class="line">  return &#123;</span><br><span class="line">    x,</span><br><span class="line">    y</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="方法属性"><a href="#方法属性" class="headerlink" title="方法属性"></a>方法属性</h3><p>方法属性是在对象中定义指向方法的属性。</p>
<p>考虑下面一段 ES5 代码作为例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const math = &#123;</span><br><span class="line">  add: function(a,b) &#123; return a + b; &#125;,</span><br><span class="line">  sub: function(a,b) &#123; return a - b; &#125;,</span><br><span class="line">  multiply: function(a,b) &#123; return a * b; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6 以后只需这么写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const math = &#123;</span><br><span class="line">  add(a,b) &#123; return a + b; &#125;,</span><br><span class="line">  sub(a,b) &#123; return a - b; &#125;,</span><br><span class="line">  multiply(a,b) &#123; return a * b; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>解构赋值有利于开发者本人的心理健康。</p>
<p>考虑下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function handle(req, res) &#123;</span><br><span class="line"> const name = req.body.name;</span><br><span class="line"> const description = req.body.description;</span><br><span class="line"> const url = req.url;</span><br><span class="line"></span><br><span class="line"> log( url endpoint , url);</span><br><span class="line"></span><br><span class="line"> // 大量代码逻辑</span><br><span class="line"> dbService.createPerson(name, description)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>不管从什么角度来看，上面的代码都不完美，但它确实体现了一种应用场景，我们想要从对象的不同层次获取数据。你也许会问，这里有什么问题？好吧，我可以不用声明这么多变量，省下一些敲击键盘的次数。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function handle(req, res) &#123;</span><br><span class="line"> const &#123; body: &#123; name, description &#125;, url &#125; = req;</span><br><span class="line"></span><br><span class="line"> log( url endpoint , url);</span><br><span class="line"></span><br><span class="line"> // 大量代码逻辑</span><br><span class="line"> dbService.createPerson(name, description)</span><br></pre></td></tr></table></figure>

<p>看，我们上面的代码将三行压缩成了一行。</p>
<p>解构赋值并不仅仅局限于对象。它同样适用于数组。</p>
<p>考虑下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const array = [1,2,3,4,5,6];</span><br><span class="line">const a = array[0];</span><br><span class="line">const c = array[2];</span><br><span class="line">上面的代码可以用更优雅的方式改写：</span><br><span class="line"></span><br><span class="line">const array = [1,2,3,4,5,6];</span><br><span class="line">const [a, ,c, ...remaining] = arr;</span><br><span class="line"></span><br><span class="line">// remaining = [4,5,6]</span><br></pre></td></tr></table></figure>

<p>我们可以使用上面的模式匹配分解数组的值。我们使用 , , 跳过某些值。上面提到过的剩余参数这里也能用，在这里我们通过剩余参数捕获了剩余的数组成员。</p>
<p>解构赋值还可以用于函数和参数。函数有不止 2-3 个参数时，使用一个对象收集所有参数是 JavaScript 的事实标准。</p>
<p>例如，下面一个函数：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething(config) &#123;</span><br><span class="line">  if(config.a) &#123; ... &#125;</span><br><span class="line">  if(config.b) &#123; ... &#125;</span><br><span class="line">  if(config.c) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>有更好的写法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething(&#123; a, b, c &#125;) &#123;</span><br><span class="line">  if(a) &#123; ... &#125;</span><br><span class="line">  if(b) &#123; ... &#125;</span><br><span class="line">  if(c) &#123; ... &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h3><p>ES6 引入了许多有用的数组方法，例如：</p>
<p>find()，查找列表中的成员，返回 null 表示没找到<br>findIndex()，查找列表成员的索引<br>some()，检查某个断言是否至少在列表的一个成员上为真<br>includes，列表是否包含某项<br>下面的代码有助于你理解它们的用法：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const array = [&#123; id: 1, checked: true &#125;, &#123; id: 2 &#125;];</span><br><span class="line">arr.find(item =&gt; item.id === 2) // &#123; id: 2 &#125;</span><br><span class="line">arr.findIndex(item =&gt; item.id === 2) // 1</span><br><span class="line">arr.some(item =&gt; item.checked) // true</span><br><span class="line"></span><br><span class="line">const numberArray = [1,2,3,4];</span><br><span class="line">numberArray.includes(2) // true</span><br><span class="line">Promises + Async/Await</span><br></pre></td></tr></table></figure>

<h3 id="异步方案"><a href="#异步方案" class="headerlink" title="异步方案"></a>异步方案</h3><p>如果你在这个圈子里呆了些年头，也许会记得曾经有一个时期我们只有回调</p>
<p>就像这样：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething(cb) &#123;</span><br><span class="line">  setTimeout(() =&gt;  &#123;</span><br><span class="line">    cb( done )</span><br><span class="line">  &#125;, 3000)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething((arg) =&gt; &#123;</span><br><span class="line"> console.log( done here , arg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们使用回调是因为有些操作是异步的，需要时间来完成。后来我们有了 promise 库，人们开始使用它。然后 JavaScript 逐渐加入了对 promise 的原生支持。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function doSomething() &#123;</span><br><span class="line">  return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">    setTimeout(() =&gt;  &#123;</span><br><span class="line">      resolve( done )</span><br><span class="line">    &#125;, 3000)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">doSomething().then(arg =&gt; &#123;</span><br><span class="line"> console.log( done here , arg);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>我们甚至可以这样调用，将 promise 串起来：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getUser()</span><br><span class="line">  .then(getOrderByUser)</span><br><span class="line">  .then(getOrderItemsByOrder)</span><br><span class="line">  .then(orderItems =&gt; &#123;</span><br><span class="line">    // 处理排序后的成员</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<p>后来生活更加美好，我们有了 async/await</p>
<p>上面一段代码可以这样写：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">async function getItems() &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    const user = await getUser();</span><br><span class="line">    const order = await getOrderByUser(user);</span><br><span class="line">    const items = await getOrderItemsByOrder(order);</span><br><span class="line">    return items;</span><br><span class="line">  &#125; catch(err) &#123;</span><br><span class="line">    // 在这里处理错误，建议返回某个值或者重新抛出错误</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">getItems().then(items =&gt; &#123;</span><br><span class="line">  // 处理排序后的成员</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h3><p>差不多任何编程语言都支持模块这一概念，也就是将代码分为多个文件，每个文件是一个自我包含的单元（模块）。</p>
<p>考虑下面的代码：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// math.js</span><br><span class="line"></span><br><span class="line">export function add(a,b) &#123; return a + b; &#125;</span><br><span class="line">export function sub(a,b) &#123; return a - b; &#125;</span><br><span class="line"></span><br><span class="line">export default mult(a,b) =&gt; a * b;</span><br><span class="line"></span><br><span class="line">// main.js</span><br><span class="line">import mult, &#123; add, sub &#125; from  ./math ;</span><br><span class="line"></span><br><span class="line">mult(2, 4) // 8</span><br><span class="line">add(1,1)   // 2</span><br><span class="line">sub(1,2)   // -1</span><br></pre></td></tr></table></figure>

<p>我们在上面用 export 关键字注明了 add 和 sub 这两个结构对任何引入该模块的模块都公开可见。export default 关键字则注明仅仅 import 模块时得到的结构。在 main.js 中，我们将导入的 default 命名为 mult，同时指明我们引入 add() 和 sub() 这两个方法。箭头函数和字典作用域 this。</p>
]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建github</title>
    <url>/2019/09/22/%E5%A6%82%E4%BD%95%E6%90%AD%E5%BB%BAgithub/</url>
    <content><![CDATA[<p>#Git<br>代码托管工具:将代码从当前电脑传到远程端—&gt; 传输、协作、版本控制<br>git,svn<br>传输：<br><a href="https://git-scm.com/downloads" target="_blank" rel="noopener">https://git-scm.com/downloads</a></p>
<a id="more"></a>

<h1 id="码云、github-网站，开源平台"><a href="#码云、github-网站，开源平台" class="headerlink" title="码云、github  : 网站，开源平台"></a>码云、github  : 网站，开源平台</h1><h1 id="github"><a href="#github" class="headerlink" title="github"></a>github</h1><h1 id="https-github-com"><a href="#https-github-com" class="headerlink" title="https://github.com/"></a><a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a></h1><h1 id="注册邮箱："><a href="#注册邮箱：" class="headerlink" title="注册邮箱："></a>注册邮箱：</h1><p>sina.com,<br>yahoo.com,<br>163.com,<br>126.com,<br>outlook.com,<br>hotmail.com<br>邮箱用户名：密码： github用户名，密码：<br>chrome插件：adblock,google,history</p>
<p>图形验证码：<br>create account –&gt; 创建账户</p>
<ol>
<li>$0;</li>
<li>somewhat experienced  单选</li>
<li>多选：design , development,research,program management</li>
<li>professional</li>
<li>html,css,js,python,node,angular,react<br>css3,canvas,echarts,ajax</li>
</ol>
<p>电脑需要安装git.exe<br>①授权本台电脑可以使用github账号,生成密钥<br>ssh-keygen -t rsa -C “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“  你的邮箱<br>②敲三次回车<br>③生成一串图形的乱码(c://user/.ssh/rsa文件2个)<br>④将rsa.pub 使用editpuls打开  ctrl + a , ctrl + c<br>⑤打开github.com 找到ssh and gpg key<br>—&gt; new ssh key ,ctrl + v</p>
<p>配置 全局用户名和邮箱<br>①git config –global user.name “xxxx”<br>②git config –global user.email “<a href="mailto:xxx@xxx.com" target="_blank" rel="noopener">xxx@xxx.com</a>“<br>③ssh -T <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a><br>yes<br>—&gt; hi,xxx ,you’ve authentic successfully…<br>本地仓库 –  远程仓库<br>本地仓库：<br>创建文件夹  –&gt; 进入文件夹</p>
<p>①初始化本地虚拟仓库并提交到远程仓库：<br>git init       # –&gt;生成本地   .git  文件夹  –&gt; 本地仓库<br>echo “132321”&gt;&gt;2.txt    # 输出一个文件<br>git add 2.txt       # 添加文件<br>git commit -m “第一次提交”  #提交注释及文件到缓存区<br>git remote add origin    <a href="mailto:xxx@github.comxxxx" target="_blank" rel="noopener">xxx@github.comxxxx</a>  #添加远程地址<br>git push -u origin master  #推送到仓库</p>
<p>②以后所有的推送<br>git add 3.txt    / git add .<br>git commit -m “第二次提交”<br>git push</p>
]]></content>
      <tags>
        <tag>github搭建</tag>
      </tags>
  </entry>
  <entry>
    <title>vue相关功能</title>
    <url>/2019/09/28/vue%E7%9B%B8%E5%85%B3%E9%A1%B9%E7%9B%AE/</url>
    <content><![CDATA[<h1 id="如何搭建vue脚手架"><a href="#如何搭建vue脚手架" class="headerlink" title="如何搭建vue脚手架"></a>如何搭建vue脚手架</h1><a id="more"></a>
<p>什么是脚手架: 已经具备核心功能的半成品项目<br>为什么要搭建脚手架: 标准化项目的开发，便于分工协作。<br>何时使用脚手架: 今后只要使用Vue框架做开发，都要先创建Vue框架的脚手架项目代码。<br>如何搭建脚手架: 2步:<br>1)先安装一个能创建脚手架项目的命令行工具:<br>    <strong>npm i -g @vue/cli</strong><br>2)用vue命令，创建一个项目的脚手架代码文件夹<br>    <strong>vue create 项目文件夹名</strong><br>    第一步: Your connection to the default npm registry seems to be slow. Use <a href="https://registry.npm.taobao.org" target="_blank" rel="noopener">https://registry.npm.taobao.org</a> for faster installation? (Y/n) <strong>Y</strong></p>
<pre><code>第二步: ? Please pick a preset: (Use arrow keys)
        &gt; default (babel, eslint)
          &gt; Manually select features //选下边一个

  第三步: ? Check the features needed for your project: (Press &lt;space&gt; to select, &lt;a&gt; to toggle all, &lt;i&gt; to invert selection)
        (*) Babel  //必选: 翻译
            脚手架代码中采用了模块化开发：
            抛出模块: module.exports={ ... } nodejs中
                ES6: export default { ... }
            引入模块: var 变量=require(&quot;路径&quot;) nodejs
                 ES6: import 变量 from &quot;路径&quot;
            因为不是所有浏览器都认识ES6，所以，需要Babel最后将所有ES6的代码翻译为多数浏览器都认识的ES5代码。
        ( ) TypeScript //微软出的严格的script——不选
         ( ) Progressive Web App (PWA) Support
         (*) Router //必选
         (*) Vuex //Vue中的状态机制。当多个组件需要共用一些数据：比如当前登录用的用户名。这个公共的数据就要放在Vuex中——下个阶段老师将
         ( ) CSS Pre-processors
         () Linter / Formatter //千万不要选！是代码质量检查工具。即使代码没错，格式不规范，也报错！
         ( ) Unit Testing
         ( ) E2E Testing

 第四步: Use history mode for router? (Requires proper server setup for index fallback in production) (Y/n) **n**
            因为必须要服务端支持，所以才不选。
            默认Vue的地址栏中都是用#/路径来跳转
            但是#可能和你的锚点地址冲突。
            如果即想用vue，又想要锚点地址，只能启用history模式。启用后，地址栏中就没有#了。而是直接用&quot;/路径&quot;。

第五步: Where do you prefer placing config for Babel, PostCSS, ESLint, etc.? (Use arrow keys)
        &gt; In dedicated config files
        &gt;In package.json //选这个 将所有的配置都放在一个package.json中。

第六步: Save this as a preset for future projects? (y/N) **N**  不把这次的项目配置保存为今后项目的模板。
    脚手架文件夹创建成功后: 
    Successfully created project xz_vue.
    👉  Get started with the following commands:

     $ cd vue_demo //先进入项目文件夹（vue create后的那个文件夹——vue_demo）
     $ npm run serve //=运行Live server+Babel的效果。是先将脚手架中浏览器不懂的代码，翻译为浏览器能懂的代码。然后，再将翻译后的页面运行在一个临时的开发服务器中。    强调: npm run serve 必须在项目文件夹内运行
    保险起见是在vs code中打开vue_demo，然后在package.json文件上右键单击在命令行打开，然后运行:
    **npm run serve   没有r结尾**</code></pre><h2 id="VUE封装axios请求方法"><a href="#VUE封装axios请求方法" class="headerlink" title="VUE封装axios请求方法"></a>VUE封装axios请求方法</h2><!-- more -->
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//创建一个http.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import axios from &apos;axios&apos; //全局安装axios: npm install axios --save </span><br><span class="line">import qs from &apos;qs&apos; //全局安装qs:npm install qs</span><br><span class="line">//1.设置请求基础路径</span><br><span class="line">axios.defaults.timeout = 5000 // 响应时间</span><br><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencoded;charset=UTF-8&apos; // 配置post请求头</span><br><span class="line">axios.defaults.headers.get[&apos;Content-Type&apos;] = &apos;application/json;charset=UTF-8&apos; // 配置get请求头</span><br><span class="line"></span><br><span class="line">axios.defaults.baseURL = &apos;http://XXX&apos; // 配置请求后台接口地址</span><br><span class="line">/**</span><br><span class="line"> * get方法，对应get请求</span><br><span class="line"> * @param &#123;String&#125; url [请求的url地址]</span><br><span class="line"> * @param &#123;Object&#125; params [请求时携带的参数]</span><br><span class="line"> */</span><br><span class="line">export function get(url, params)&#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt;&#123;</span><br><span class="line">        axios.get(url, &#123;</span><br><span class="line">            params: params</span><br><span class="line">        &#125;).then(res =&gt; &#123;</span><br><span class="line">            resolve(res.data);</span><br><span class="line">        &#125;).catch(err =&gt;&#123;</span><br><span class="line">            reject(err.data)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">/**</span><br><span class="line"> * post方法，对应post请求</span><br><span class="line"> * @param &#123;String&#125; url [请求的url地址]</span><br><span class="line"> * @param &#123;Object&#125; params [请求时携带的参数]</span><br><span class="line"> */</span><br><span class="line">export function post(url, params) &#123;</span><br><span class="line">    return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">         axios.post(url, QS.stringify(params)) //1.qs.parse()将URL解析成对象的形式2.qs.stringify()将对象 序列化成URL的形式，以&amp;进行拼接(post请求就是用这个方法)</span><br><span class="line">        .then(res =&gt; &#123;</span><br><span class="line">            resolve(res.data);</span><br><span class="line">        &#125;)</span><br><span class="line">        .catch(err =&gt;&#123;</span><br><span class="line">            reject(err.data)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//封装完成在main.js中注册</span><br><span class="line">import get from &apos;./http&apos; //路径</span><br><span class="line">Vue.prototype.$get = get; //全局使用</span><br><span class="line">//在某某组件中使用</span><br><span class="line">this.$get(&apos;/url&apos;,&#123;</span><br><span class="line">	params</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">	console.log(&apos;请求成功结果&apos;,res)</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">	console.log(&apos;请求错误原因&apos;,err)</span><br><span class="line">&#125;)</span><br><span class="line">//post请求使用同上</span><br><span class="line"></span><br><span class="line">//或者写成下面的方法</span><br><span class="line">class HttpRequest &#123;</span><br><span class="line">	/**</span><br><span class="line">	 * get方法，对应get请求</span><br><span class="line">	 */</span><br><span class="line">	static get(url, params, config) &#123;</span><br><span class="line">		return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">			axios.get(url, &#123;</span><br><span class="line">					params: params</span><br><span class="line">				&#125;, config)</span><br><span class="line">				.then(res =&gt; &#123;</span><br><span class="line">					resolve(res.data);</span><br><span class="line">				&#125;)</span><br><span class="line">				.catch(err =&gt; &#123;</span><br><span class="line">					reject(err.data)</span><br><span class="line">				&#125;)</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">	/**</span><br><span class="line">	 * post方法，对应post请求</span><br><span class="line">	 */</span><br><span class="line">	static post(url, params, config) &#123;</span><br><span class="line">		return new Promise((resolve, reject) =&gt; &#123;</span><br><span class="line">			axios.post(url, qs.stringify(params), config)</span><br><span class="line">				.then(res =&gt; &#123;</span><br><span class="line">					resolve(res.data);</span><br><span class="line">				&#125;)</span><br><span class="line">				.catch(err =&gt; &#123;</span><br><span class="line">					reject(err.data)</span><br><span class="line">				&#125;)</span><br><span class="line">		&#125;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">export default HttpRequest</span><br><span class="line"></span><br><span class="line">//在main.js中全局注册</span><br><span class="line">import http from &apos;./url&apos; //文件路径</span><br><span class="line">Vue.prototype.$http = http; //注册</span><br><span class="line">this.$http.get(&apos;/url&apos;,&#123;</span><br><span class="line">	params</span><br><span class="line">&#125;).then(res =&gt; &#123;</span><br><span class="line">	console.log(&apos;请求成功&apos;,res)</span><br><span class="line">&#125;).catch(err =&gt; &#123;</span><br><span class="line">	console.log(&apos;请求失败原因&apos;,err)</span><br><span class="line">&#125;)</span><br><span class="line">//post请求把get改成post即可</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * 根据一个数组 前端实现模糊搜索</span><br><span class="line"> */</span><br><span class="line">/**</span><br><span class="line"> * 模糊搜索</span><br><span class="line"> * @param &#123;Object&#125; list--搜索的数组</span><br><span class="line"> * @param &#123;Object&#125; keyWord--搜索关键字</span><br><span class="line"> */</span><br><span class="line">fuzzySearch(list, keyWord) &#123;</span><br><span class="line">		var reg =  new RegExp(keyWord);</span><br><span class="line">		var arr = [];</span><br><span class="line">		console.log(&apos;关键字&apos;,reg,reg.test(list[0].name))</span><br><span class="line">		for (var i = 0; i &lt; list.length; i++) &#123;</span><br><span class="line">			if (reg.test(list[i].name)||reg.test(list[i].phone)||reg.test(list[i].carNUm)) &#123;//根据name或者phone或者carNUm进行搜索</span><br><span class="line">				arr.push(list[i]);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		return arr;</span><br><span class="line">	&#125;,</span><br></pre></td></tr></table></figure>

]]></content>
  </entry>
  <entry>
    <title>微信小程序下拉框</title>
    <url>/2019/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%8B%E6%8B%89%E6%A1%86/</url>
    <content><![CDATA[<p><img src="/images/select.png" alt></p>
<a id="more"></a>
<p>#####<!-- wxml --></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 下拉框 --&gt;</span><br><span class="line">&lt;view class=&apos;select_box&apos;&gt;</span><br><span class="line">    &lt;view class=&apos;select&apos; catchtap=&apos;selectTap&apos;&gt;</span><br><span class="line">		&lt;input class=&quot;select_text&quot; disabled=&apos;&#123;&#123;isDisabled&#125;&#125;&apos; value=&quot;&#123;&#123;selectData[index]&#125;&#125;&quot;  /&gt;</span><br><span class="line">        &lt;!-- 下拉图片 --&gt;</span><br><span class="line">        &lt;image class=&apos;select_img &#123;&#123;selectShow&amp;&amp;&quot;select_img_rotate&quot;&#125;&#125;&apos; src=&apos;../../images/right.png&apos;  background-size=&quot;contain&quot;&gt;&lt;/image&gt; </span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;!-- 列表项布局 --&gt;</span><br><span class="line">    &lt;view class=&apos;option_box&apos; style=&apos;height:&#123;&#123;selectShow?(selectData.length&gt;5?325:selectData.length*50):0&#125;&#125;rpx;&apos;&gt;</span><br><span class="line">    &lt;!-- 选择的列表项 --&gt;</span><br><span class="line">        &lt;text class=&apos;option&apos; wx:for=&apos;&#123;&#123;selectData&#125;&#125;&apos; wx:key=&apos;this&apos; data-index=&apos;&#123;&#123;index&#125;&#125;&apos; catchtap=&apos;optionTap&apos; &gt;&#123;&#123;item&#125;&#125;&lt;/text&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p>disabled 表示是否禁用改输入框 由于我自己绑定了选中”自定义编辑”就启用该输入框 input中value绑定的值指的是其数组的下标所对应的值<br>列表项中的style所绑定的是其选项框的高 后面的*50可变<br>data-index 表示自定义属性</p>
<p>#####<!-- wxss --></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 盒子模型 --&gt;</span><br><span class="line">.select_box&#123;</span><br><span class="line">  width:100%;</span><br><span class="line">  height:70%;</span><br><span class="line">  border-radius: 14rpx;</span><br><span class="line">  position: relative;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 盒子模型的样式 --&gt;</span><br><span class="line">.select_box .select&#123;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  border-radius: 8rpx;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  padding: 0 10rpx;</span><br><span class="line">&#125;</span><br><span class="line">.select_box .select .select_text&#123;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">  color: #777777;</span><br><span class="line">  line-height: 28rpx;</span><br><span class="line">  flex: 1;</span><br><span class="line">&#125;</span><br><span class="line">&lt;!-- 显示时设定动画效果 --&gt;</span><br><span class="line">.select_box .select .select_img&#123;</span><br><span class="line">  width: 30rpx;</span><br><span class="line">  height: 30rpx;</span><br><span class="line">  display: block;</span><br><span class="line">  transition:transform 0.3s;</span><br><span class="line">&#125;</span><br><span class="line">/* 图片旋转 */</span><br><span class="line">.select_box .select .select_img_rotate&#123;</span><br><span class="line">  transform:rotate(90deg); </span><br><span class="line">&#125;</span><br><span class="line">/* 自定义列表 */</span><br><span class="line">.select_box .option_box&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: calc(100% - 1px);</span><br><span class="line">  width: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  height: 0;</span><br><span class="line">  overflow-y: auto;</span><br><span class="line">  background: #fff;</span><br><span class="line">  transition: height 0.3s;</span><br><span class="line">  border-left:1px solid #efefef;</span><br><span class="line">  border-right:1px solid #efefef;</span><br><span class="line">&#125;</span><br><span class="line">/* 自定义列表文字 */</span><br><span class="line">.select_box .option_box .option&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  line-height: 30rpx; </span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">  padding: 10rpx;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>#####<!-- js --></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 下拉</span><br><span class="line">  // 点击下拉显示框</span><br><span class="line">  selectTap(e) &#123;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      selectShow: !this.data.selectShow</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  // 点击下拉列表</span><br><span class="line">  optionTap(e) &#123;</span><br><span class="line">    let Index = e.currentTarget.dataset.index;//获取点击的下拉列表选项的下标</span><br><span class="line">    console.log(Index)</span><br><span class="line">    // console.log(e)</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      index: Index,</span><br><span class="line">      selectShow: !this.data.selectShow,</span><br><span class="line">    &#125;);</span><br><span class="line">    if(Index==4)&#123;</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        isDisabled:false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    &lt;!-- 可以输出isDisabled的值 --&gt;</span><br><span class="line">    console.log(this.data.isDisabled)</span><br><span class="line">  &#125;,</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 自定义编辑</span><br><span class="line">    isDisabled:true,</span><br><span class="line">    selectShow: false,//控制下拉列表的显示隐藏，false隐藏、true显示</span><br><span class="line">    selectData: [&apos;请选择类型&apos;, &apos;身份类型&apos;, &apos;身份类型&apos;,&quot;身份类型&quot;,&quot;自定义编辑&quot;],//下拉列表的数据</span><br><span class="line">    index: 0,//选择的下拉列表下标 默认是第一个的值</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>git的常用操作</title>
    <url>/2020/06/23/git%E7%9A%84%E5%B8%B8%E7%94%A8%E6%93%8D%E4%BD%9C/</url>
    <content><![CDATA[<h2 id="git的常用操作指令"><a href="#git的常用操作指令" class="headerlink" title="git的常用操作指令"></a>git的常用操作指令</h2><a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">git init //在当前目录新建一个Git代码库，git init [project-name] 新建一个目录，将其初始化为Git代码库</span><br><span class="line">git clone https://github.com/XXX/MyCs.git NewMyCs //NewMyCs是改写的本地仓库名</span><br><span class="line">git add 多功能命令：可用于开始跟踪新文件，或把已跟踪的文件放到暂存区，还能用于合并时把有冲突的文件标记为已解决状态，且每次文件有改动后，都需要用其将文件放入暂存区，然后等待commit。</span><br><span class="line">git status //查看哪些文件处于什么状态，git status -s 命令或 git status --short 紧凑的格式输出(只列出文件列表)</span><br><span class="line">git diff //当前做的哪些更新还没有暂存，即还没有执行git add操作(详细列出代码)</span><br><span class="line">git diff --staged //有哪些更新已经暂存起来准备下次提交(详细列出代码)</span><br><span class="line">git diff HEAD //显示工作区与当前分支最新commit之间的差异</span><br><span class="line">git commit -m &quot;Story speed&quot;</span><br><span class="line">git commit -a -m &apos;new benchmarks&apos; //-a作用：直接跳过使用暂存区域的git add操作步骤，简写方式-am</span><br><span class="line">git commit -a --amend -m &quot;xxx&quot;//可实现在未push前，修改上次本地commit的代码及注释而不会产生新的Commit</span><br><span class="line">git rm README.txt //移除某个文件，加--cached README是将其移除git跟踪或用：git reset HEAD &lt;file&gt;</span><br><span class="line">git clean -df //从工作目录中移除没有track的文件</span><br><span class="line">git mv README.md newName.md //文件改名</span><br><span class="line">git log //只倒序打印提交日志，不展示提交代码</span><br><span class="line">git log -p -2 //-p:用来显示每次提交的代码的差异, -2:仅显示最近两次提交</span><br><span class="line">git log --stat -2 //查看到每次提交的简略的统计信息</span><br><span class="line">git log -p -2 --since=2.day --author=&quot;XXX&quot; --grep=&quot;two&quot; //grep：打印日志信息中包含 &quot;two&quot;的</span><br><span class="line">git log --since=&quot;2008-10-01&quot; --before=&quot;2008-11-01&quot;//或--after=&quot;2008-10-01&quot; --until=&quot;2008-11-01&quot;</span><br><span class="line">git log --pretty=oneline //获取提交历史（包括提交编号和日志），简写git log --oneline</span><br><span class="line">git log --pretty=raw //会显示出关于每次提交的更多信息，简写git log --raw</span><br><span class="line">git log --skip=[skip] //指定跳过前几条日志</span><br><span class="line">git log --follow &quot;filePath&quot; //显示某个文件的版本历史及文件改名，或用 git whatchanged &quot;filePath&quot;,注意filePath要加单、双引号</span><br><span class="line">git branch //列出所有本地分支</span><br><span class="line">git branch -r //列出所有远程分支</span><br><span class="line">git branch -a //列出所有本地分支和远程分支</span><br><span class="line">git branch -v //查看本地所有分支及各分支最后一次提交内容</span><br><span class="line">git branch -d [branchname] //删除本地某个分支，-d:表示非强制删除，-D:表示强制删除，换成-dr是删除远程分支</span><br><span class="line">git branch -u origin/[branchname] //修改正在跟踪的上游分支</span><br><span class="line">git branch [branch-name] //新建一个分支，但依然停留在当前分支</span><br><span class="line">git branch [branch-name] [tagname/commit/branchName/originBranch] //从XXX中检出一个新分支</span><br><span class="line">git branch (--track) [branch] [remote-branch] //新建一个分支，与指定的远程分支建立追踪关系，--track可省略</span><br><span class="line">git branch --set-upstream [branch] [remote-branch] //对现有分支建立与远程分支的追踪关系</span><br><span class="line">git checkout [branchname] //切换到某个本地现有分支上</span><br><span class="line">git checkout -b [branchname] [tagname/commit/branchName] //通过标签等检出一个本地新的分支</span><br><span class="line">git checkout --track -b [branchName] [origin/remoteBranch] //直接检出一个关联远程分支的本地分支，--track可省略</span><br><span class="line">git checkout . //恢复上一个commit的所有文件到工作区,注意末尾有个点儿</span><br><span class="line">git checkout -- filename //撤消对某文件的修改，注意-- filename二者中间有空格的（回到本地最后一次提交状态）</span><br><span class="line">git checkout &lt;commitID&gt; &lt;filename&gt; //只撤销指定文件到指定commit时的版本，注意这里命令用的不是reset</span><br><span class="line">git cherry-pick [commit] //选择一个commit（编号），合并进当前分支</span><br><span class="line">git config --global alias.co checkout //为命令设置一个别名，使以后写命令方便</span><br><span class="line">git merge branchName //将branchName分支合并到当前分支中</span><br><span class="line">git remote -v //列出所有的远程仓库</span><br><span class="line">git remote show [remote-name] //查看某一个远程仓库的更多信息</span><br><span class="line">git remote add &lt;shortname&gt; &lt;url&gt; //添加远程仓库</span><br><span class="line">git remote rename nameA NameB //远程仓库的重命名</span><br><span class="line">git remote rm paul //远程仓库paul的移除</span><br><span class="line">git remote set-url origin [url] //更换远程仓库地址</span><br><span class="line">git remote rm origin //配合git remote add origin [url]，也能实现更换远程仓库地址功能</span><br><span class="line">git tag //列出标签</span><br><span class="line">git tag -a v1.4 -m &apos;my version 1.4&apos; //创建附注标签</span><br><span class="line">git tag [tag] [commitId] //新建一个tag在指定commit</span><br><span class="line">git show //查看标签信息与对应的提交信息；</span><br><span class="line">git fetch [remote-name] //下载远程仓库的所有变动</span><br><span class="line">git pull //从远程仓库中抓取与拉取,前提是有一个分支设置为跟踪一个远程分支</span><br><span class="line">git push [remote-origin] [tag] //提交指定tag,git push [remote] --tags :提交所有tag</span><br><span class="line">git push origin HEAD:[branch-name] //推送到远程仓库，推送分支与远程分支不同名时，origin HEAD:[branch-name]不可省略</span><br><span class="line">git push --force //推送至远程仓库，远程分支与其同名时使用，--force 可简写 -f</span><br><span class="line">git push [remote] --all //推送所有分支到远程仓库</span><br><span class="line">git push origin --delete [branchname] //删除远程分支，或者git branch -dr [origin/branchname]</span><br><span class="line">git rebase --continue/abort/skip //继续执行变基操作、终止变基、跳过某一文件继续进行</span><br><span class="line">git rebase -i [startpoint] [endpoint] //合并多个commit为一个完整commit(注:该区间为前开后闭区间),endpoint默认为HEAD</span><br><span class="line">git rebase -i HEAD~3 //合并后三个commit</span><br><span class="line">git rebase [startpoint] [endpoint] --onto [yourBranch] //配以git checkout yourBranch和git reset --hard [newCommitId]实现将某段commit粘贴到另一个分支上</span><br><span class="line">git reset [file] //将指定文件从&quot;暂存区&quot;中释放，使其处于unstage状态，但工作区代码不变</span><br><span class="line">git reset [commit] //重置本地当前分支的指针为指定commit，同时重置暂存区，但工作区不变</span><br><span class="line">git reset --hard //重置暂存区与工作区，与上一次commit保持一致,效果与git checkout .类似</span><br><span class="line">git reset --hard HEAD、BranchName、orign/branch//在合并有冲突时，放弃本地修改的，全部采用某个分支的</span><br><span class="line">git reset --keep [commit] //重置本地当前HEAD为指定commit，但保持暂存区和工作区不变</span><br><span class="line">git reset --hard HEAD^ //与git push origin master -f搭配，实现删除最后一次远程提交功能</span><br><span class="line">git reset --hard [commit] //重置本地当前分支的HEAD为指定commit，同时重置暂存区和工作区，可用于版本回退</span><br><span class="line">git revert [commit] //指版本回退到指定提交之前</span><br><span class="line">git revert HEAD //与git push origin master搭配，实现删除最后一次远程提交功能</span><br></pre></td></tr></table></figure>

<h2 id="linux基础命令"><a href="#linux基础命令" class="headerlink" title="linux基础命令"></a>linux基础命令</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1)clear:清除屏幕</span><br><span class="line">2)echo:往控制台输出信息(相当于console.log)</span><br><span class="line">3)ll:将对应目录下的子孙文件&amp;子孙目录平铺在控制台</span><br><span class="line">4)find 目录名:将对应下的子孙文件&amp;子孙目录平铺在控制台</span><br><span class="line">5)find 目录名 -type f:将对应目录下的文件平铺在控制台</span><br><span class="line">6)rm 文件名:删除文件</span><br><span class="line">7)mv 文件名 重命名文件名:重命名</span><br><span class="line">8)cat 文件的url:查看文件对应内容</span><br><span class="line">9)vim 文件的url(在英文模式下)</span><br><span class="line">	1:按i进入插入模式 进行文件的编辑</span><br><span class="line">	2:按Esc键&amp;按:键:进行命令的执行 </span><br><span class="line">		2-1:-q! =&gt;强制退出(不保存)</span><br><span class="line">		2-2:wq =&gt;保存退出</span><br><span class="line">		2-3:set nu =&gt;设置行号</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>markdown基础语法</title>
    <url>/2019/09/26/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<p>分段 两个回车<br>换行 两个空格 + 回车<br>标题 # ~ ######，#号的个数表示几级标题，即表示一级标题到六级标题<br>强调 <strong>文字</strong> ， <strong>文字</strong> ， <em>文字</em> ， <em>文字</em> ， 文字<br>引用 &gt; 注意后面紧跟个空格<br>表格 - 和 | 分割行和列 ， : 控制对其方式<br>代码块 四个空格 开头或， 使用<br>链接 <a href="链接地址">文字</a><br>图片 <img src="/.com//%E5%9B%BE%E7%89%87%E5%9C%B0%E5%9D%80" alt="图片说明"> ，地址可以是本地路劲，也可以是网络地址<br>列表 * ， + ， - ， 1. ，选其中之一，注意后面紧跟个空格</p>
<a id="more"></a>

<p>标题</p>
<h1 id="欢迎使用Markdown编辑器写博客-一级标题-对应"><a href="#欢迎使用Markdown编辑器写博客-一级标题-对应" class="headerlink" title="欢迎使用Markdown编辑器写博客    //一级标题 对应  "></a>欢迎使用Markdown编辑器写博客    //一级标题 对应 <h1> </h1></h1><h2 id="标题输入-二级标题-对应"><a href="#标题输入-二级标题-对应" class="headerlink" title="标题输入                     //二级标题 对应  "></a>标题输入                     //二级标题 对应 <h2> </h2></h2><h3 id="三级标题-三级标题-对应"><a href="#三级标题-三级标题-对应" class="headerlink" title="三级标题                    //三级标题 对应  "></a>三级标题                    //三级标题 对应 <h3> </h3></h3><h4 id="四级标题-四级标题-对应"><a href="#四级标题-四级标题-对应" class="headerlink" title="四级标题                   //四级标题 对应  "></a>四级标题                   //四级标题 对应 <h4> </h4></h4><h5 id="五级标题-五级标题-对应"><a href="#五级标题-五级标题-对应" class="headerlink" title="五级标题                  //五级标题 对应  "></a>五级标题                  //五级标题 对应 <h5> </h5></h5><h6 id="六级标题-六级标题-对应"><a href="#六级标题-六级标题-对应" class="headerlink" title="六级标题                 //六级标题 对应  "></a>六级标题                 //六级标题 对应 <h6> </h6></h6><p>####### 七级标题                //抱歉，木有了（但是他会影响生成的目录，目录行多出一行空行）</p>
<p>内容强调<br>加粗、斜体<br>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示<br>字体 加粗 显示<br>字体 斜体 显示<br>字体 加粗并斜体 显示</p>
<p>字体 <strong>加粗</strong> 显示<br>字体 <em>斜体</em> 显示<br>字体 <strong><em>加粗并斜体</em></strong> 显示<br>组合 <em><strong>加粗并斜体</strong></em> 显示<br>字体 加粗 显示<br>字体 斜体 显示<br>字体 加粗并斜体 显示<br>组合 加粗并斜体 显示</p>
<p>删除线<br>这样来 <del>删除一段文本</del><br>这样来 删除一段文本</p>
<p>高亮<br>使用<code>`</code>来强调字符   //想打出  <code>(反引号)需要转义的，加&lt;code&gt;&lt;/code&gt;标签强调
比如</code>突出背景色`来显示强调效果</p>
<p>使用`来强调字符<br>比如突出背景色来显示强调效果</p>
<p>引用显示<br>引用过程中任然支持Markdown语法！</p>
<p>标准使用</p>
<blockquote>
<p>每行开始都使用 ‘&gt;’；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>。</p>
</blockquote>
<blockquote>
<p>还在引用中！</p>
</blockquote>
<p>两个回车结束引用！<br>每行开始都使用 ‘&gt;’；<br>引用开始；<br>引用换行；<br>引用结束。</p>
<p>还在引用中！</p>
<p>　两个回车结束引用！</p>
<p>省略使用</p>
<blockquote>
<p>仅第一行加应用；<br>引用<strong>开始</strong>；<br>引用<strong>换行</strong>；<br>引用<strong>结束</strong>；</p>
</blockquote>
<p>两个回车结束引用,不在引用范围内了！<br>仅第一行加应用；<br>引用开始；<br>引用换行；<br>引用结束；</p>
<p>　两个回车 结束引用,不在引用范围内了！</p>
<p>嵌套使用</p>
<blockquote>
<p>动物</p>
<blockquote>
<p>水生动物<br>陆生动物</p>
<blockquote>
<p>猴子<br>人</p>
<blockquote>
<p>程序猿<br>攻城狮<br>产品狗 //这里需要注意，没有空行间隔，忽略降级引用标记<br>射鸡虱   //这里需要注意，没有空行间隔，忽略降级引用标记</p>
</blockquote>
</blockquote>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>两栖类动物</p>
<blockquote>
<p>大鳄鱼<br>唐老鸭</p>
</blockquote>
</blockquote>
</blockquote>
<p>两个回车结束引用,不在引用范围内了！<br>列1   | 列2 | 列3<br>—– | — | —-<br>第1行 | 12  | 13<br>第2行 | 22  | 23<br>第3行 | 32  | 33<br>可以使用冒号来定义对齐方式：</p>
<table>
<thead>
<tr>
<th align="left">左对齐</th>
<th align="right">右对齐</th>
<th align="center">居中</th>
</tr>
</thead>
<tbody><tr>
<td align="left">Computer</td>
<td align="right">5000 元</td>
<td align="center">1台</td>
</tr>
<tr>
<td align="left">Phone</td>
<td align="right">1999 元</td>
<td align="center">1部</td>
</tr>
<tr>
<td align="left">代码块语法遵循标准 markdown 代码，使用 <figure class="highlight plain"><figcaption><span>， ``` 结束 例如：</span></figcaption><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">```Python</span><br><span class="line">#!/usr/bin/env python</span><br><span class="line"># -*- coding: utf-8 -*-</span><br><span class="line">print &apos;Hello World!</span><br></pre></td></tr></table></figure></td>
<td align="right"></td>
<td align="center"></td>
</tr>
</tbody></table>
<p> 列表<br>无序列表</p>
<ul>
<li>*列表展示</li>
<li>*列表展示<ul>
<li>*列表展示</li>
</ul>
</li>
</ul>
<ul>
<li>+列表展示</li>
<li>+列表展示<ul>
<li>+列表展示</li>
</ul>
</li>
</ul>
<ul>
<li>-列表展示</li>
<li>-列表展示<ul>
<li>-列表展示</li>
</ul>
</li>
</ul>
<p>*列表展示<br>*列表展示<br>*列表展示<br>+列表展示<br>+列表展示<br>+列表展示<br>-列表展示<br>-列表展示<br>-列表展示<br>有序列表（CSDN展示不同）<br>这种方式不用手动设置序号，自动生成列表序列</p>
<ol>
<li><strong>我是一级序列</strong> </li>
<li><strong>我是一级序列</strong> </li>
<li><strong>我是一级序列</strong> <ol>
<li><em>我是二级序列</em> </li>
<li><em>我是二级序列</em> </li>
<li><em>我是二级序列</em> </li>
</ol>
</li>
<li><strong>我是一级序列</strong> </li>
<li><strong>我是一级序列</strong> <ol>
<li><em>我是二级序列</em> </li>
<li><em>我是二级序列</em> </li>
<li>还是二级序列，没有三级序列<br>这种方式不用手动设置序号，自动生成列表序列</li>
</ol>
</li>
<li>我是一级序列</li>
<li>我是一级序列</li>
<li>我是一级序列</li>
<li>我是二级序列 多于一级序列一个空格</li>
<li>我是二级序列 多于一级序列一个空格</li>
<li>我是二级序列 多于一级序列一个空格</li>
<li>我是一级序列</li>
<li>我是一级序列</li>
<li>我是二级序列 多于一级序列一个空格</li>
<li>我是二级序列 多于一级序列一个空格</li>
<li>还是二级序列，没有三级序列 虽然多于二级序列一个空格，但是任然是二级序列</li>
</ol>
]]></content>
  </entry>
  <entry>
    <title>JS数组常用技巧</title>
    <url>/2020/08/08/JS%E6%95%B0%E7%BB%84%E5%B8%B8%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="生成类似-1-100-这样的的数组："><a href="#生成类似-1-100-这样的的数组：" class="headerlink" title="生成类似[1-100]这样的的数组："></a>生成类似[1-100]这样的的数组：</h3><p>测试大量数组数据时可以：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">let arr = new Array(100).fill(0).map((item, index) =&gt; index + 1)</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<h3 id="数组解构赋值应用"><a href="#数组解构赋值应用" class="headerlink" title="数组解构赋值应用"></a>数组解构赋值应用</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 交换变量</span><br><span class="line">[a, b] = [b, a]</span><br><span class="line">[o.a, o.b] = [o.b, o.a]</span><br><span class="line">// 生成剩余数组</span><br><span class="line">const [a, ...rest] = [...&apos;asdf&apos;] // a：&apos;a&apos;，rest: [&quot;s&quot;, &quot;d&quot;, &quot;f&quot;]</span><br></pre></td></tr></table></figure>

<h3 id="数组浅拷贝"><a href="#数组浅拷贝" class="headerlink" title="数组浅拷贝"></a>数组浅拷贝</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3]</span><br><span class="line">const arrClone = [...arr]</span><br><span class="line">// 对象也可以这样浅拷贝</span><br><span class="line">const obj = &#123; a: 1 &#125;</span><br><span class="line">const objClone = &#123; ...obj &#125;</span><br></pre></td></tr></table></figure>

<p>浅拷贝方法有很多如arr.slice(0, arr.length)/Arror.from(arr)等，但是用了…操作符之后就不会再想用其他的了~</p>
<h3 id="数组合并"><a href="#数组合并" class="headerlink" title="数组合并"></a>数组合并</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr1 = [1, 2, 3]</span><br><span class="line">const arr2 = [4, 5, 6]</span><br><span class="line">const arr3 = [7, 8, 9]</span><br><span class="line">const arr = [...arr1, ...arr2, ...arr3]</span><br></pre></td></tr></table></figure>

<p>arr1.concat(arr2, arr3)同样可以实现合并，但是用了…操作符之后就不会再想用其他的了~</p>
<h3 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h3><h4 id="普通数组"><a href="#普通数组" class="headerlink" title="普通数组"></a>普通数组</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 1, 2, 2, 3, 4, 5, 5]</span><br><span class="line">const newArr = [...new Set(arr)]</span><br></pre></td></tr></table></figure>

<p>new Set(arr)接受一个数组参数并生成一个set结构的数据类型。set数据类型的元素不会重复且是Array Iterator，所以可以利用这个特性来去重。</p>
<h4 id="根据对象中的某个键值去重"><a href="#根据对象中的某个键值去重" class="headerlink" title="根据对象中的某个键值去重"></a>根据对象中的某个键值去重</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">deWeight(arry) &#123;</span><br><span class="line">	let newAry = [];</span><br><span class="line">	for (let i = 0; i &lt; arry.length; i++) &#123;</span><br><span class="line">		if (newAry.indexOf(arry[i].id) == -1) &#123;</span><br><span class="line">			newAry.push(arry[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return newAry;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h4 id="数组对象去重"><a href="#数组对象去重" class="headerlink" title="数组对象去重"></a>数组对象去重</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">uniqs(array) &#123;</span><br><span class="line">let temp = []; //一个新的临时数组</span><br><span class="line">    for (let i = 0; i &lt; array.length; i++) &#123;</span><br><span class="line">    	if (temp.length == 0) &#123;</span><br><span class="line">    		temp.push(array[i]);</span><br><span class="line">    	&#125; else &#123;</span><br><span class="line">    		let o = 0;</span><br><span class="line">    		for (let a = 0; a &lt; temp.length; a++) &#123;</span><br><span class="line">    			var obj = array[i];</span><br><span class="line">    			var obj1 = temp[a];</span><br><span class="line">    			if (JSON.stringify(obj1) === JSON.stringify(obj)) &#123;</span><br><span class="line">    				o = 1;</span><br><span class="line">    				break;</span><br><span class="line">    			&#125;</span><br><span class="line">    		&#125;</span><br><span class="line">    		if (o == 0) &#123;</span><br><span class="line">    			temp.push(array[i]);</span><br><span class="line">    		&#125;</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return temp;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<h3 id="数组取交集"><a href="#数组取交集" class="headerlink" title="数组取交集"></a>数组取交集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a = [0, 1, 2, 3, 4, 5]</span><br><span class="line">const b = [3, 4, 5, 6, 7, 8]</span><br><span class="line">const duplicatedValues = [...new Set(a)].filter(item =&gt; b.includes(item))</span><br><span class="line">duplicatedValues // [3, 4, 5]</span><br></pre></td></tr></table></figure>

<h3 id="数组取差集"><a href="#数组取差集" class="headerlink" title="数组取差集"></a>数组取差集</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const a = [0, 1, 2, 3, 4, 5]</span><br><span class="line">const b = [3, 4, 5, 6, 7, 8]</span><br><span class="line">const diffValues = [...new Set([...a, ...b])].filter(item =&gt; !b.includes(item) || !a.includes(item)) // [0, 1, 2, 6, 7, 8]</span><br></pre></td></tr></table></figure>

<h3 id="数组转对象"><a href="#数组转对象" class="headerlink" title="数组转对象"></a>数组转对象</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4]</span><br><span class="line">const newObj = &#123;...arr&#125; // &#123;0: 1, 1: 2, 2: 3, 3: 4&#125;</span><br><span class="line">const obj = &#123;0: 0, 1: 1, 2: 2, length 3&#125;</span><br><span class="line">// 对象转数组不能用展开操作符，因为展开操作符必须用在可迭代对象上</span><br><span class="line">let newArr = [...obj] // Uncaught TypeError: object is not iterable...</span><br><span class="line">// 可以使用Array.form()将类数组对象转为数组</span><br><span class="line">let newArr = Array.from(obj) // [0, 1, 2]</span><br></pre></td></tr></table></figure>

<h3 id="数组常用遍历"><a href="#数组常用遍历" class="headerlink" title="数组常用遍历"></a>数组常用遍历</h3><p>数组常用遍历有 forEach、every、some、filter、map、reduce、reduceRight、find、findIndex 等方法，很多方法都可以达到同样的效果。数组方法不仅要会用，而且要用好。要用好就要知道什么时候用什么方法。</p>
<h3 id="遍历的混合使用"><a href="#遍历的混合使用" class="headerlink" title="遍历的混合使用"></a>遍历的混合使用</h3><p>filter、map方法返回值仍旧是一个数组，所以可以搭配其他数组遍历方法混合使用。注意遍历越多效率越低~</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line">const value = arr</span><br><span class="line">    .map(item =&gt; item * 3)</span><br><span class="line">    .filter(item =&gt; item % 2 === 0)</span><br><span class="line">    .map(item =&gt; item + 1)</span><br><span class="line">    .reduce((prev, curr) =&gt; prev + curr, 0)</span><br></pre></td></tr></table></figure>

<h3 id="检测数组所有元素是否都符合判断条件"><a href="#检测数组所有元素是否都符合判断条件" class="headerlink" title="检测数组所有元素是否都符合判断条件"></a>检测数组所有元素是否都符合判断条件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line">const isAllNum = arr.every(item =&gt; typeof item === &apos;number&apos;)</span><br></pre></td></tr></table></figure>

<h3 id="检测数组是否有元素符合判断条件"><a href="#检测数组是否有元素符合判断条件" class="headerlink" title="检测数组是否有元素符合判断条件"></a>检测数组是否有元素符合判断条件</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line">const hasNum = arr.some(item =&gt; typeof item === &apos;number&apos;)</span><br></pre></td></tr></table></figure>

<h3 id="找到第一个符合条件的元素-下标"><a href="#找到第一个符合条件的元素-下标" class="headerlink" title="找到第一个符合条件的元素/下标"></a>找到第一个符合条件的元素/下标</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line">const findItem = arr.find(item =&gt; item === 3) // 返回子项</span><br><span class="line">const findIndex = arr.findIndex(item =&gt; item === 3) // 返回子项的下标</span><br></pre></td></tr></table></figure>

<h3 id="数组使用误区"><a href="#数组使用误区" class="headerlink" title="数组使用误区"></a>数组使用误区</h3><p>数组的方法很多，很多方法都可以达到同样的效果，所以在使用时要根据需求使用合适的方法。<br>垃圾代码产生的很大原因是数组常用方法使用不当，这里有一下需要注意的点：</p>
<h4 id="array-includes-和-array-indexOf"><a href="#array-includes-和-array-indexOf" class="headerlink" title="array.includes() 和 array.indexOf()"></a>array.includes() 和 array.indexOf()</h4><p>array.includes() 返回布尔值，array.indexOf() 返回数组子项的索引。indexOf 一定要在需要索引值的情况下使用。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line">// 使用indexOf，需要用到索引值</span><br><span class="line">const index = arr.indexOf(1) // 0</span><br><span class="line">if (~index) &#123; // 若index === -1，~index得到0，判断不成立；若index不为-1，则~index得到非0，判断成立。</span><br><span class="line">    arr.spilce(index, 1)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用includes，不需要用到索引值</span><br><span class="line">// 此时若用indexOf会造成上下文上的阅读负担：到底其他地方有没有用到这个index?</span><br><span class="line">const isExist = arr.includes(6) // true</span><br><span class="line">if (!isExist) &#123;</span><br><span class="line">    arr.push(6)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="array-find-、-array-findIndex-和-array-some"><a href="#array-find-、-array-findIndex-和-array-some" class="headerlink" title="array.find() 、 array.findIndex() 和 array.some()"></a>array.find() 、 array.findIndex() 和 array.some()</h4><p>array.find()返回值是第一个符合条件的数组子项，array.findIndex() 返回第一个符合条件的数组子项的下标，array.some() 返回有无复合条件的子项，如有返回true，若无返回false。注意这三个都是短路操作，即找到符合条件的之后就不在继续遍历。<br>在需要数组的子项的时候使用array.find() ；需要子项的索引值的时候使用 array.findIndex() ；而若只需要知道有无符合条件的子项，则用 array.some()。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [&#123;label: &apos;男&apos;, value: 0&#125;, &#123;label: &apos;女&apos;, value: 1&#125;, &#123;label: &apos;不男不女&apos;, value: 2&#125;]</span><br><span class="line"></span><br><span class="line">// 使用some</span><br><span class="line">const isExist = arr.some(item =&gt; item.value === 2)</span><br><span class="line">if (isExist) &#123;</span><br><span class="line">    console.log(&apos;哈哈哈找到了&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用find</span><br><span class="line">const item = arr.find(item =&gt; item.value === 2)</span><br><span class="line">if (item) &#123;</span><br><span class="line">    console.log(item.label)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 使用findIndex</span><br><span class="line">const index = arr.findIndex(item =&gt; item.value === 2)</span><br><span class="line">if (~index) &#123;</span><br><span class="line">    const delItem = arr[index]</span><br><span class="line">    arr.splice(index, 1)</span><br><span class="line">    console.log(`你删除了$&#123;delItem.label&#125;`)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>建议在只需要布尔值的时候和数组子项是字符串或数字的时候使用</p>
<h5 id="array-some"><a href="#array-some" class="headerlink" title="array.some()"></a>array.some()</h5><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 当子包含数字0的时候可能出错</span><br><span class="line">const arr = [0, 1, 2, 3, 4]</span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line">const isExist = arr.some(item =&gt; item === 0)</span><br><span class="line">if (isExist) &#123;</span><br><span class="line">    console.log(&apos;存在要找的子项，很舒服~&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 错误</span><br><span class="line">const isExist = arr.find(item =&gt; item === 0)</span><br><span class="line">if (isExist) &#123; // isExist此时是0，隐式转换为布尔值后是false</span><br><span class="line">    console.log(&apos;执行不到这里~&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 当子项包含空字符串的时候也可能出错</span><br><span class="line">const arr = [&apos;&apos;, &apos;asdf&apos;, &apos;qwer&apos;, &apos;...&apos;]</span><br><span class="line"></span><br><span class="line">// 正确</span><br><span class="line">const isExist = arr.some(item =&gt; item === &apos;&apos;)</span><br><span class="line">if (isExist) &#123;</span><br><span class="line">    console.log(&apos;存在要找的子项，很舒服~&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 错误</span><br><span class="line">const isExist = arr.find(item =&gt; item === &apos;&apos;)</span><br><span class="line">if (isExist) &#123; // isExist此时是&apos;&apos;，隐式转换为布尔值后是false</span><br><span class="line">    console.log(&apos;执行不到这里~&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="array-find-和-array-filter"><a href="#array-find-和-array-filter" class="headerlink" title="array.find() 和 array.filter()"></a>array.find() 和 array.filter()</h4><p>只需要知道 array.filter() 返回的是所有符合条件的子项组成的数组，会遍历所有数组；而 array.find() 只返回第一个符合条件的子项，是短路操作。不再举例~</p>
<h4 id="合理使用-Set-数据结构"><a href="#合理使用-Set-数据结构" class="headerlink" title="合理使用 Set 数据结构"></a>合理使用 Set 数据结构</h4><p>由于 es6 原生提供了 Set 数据结构，而 Set 可以保证子项不重复，且和数组转换十分方便，所以在一些可能会涉及重复添加的场景下可以直接使用 Set 代替 Array，避免了多个地方重复判断是否已经存在该子项。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const set = new Set()</span><br><span class="line">set.add(1)</span><br><span class="line">set.add(1)</span><br><span class="line">set.add(1)</span><br><span class="line">set.size // 1</span><br><span class="line">const arr = [...set] // arr: [1]</span><br></pre></td></tr></table></figure>

<h4 id="强大的reduce"><a href="#强大的reduce" class="headerlink" title="强大的reduce"></a>强大的reduce</h4><p>array.reduce 遍历并将当前次回调函数的返回值作为下一次回调函数执行的第一个参数。<br>利用 array.reduce 替代一些需要多次遍历的场景，可以提高代码运行效率。<br>假如有如下每个元素都由字母’s’加数字组成的数组arr，现在找出其中最大的数字：（arr不为空）</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [&apos;s0&apos;, &apos;s4&apos;, &apos;s1&apos;, &apos;s2&apos;, &apos;s8&apos;, &apos;s3&apos;]</span><br><span class="line"></span><br><span class="line">// 方法1  进行了多次遍历，低效</span><br><span class="line">const newArr = arr.map(item =&gt; item.substring(1)).map(item =&gt; Number(item))</span><br><span class="line">const maxS = Math.max(...newArr)</span><br><span class="line"></span><br><span class="line">// 方法2  一次遍历</span><br><span class="line">const maxS = arr.reduce((prev, cur) =&gt; &#123;</span><br><span class="line">  const curIndex = Number(cur.replace(&apos;s&apos;, &apos;&apos;))</span><br><span class="line">  return curIndex &gt; prev ? curIndex : prev</span><br><span class="line">&#125;, 0)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const arr = [1, 2, 3, 4, 5]</span><br><span class="line"></span><br><span class="line"> // 方法1  遍历了两次，效率低</span><br><span class="line">const value = arr.filter(item =&gt; item % 2 === 0).map(item =&gt; (&#123; value: item &#125;))</span><br><span class="line"></span><br><span class="line">// 方法1  一次遍历，效率高</span><br><span class="line">const value = arr.reduce((prev, curr) =&gt; &#123;</span><br><span class="line">    return curr % 2 === 0 ? [...prev, curr] : prev</span><br><span class="line">&#125;, [])</span><br></pre></td></tr></table></figure>

<p>也可用 reduce 做下面这样的处理来生成想要的 html 结构：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 后端返回数据</span><br><span class="line">const data = &#123;</span><br><span class="line">  &apos;if _ then s9&apos;: [</span><br><span class="line">    &apos;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&apos;,</span><br><span class="line">    &apos;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&apos;,</span><br><span class="line">    &apos;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&apos;</span><br><span class="line">    ],</span><br><span class="line">  &apos;if C then s4&apos;: [</span><br><span class="line">    &apos;当有条件时时,结构构件满足要求,要求属于安全性、适用性和耐久性&apos;,</span><br><span class="line">    &apos;当有条件时时,住宅结构满足要求,要求属于安全性、适用性和耐久性&apos;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">const ifthens = Object.entries(data).reduce((prev, cur) =&gt; &#123;</span><br><span class="line">  const values = cur[1].reduce((prev, cur) =&gt; `$&#123;prev&#125;&lt;p&gt;$&#123;cur&#125;&lt;/p&gt;`, &apos;&apos;)</span><br><span class="line">  return `</span><br><span class="line">    $&#123;prev&#125;</span><br><span class="line">    &lt;li&gt;</span><br><span class="line">      &lt;p&gt;$&#123;cur[0]&#125;&lt;/p&gt;</span><br><span class="line">      $&#123;values&#125;</span><br><span class="line">    &lt;/li&gt;</span><br><span class="line">  `</span><br><span class="line">&#125;, &apos;&apos;)</span><br><span class="line"></span><br><span class="line">const html = `</span><br><span class="line">  &lt;ul class=&quot;nlp-notify-body&quot;&gt;</span><br><span class="line">    $&#123;ifthens&#125;</span><br><span class="line">  &lt;/ul&gt;</span><br><span class="line">`</span><br></pre></td></tr></table></figure>

<p>生成的html结构如下:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul class=&quot;nlp-notify-body&quot;&gt;            </span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;p&gt;if _ then s9&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;作用属于各种,结构属于住宅,结构能承受作用,作用属于在正常建造和正常使用过程中可能发生&lt;/p&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">  &lt;li&gt;</span><br><span class="line">    &lt;p&gt;if C then s4&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;当有条件时时,结构构件满足要求,要求属于安全性、适用性和耐久性&lt;/p&gt;</span><br><span class="line">    &lt;p&gt;当有条件时时,住宅结构满足要求,要求属于安全性、适用性和耐久性&lt;/p&gt;</span><br><span class="line">  &lt;/li&gt;</span><br><span class="line">&lt;/ul&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序搜索功能</title>
    <url>/2019/09/25/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<p><img src="/images/search.png" alt><img src="/images/s2.png" alt></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;view class=&quot;weui-search-bar&quot;&gt;</span><br><span class="line">   &lt;view class=&quot;weui-search-bar__form&quot;&gt;</span><br><span class="line">    &lt;view class=&quot;weui-search-bar__box&quot;&gt;</span><br><span class="line">      &lt;icon class=&quot;weui-icon-search_in-box&quot; type=&quot;search&quot; size=&quot;14&quot;&gt;&lt;/icon&gt;</span><br><span class="line">      &lt;input type=&quot;text&quot; class=&quot;weui-search-bar__input&quot; placeholder=&quot;搜索...&quot; value=&quot;&#123;&#123;wxSearchData.value&#125;&#125;&quot; bindinput=&quot;wxSearchInput&quot; bindconfirm=&quot;wxSearchConfirm&quot; /&gt;</span><br><span class="line">      &lt;view class=&quot;weui-icon-clear&quot; wx:if=&quot;&#123;&#123;wxSearchData.value.length &gt; 0&#125;&#125;&quot; bindtap=&quot;wxSearchClear&quot;&gt;</span><br><span class="line">        &lt;icon type=&quot;clear&quot; size=&quot;14&quot;&gt;&lt;/icon&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">    &lt;view class=&quot;weui-search-bar__cancel-btn&quot; bindtap=&quot;wxSearchConfirm&quot;&gt;</span><br><span class="line">         &lt;text wx:if=&quot;&#123;&#123;wxSearchData.value.length&gt;0&#125;&#125;&quot; data-key=&apos;search&apos;&gt;搜索&lt;/text&gt;</span><br><span class="line">         &lt;text wx:else data-key=&apos;back&apos;&gt;取消&lt;/text&gt;</span><br><span class="line">     &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"></span><br><span class="line">&lt;view class=&quot;wxSearch&quot; style=&quot;&apos;block&apos;;height:&#123;&#123;wxSearchData.view.seachHeight&#125;&#125;px;top:&#123;&#123;wxSearchData.view.barHeight&#125;&#125;px;&quot;&gt;</span><br><span class="line"></span><br><span class="line">  &lt;view class=&quot;wxSearchInner&quot;&gt;</span><br><span class="line">    &lt;!-- 搜索提示部分 --&gt;</span><br><span class="line">    &lt;view class=&quot;wxSearchMindKey&quot;&gt;</span><br><span class="line">      &lt;view class=&quot;wxSearchMindKeyList&quot;&gt;</span><br><span class="line">        &lt;block wx:for=&quot;&#123;&#123;wxSearchData.tipKeys&#125;&#125;&quot; wx:key=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;  </span><br><span class="line">          &lt;view class=&quot;wxSearchMindKeyItem&quot; bindtap=&quot;wxSearchKeyTap&quot; data-key=&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;view wx:if=&quot;&#123;&#123;wxSearchData.his[0]&#125;&#125;&quot; class=&quot;wxSearchHistory&quot; style=&quot;display:&#123;&#123;wxSearchData.value.length&gt;0 ? &apos;none&apos;:&apos;block&apos;&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;view class=&quot;wxSearchHistoryItem&quot;&gt;</span><br><span class="line">        &lt;text class=&quot;wxSearchHistoryItemTitle&quot;&gt;搜索记录&lt;/text&gt;</span><br><span class="line">        &lt;!--text class=&quot;wxSearchHistoryItemDel&quot; bindtap=&quot;wxSearchDeleteAll&quot;&gt;删除&lt;/text--&gt;</span><br><span class="line">        &lt;icon type=&quot;clear&quot; bindtap=&quot;wxSearchDeleteAll&quot; size=&quot;18&quot; /&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">      &lt;view class=&quot;wxSearchKeyList&quot;&gt;</span><br><span class="line">        &lt;block wx:for=&quot;&#123;&#123;wxSearchData.his&#125;&#125;&quot; wx:key=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;</span><br><span class="line">          &lt;view class=&quot;wxSearchKeyItem&quot; bindtap=&quot;wxSearchKeyTap&quot; data-key=&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line"></span><br><span class="line">    &lt;view class=&quot;wxSearchKey&quot; style=&quot;display:&#123;&#123;wxSearchData.value.length&gt;0 ? &apos;none&apos;:&apos;block&apos;&#125;&#125;&quot;&gt;</span><br><span class="line">      &lt;text wx:if=&quot;&#123;&#123;wxSearchData.hotKeys[0]&#125;&#125;&quot; class=&quot;wxSearchTitle&quot;&gt;搜索热点&lt;/text&gt;</span><br><span class="line">      &lt;view class=&quot;wxSearchKeyList&quot;&gt;</span><br><span class="line">        &lt;block wx:for=&quot;&#123;&#123;wxSearchData.hotKeys&#125;&#125;&quot; wx:key=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;</span><br><span class="line">          &lt;view class=&quot;wxSearchKeyItem&quot; bindtap=&quot;wxSearchKeyTap&quot; data-key=&quot;&#123;&#123;item&#125;&#125;&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/view&gt;</span><br><span class="line">        &lt;/block&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<p>搜索提示部分如图二 相当于联想词</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/** 整个区域 */</span><br><span class="line">.wxSearch&#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 86rpx;</span><br><span class="line">  left: 0;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  border-top: 2rpx #eee solid;</span><br><span class="line">  background-color: rgba(200, 200, 200, 0.1);</span><br><span class="line">  z-index: 9999;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 搜索框下面的提示区域 */</span><br><span class="line">.wxSearchInner&#123;</span><br><span class="line">  background-color: #fff;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 搜索热点标题 */</span><br><span class="line">.wxSearchTitle&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  padding: 20rpx 10rpx 10rpx 20rpx;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">  text-align: left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 提示样式 */</span><br><span class="line">.wxSearchMindKeyItem&#123;</span><br><span class="line">  padding: 20rpx 10rpx 20rpx 30rpx;</span><br><span class="line">  margin-left: 20rpx;</span><br><span class="line">  border-bottom: 2rpx solid #eee;</span><br><span class="line">  display: flex;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 标签样式 */</span><br><span class="line">.wxSearchKeyList&#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  flex-direction: row;</span><br><span class="line">  flex-wrap: wrap;</span><br><span class="line">  border-bottom: 2rpx solid #eee;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 标签样式 */</span><br><span class="line">.wxSearchKeyItem&#123;</span><br><span class="line">  flex: 0 0 18%;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  border: 2rpx solid #eee;</span><br><span class="line">  margin: 10rpx;</span><br><span class="line">  padding: 8rpx 10rpx 8rpx 10rpx;</span><br><span class="line">  border-radius: 0px;</span><br><span class="line">  background-color: rgba(200, 200, 200, 0.1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 搜索记录标题栏 */</span><br><span class="line">.wxSearchHistoryItem&#123;</span><br><span class="line">  padding-left: 20rpx;</span><br><span class="line">  padding-top: 20rpx;</span><br><span class="line">  padding-right: 10rpx;</span><br><span class="line">  padding-bottom: 10rpx;</span><br><span class="line">  display: flex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 搜索记录标题 */</span><br><span class="line">.wxSearchHistoryItemTitle&#123;</span><br><span class="line">  flex: 8;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** 搜索记录删除按钮 */</span><br><span class="line">.wxSearchHistoryItemDel&#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  font-size: 26rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  padding-top:4rpx;</span><br><span class="line">  padding-bottom: 4rpx;</span><br><span class="line">  border: 2rpx solid #eee;</span><br><span class="line">  border-radius: 4rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/** ---------------------- 以下是搜索框的 we-ui 样式--------------------------------*/</span><br><span class="line"></span><br><span class="line">/*!</span><br><span class="line"> * WeUI v1.1.1 (https://github.com/weui/weui-wxss)</span><br><span class="line"> * Copyright 2017 Tencent, Inc.</span><br><span class="line"> * Licensed under the MIT license</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">.weui-search-bar &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  padding: 16rpx 20rpx;</span><br><span class="line">  display: -webkit-box;</span><br><span class="line">  display: -webkit-flex;</span><br><span class="line">  display: flex;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  background-color: #efeff4;</span><br><span class="line">  border-top: 1rpx solid #d7d6dc;</span><br><span class="line">  border-bottom: 1rpx solid #d7d6dc;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-icon-search &#123;</span><br><span class="line">  margin-right: 16rpx;</span><br><span class="line">  font-size: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-icon-search_in-box &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  left: 12rpx;</span><br><span class="line">  top: 30rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__text &#123;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  vertical-align: middle;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__form &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  -webkit-box-flex: 1;</span><br><span class="line">  -webkit-flex: auto;</span><br><span class="line">  flex: auto;</span><br><span class="line">  border-radius: 5px;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border: 1rpx solid #e6e6ea;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__box &#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  padding-left: 30px;</span><br><span class="line">  padding-right: 30px;</span><br><span class="line">  width: 100%;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  z-index: 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__input &#123;</span><br><span class="line">  height: 28px;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-icon-clear &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  padding: 7px 8px;</span><br><span class="line">  font-size: 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__label &#123;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  z-index: 2;</span><br><span class="line">  border-radius: 3px;</span><br><span class="line">  text-align: center;</span><br><span class="line">  color: #9b9b9b;</span><br><span class="line">  background: #fff;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.weui-search-bar__cancel-btn &#123;</span><br><span class="line">  margin-left: 10px;</span><br><span class="line">  line-height: 28px;</span><br><span class="line">  color: #09bb07;</span><br><span class="line">  white-space: nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 提示集合</span><br><span class="line">var __tipKeys = [];</span><br><span class="line">// 搜索回调函数 </span><br><span class="line">var __searchFunction = null;</span><br><span class="line">// 返回函数 </span><br><span class="line">var __goBackFunction = null;</span><br><span class="line">// 应用变量</span><br><span class="line">var __that = null;</span><br><span class="line"></span><br><span class="line">// 初始化函数</span><br><span class="line">function init(that, hotKeys, tipKeys, searchFunction, goBackFunction) &#123;</span><br><span class="line"></span><br><span class="line">  __that = that;</span><br><span class="line">  __tipKeys = tipKeys;</span><br><span class="line">  __searchFunction = searchFunction;</span><br><span class="line">  __goBackFunction = goBackFunction;</span><br><span class="line"></span><br><span class="line">  var temData = &#123;&#125;;</span><br><span class="line">  var barHeight = 43;</span><br><span class="line">  var view = &#123;</span><br><span class="line">    barHeight: barHeight</span><br><span class="line">  &#125;</span><br><span class="line">  temData.hotKeys = hotKeys;</span><br><span class="line"></span><br><span class="line">  wx.getSystemInfo(&#123;</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line">      var wHeight = res.windowHeight;</span><br><span class="line">      view.seachHeight = wHeight - barHeight;</span><br><span class="line">      temData.view = view;</span><br><span class="line">      __that.setData(&#123;</span><br><span class="line">        wxSearchData: temData</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  getHisKeys(__that);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 搜索框输入时候操作</span><br><span class="line">function wxSearchInput(e) &#123;</span><br><span class="line">  var inputValue = e.detail.value;</span><br><span class="line">  // 页面数据</span><br><span class="line">  var temData = __that.data.wxSearchData;</span><br><span class="line">  // 寻找提示值 </span><br><span class="line">  var tipKeys = [];</span><br><span class="line">  if (inputValue &amp;&amp; inputValue.length &gt; 0) &#123;</span><br><span class="line">    for (var i = 0; i &lt; __tipKeys.length; i++) &#123;</span><br><span class="line">      var mindKey = __tipKeys[i];</span><br><span class="line">      // 包含字符串</span><br><span class="line">      if (mindKey.indexOf(inputValue) != -1) &#123;</span><br><span class="line">        tipKeys.push(mindKey);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  // 更新数据</span><br><span class="line">  temData.value = inputValue;</span><br><span class="line">  temData.tipKeys = tipKeys;</span><br><span class="line">  // 更新视图</span><br><span class="line">  __that.setData(&#123;</span><br><span class="line">    wxSearchData: temData</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 清空输入</span><br><span class="line">function wxSearchClear() &#123;</span><br><span class="line">  // 页面数据</span><br><span class="line">  var temData = __that.data.wxSearchData;</span><br><span class="line">  // 更新数据</span><br><span class="line">  temData.value = &quot;&quot;;</span><br><span class="line">  temData.tipKeys = [];</span><br><span class="line">  // 更新视图</span><br><span class="line">  __that.setData(&#123;</span><br><span class="line">    wxSearchData: temData</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 点击提示或者关键字、历史记录时的操作</span><br><span class="line">function wxSearchKeyTap(e) &#123;</span><br><span class="line">  search(e.target.dataset.key);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 确任或者回车</span><br><span class="line">function wxSearchConfirm(e) &#123;</span><br><span class="line">  var key = e.target.dataset.key;</span><br><span class="line">  if (key == &apos;back&apos;) &#123;</span><br><span class="line">    __goBackFunction();</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    search(__that.data.wxSearchData.value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function search(inputValue) &#123;</span><br><span class="line">  if (inputValue &amp;&amp; inputValue.length &gt; 0) &#123;</span><br><span class="line">    // 添加历史记录</span><br><span class="line">    wxSearchAddHisKey(inputValue);</span><br><span class="line">    // 更新</span><br><span class="line">    var temData = __that.data.wxSearchData;</span><br><span class="line">    temData.value = inputValue;</span><br><span class="line">    __that.setData(&#123;</span><br><span class="line">      wxSearchData: temData</span><br><span class="line">    &#125;);</span><br><span class="line">    // 回调搜索</span><br><span class="line">    __searchFunction(inputValue);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 读取缓存</span><br><span class="line">function getHisKeys() &#123;</span><br><span class="line">  var value = [];</span><br><span class="line">  try &#123;</span><br><span class="line">    value = wx.getStorageSync(&apos;wxSearchHisKeys&apos;)</span><br><span class="line">    if (value) &#123;</span><br><span class="line">      // Do something with return value</span><br><span class="line">      var temData = __that.data.wxSearchData;</span><br><span class="line">      temData.his = value;</span><br><span class="line">      __that.setData(&#123;</span><br><span class="line">        wxSearchData: temData</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    // Do something when catch error</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 添加缓存</span><br><span class="line">function wxSearchAddHisKey(inputValue) &#123;</span><br><span class="line">  if (!inputValue || inputValue.length == 0) &#123;</span><br><span class="line">    return;</span><br><span class="line">  &#125;</span><br><span class="line">  var value = wx.getStorageSync(&apos;wxSearchHisKeys&apos;);</span><br><span class="line">  if (value) &#123;</span><br><span class="line">    if (value.indexOf(inputValue) &lt; 0) &#123;</span><br><span class="line">      value.unshift(inputValue);</span><br><span class="line">    &#125;</span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      key: &quot;wxSearchHisKeys&quot;,</span><br><span class="line">      data: value,</span><br><span class="line">      success: function () &#123;</span><br><span class="line">        getHisKeys(__that);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    value = [];</span><br><span class="line">    value.push(inputValue);</span><br><span class="line">    wx.setStorage(&#123;</span><br><span class="line">      key: &quot;wxSearchHisKeys&quot;,</span><br><span class="line">      data: value,</span><br><span class="line">      success: function () &#123;</span><br><span class="line">        getHisKeys(__that);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 删除缓存</span><br><span class="line">function wxSearchDeleteAll() &#123;</span><br><span class="line">  wx.removeStorage(&#123;</span><br><span class="line">    key: &apos;wxSearchHisKeys&apos;,</span><br><span class="line">    success: function (res) &#123;</span><br><span class="line">      var value = [];</span><br><span class="line">      var temData = __that.data.wxSearchData;</span><br><span class="line">      temData.his = value;</span><br><span class="line">      __that.setData(&#123;</span><br><span class="line">        wxSearchData: temData</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 导出接口</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  init: init, //初始化函数</span><br><span class="line">  wxSearchInput: wxSearchInput,// 输入变化时的操作</span><br><span class="line">  wxSearchKeyTap: wxSearchKeyTap, // 点击提示或者关键字、历史记录时的操作</span><br><span class="line">  wxSearchDeleteAll: wxSearchDeleteAll, // 删除所有的历史记录</span><br><span class="line">  wxSearchConfirm: wxSearchConfirm, // 搜索函数</span><br><span class="line">  wxSearchClear: wxSearchClear,  // 清空函数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>###上面这个js是以后哪里需要调用即可 下面这个js是我自己调用的例子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 1 导入js文件</span><br><span class="line">var WxSearch = require(&apos;../wxSearch/wxSearch.js&apos;);//写上面那个js的路径就行了</span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;&#125;,</span><br><span class="line">  onLoad: function () &#123;</span><br><span class="line">    // 2 搜索栏初始化</span><br><span class="line">    var that = this;</span><br><span class="line">    WxSearch.init(</span><br><span class="line">      that,  // 本页面一个引用</span><br><span class="line">      [&apos;搜索内容&apos;, &apos;搜索内容&apos;, &quot;搜索内容&quot;, &quot;搜索内容&quot;, &apos;搜索内容&apos;, &apos;搜索内容&apos;], // 热点搜索推荐，[]表示不使用</span><br><span class="line">      [&apos;搜索的相关内容&apos;, &apos;搜索的相关内容&apos;, &apos;搜索的相关内容&apos;, &quot;搜索的相关内容&quot;],// 搜索匹配，[]表示不使用</span><br><span class="line">      that.mySearchFunction, // 提供一个搜索回调函数</span><br><span class="line">      that.myGobackFunction //提供一个返回回调函数</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 3 转发函数，固定部分，直接拷贝即可</span><br><span class="line">  wxSearchInput: WxSearch.wxSearchInput,  // 输入变化时的操作</span><br><span class="line">  wxSearchKeyTap: WxSearch.wxSearchKeyTap,  // 点击提示或者关键字、历史记录时的操作</span><br><span class="line">  wxSearchDeleteAll: WxSearch.wxSearchDeleteAll, // 删除所有的历史记录</span><br><span class="line">  wxSearchConfirm: WxSearch.wxSearchConfirm,  // 搜索函数</span><br><span class="line">  wxSearchClear: WxSearch.wxSearchClear,  // 清空函数</span><br><span class="line"></span><br><span class="line">  // 4 搜索回调函数  </span><br><span class="line">  mySearchFunction: function (value) &#123;</span><br><span class="line">    // do your job here</span><br><span class="line">    // 示例：跳转</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      url: &apos;../index/index?searchValue=&apos; + value</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  // 5 返回回调函数</span><br><span class="line">  myGobackFunction: function () &#123;</span><br><span class="line">    // do your job here</span><br><span class="line">    // 示例：返回</span><br><span class="line">    wx.redirectTo(&#123;</span><br><span class="line">      url: &apos;../index/index?searchValue=返回&apos;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>常用JS工具函数</title>
    <url>/2020/08/08/%E5%B8%B8%E7%94%A8JS%E5%B7%A5%E5%85%B7%E5%87%BD%E6%95%B0/</url>
    <content><![CDATA[<h3 id="节流"><a href="#节流" class="headerlink" title="节流"></a>节流</h3><p>性能优化方案，节流用于减少函数请求次数，与防抖不同，节流是在一段时间执行一次。</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;function&#125; func - 执行函数</span><br><span class="line"> * @param &#123;number&#125; delay - 延迟时间</span><br><span class="line"> * @return &#123;function&#125;</span><br><span class="line"> */</span><br><span class="line">function throttle(func, delay)&#123;</span><br><span class="line">  let timer = null</span><br><span class="line">  return function(...arg)&#123;</span><br><span class="line">    if(!timer)&#123;</span><br><span class="line">      timer = setTimeout(()=&gt;&#123;</span><br><span class="line">        func.apply(this, arg)</span><br><span class="line">        timer = null</span><br><span class="line">      &#125;, delay)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">let scrollHandler = throttle(function(e)&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;, 500)</span><br><span class="line">window.onscroll = scrollHandler</span><br></pre></td></tr></table></figure>

<h3 id="防抖"><a href="#防抖" class="headerlink" title="防抖"></a>防抖</h3><p>性能优化方案，防抖用于减少函数请求次数，对于频繁的请求，只执行这些请求的最后一次。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//基础版本</span><br><span class="line">function debounce(func, wait = 300)&#123;</span><br><span class="line">  let timer = null;</span><br><span class="line">  return function()&#123;</span><br><span class="line">    if(timer !== null)&#123;</span><br><span class="line">      clearTimeout(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = setTimeout(func.bind(this),wait);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//改进版本--添加是否立即执行的参数，因为有些场景下，我们希望函数能立即执行</span><br><span class="line">/**</span><br><span class="line"> * @param &#123;function&#125; func - 执行函数</span><br><span class="line"> * @param &#123;number&#125; wait - 等待时间</span><br><span class="line"> * @param &#123;boolean&#125; immediate - 是否立即执行</span><br><span class="line"> * @return &#123;function&#125;</span><br><span class="line"> */</span><br><span class="line">function debounce(func, wait = 300, immediate = false)&#123;</span><br><span class="line">  let timer, ctx;</span><br><span class="line">  let later = (arg) =&gt; setTimeout(()=&gt;&#123;</span><br><span class="line">    func.apply(ctx, arg)</span><br><span class="line">    timer = ctx = null</span><br><span class="line">  &#125;, wait)</span><br><span class="line">  return function(...arg)&#123;</span><br><span class="line">    if(!timer)&#123;</span><br><span class="line">      timer = later(arg)</span><br><span class="line">      ctx = this</span><br><span class="line">      if(immediate)&#123;</span><br><span class="line">        func.apply(ctx, arg)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;else&#123;</span><br><span class="line">      clearTimeout(timer)</span><br><span class="line">      timer = later(arg)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">let scrollHandler = debounce(function(e)&#123;</span><br><span class="line">  console.log(e)</span><br><span class="line">&#125;, 500)</span><br><span class="line">window.onscroll = scrollHandler</span><br></pre></td></tr></table></figure>

<h3 id="日期格式化"><a href="#日期格式化" class="headerlink" title="日期格式化"></a>日期格式化</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;string&#125; format</span><br><span class="line"> * @param &#123;number&#125; timestamp - 时间戳</span><br><span class="line"> * @return &#123;string&#125; </span><br><span class="line"> */</span><br><span class="line">function formatDate(format=&apos;Y-M-D h:m&apos;, timestamp=Date.now())&#123;</span><br><span class="line">  let date = new Date(timestamp)</span><br><span class="line">  let dateInfo = &#123;</span><br><span class="line">    Y: date.getFullYear(),</span><br><span class="line">    M: date.getMonth()+1,</span><br><span class="line">    D: date.getDate(),</span><br><span class="line">    h: date.getHours(),</span><br><span class="line">    m: date.getMinutes(),</span><br><span class="line">    s: date.getSeconds()</span><br><span class="line">  &#125;</span><br><span class="line">  let formatNumber = (n) =&gt; n &gt; 10 ? n : &apos;0&apos; + n</span><br><span class="line">  let res = format</span><br><span class="line">    .replace(&apos;Y&apos;, dateInfo.Y)</span><br><span class="line">    .replace(&apos;M&apos;, dateInfo.M)</span><br><span class="line">    .replace(&apos;D&apos;, dateInfo.D)</span><br><span class="line">    .replace(&apos;h&apos;, formatNumber(dateInfo.h))</span><br><span class="line">    .replace(&apos;m&apos;, formatNumber(dateInfo.m))</span><br><span class="line">    .replace(&apos;s&apos;, formatNumber(dateInfo.s))</span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">formatDate() // &quot;2020-2-24 13:44&quot;</span><br><span class="line">formatDate(&apos;M月D日 h:m&apos;) // &quot;2月24日 13:45&quot;</span><br><span class="line">formatDate(&apos;h:m Y-M-D&apos;, 1582526221604) // &quot;14:37 2020-2-24&quot;</span><br></pre></td></tr></table></figure>

<h3 id="对象属性剔除"><a href="#对象属性剔除" class="headerlink" title="对象属性剔除"></a>对象属性剔除</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;object&#125; object</span><br><span class="line"> * @param &#123;string[]&#125; props</span><br><span class="line"> * @return &#123;object&#125;</span><br><span class="line"> */</span><br><span class="line">function omit(object, props=[])&#123;</span><br><span class="line">  let res = &#123;&#125;</span><br><span class="line">  Object.keys(object).forEach(key=&gt;&#123;</span><br><span class="line">    if(props.includes(key) === false)&#123;</span><br><span class="line">      res[key] = typeof object[key] === &apos;object&apos; &amp;&amp; object[key] !== null ?</span><br><span class="line">        JSON.parse(JSON.stringify(object[key])):</span><br><span class="line">        object[key]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  return res</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">let data = &#123;</span><br><span class="line">  id: 1,</span><br><span class="line">  title: &apos;xxx&apos;,</span><br><span class="line">  comment: []</span><br><span class="line">&#125;</span><br><span class="line">omit(data, [&apos;id&apos;]) // &#123;title: &apos;xxx&apos;, comment: []&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类型判断"><a href="#类型判断" class="headerlink" title="类型判断"></a>类型判断</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/**</span><br><span class="line"> * @param &#123;any&#125; target </span><br><span class="line"> * @param &#123;string&#125; type </span><br><span class="line"> * @return &#123;boolean&#125; </span><br><span class="line"> */</span><br><span class="line">function isType(target, type) &#123;</span><br><span class="line">  let targetType = Object.prototype.toString.call(target).slice(8, -1).toLowerCase()</span><br><span class="line">  return targetType === type.toLowerCase()</span><br><span class="line">&#125;</span><br><span class="line">//使用</span><br><span class="line">isType([], &apos;Array&apos;) // true</span><br><span class="line">isType(/\d/, &apos;RegExp&apos;) // true</span><br><span class="line">isType(new Date(), &apos;Date&apos;) // true</span><br><span class="line">isType(function()&#123;&#125;, &apos;Function&apos;) // true</span><br><span class="line">isType(Symbol(1), &apos;Symbol&apos;) // true</span><br></pre></td></tr></table></figure>

<h3 id="生成一周时间"><a href="#生成一周时间" class="headerlink" title="生成一周时间"></a>生成一周时间</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getWeekTime()&#123;</span><br><span class="line">  return [...new Array(7)].map((j,i)=&gt; new Date(Date.now()+i*8.64e7).toLocaleDateString())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="提取页面代码中所有网址"><a href="#提取页面代码中所有网址" class="headerlink" title="提取页面代码中所有网址"></a>提取页面代码中所有网址</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var aa = document.documentElement.outerHTML</span><br><span class="line">  .match(</span><br><span class="line">    /(url\(|src=|href=)[\&quot;\&apos;]*([^\&quot;\&apos;\(\)\&lt;\&gt;\[\] ]+)[\&quot;\&apos;\)]*|(http:\/\/[\w\-\.]+[^\&quot;\&apos;\(\)\&lt;\&gt;\[\] ]+)/gi</span><br><span class="line">  )</span><br><span class="line">  .join(&quot;\r\n&quot;)</span><br><span class="line">  .replace(/^(src=|href=|url\()[\&quot;\&apos;]*|[\&quot;\&apos;\&gt;\) ]*$/gim, &quot;&quot;);</span><br><span class="line">alert(aa);</span><br></pre></td></tr></table></figure>

<h3 id="返回顶部的通用方法"><a href="#返回顶部的通用方法" class="headerlink" title="返回顶部的通用方法"></a>返回顶部的通用方法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function backTop(btnId) &#123;</span><br><span class="line">  var btn = document.getElementById(btnId);</span><br><span class="line">  var d = document.documentElement;</span><br><span class="line">  var b = document.body;</span><br><span class="line">  window.onscroll = set;</span><br><span class="line">  btn.style.display = &quot;none&quot;;</span><br><span class="line">  btn.onclick = function() &#123;</span><br><span class="line">    btn.style.display = &quot;none&quot;;</span><br><span class="line">    window.onscroll = null;</span><br><span class="line">    this.timer = setInterval(function() &#123;</span><br><span class="line">      d.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);</span><br><span class="line">      b.scrollTop -= Math.ceil((d.scrollTop + b.scrollTop) * 0.1);</span><br><span class="line">      if (d.scrollTop + b.scrollTop == 0)</span><br><span class="line">        clearInterval(btn.timer, (window.onscroll = set));</span><br><span class="line">    &#125;, 10);</span><br><span class="line">  &#125;;</span><br><span class="line">  function set() &#123;</span><br><span class="line">    btn.style.display = d.scrollTop + b.scrollTop &gt; 100 ? &quot;block&quot; : &quot;none&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">backTop(&quot;goTop&quot;);</span><br></pre></td></tr></table></figure>

<h3 id="实现base64解码"><a href="#实现base64解码" class="headerlink" title="实现base64解码"></a>实现base64解码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function base64_decode(data) &#123;</span><br><span class="line">  var b64 = &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;;</span><br><span class="line">  var o1,</span><br><span class="line">    o2,</span><br><span class="line">    o3,</span><br><span class="line">    h1,</span><br><span class="line">    h2,</span><br><span class="line">    h3,</span><br><span class="line">    h4,</span><br><span class="line">    bits,</span><br><span class="line">    i = 0,</span><br><span class="line">    ac = 0,</span><br><span class="line">    dec = &quot;&quot;,</span><br><span class="line">    tmp_arr = [];</span><br><span class="line">  if (!data) &#123;</span><br><span class="line">    return data;</span><br><span class="line">  &#125;</span><br><span class="line">  data += &quot;&quot;;</span><br><span class="line">  do &#123;</span><br><span class="line">    h1 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h2 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h3 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    h4 = b64.indexOf(data.charAt(i++));</span><br><span class="line">    bits = (h1 &lt;&lt; 18) | (h2 &lt;&lt; 12) | (h3 &lt;&lt; 6) | h4;</span><br><span class="line">    o1 = (bits &gt;&gt; 16) &amp; 0xff;</span><br><span class="line">    o2 = (bits &gt;&gt; 8) &amp; 0xff;</span><br><span class="line">    o3 = bits &amp; 0xff;</span><br><span class="line">    if (h3 == 64) &#123;</span><br><span class="line">      tmp_arr[ac++] = String.fromCharCode(o1);</span><br><span class="line">    &#125; else if (h4 == 64) &#123;</span><br><span class="line">      tmp_arr[ac++] = String.fromCharCode(o1, o2);</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      tmp_arr[ac++] = String.fromCharCode(o1, o2, o3);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; while (i &lt; data.length);</span><br><span class="line">  dec = tmp_arr.join(&quot;&quot;);</span><br><span class="line">  dec = utf8_decode(dec);</span><br><span class="line">  return dec;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取当前路径"><a href="#获取当前路径" class="headerlink" title="获取当前路径"></a>获取当前路径</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var currentPageUrl = &quot;&quot;;</span><br><span class="line">if (typeof this.href === &quot;undefined&quot;) &#123;</span><br><span class="line">  currentPageUrl = document.location.toString().toLowerCase();</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  currentPageUrl = this.href.toString().toLowerCase();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串长度截取"><a href="#字符串长度截取" class="headerlink" title="字符串长度截取"></a>字符串长度截取</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function cutstr(str, len) &#123;</span><br><span class="line">    var temp,</span><br><span class="line">        icount = 0,</span><br><span class="line">        patrn = /[^\x00-\xff]/，</span><br><span class="line">        strre = &quot;&quot;;</span><br><span class="line">    for (var i = 0; i &lt; str.length; i++) &#123;</span><br><span class="line">        if (icount &lt; len - 1) &#123;</span><br><span class="line">            temp = str.substr(i, 1);</span><br><span class="line">                if (patrn.exec(temp) == null) &#123;</span><br><span class="line">                   icount = icount + 1</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                icount = icount + 2</span><br><span class="line">            &#125;</span><br><span class="line">            strre += temp</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return strre + &quot;...&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="时间日期格式转换"><a href="#时间日期格式转换" class="headerlink" title="时间日期格式转换"></a>时间日期格式转换</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Date.prototype.format = function(formatStr) &#123;</span><br><span class="line">  var str = formatStr;</span><br><span class="line">  var Week = [&quot;日&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;];</span><br><span class="line">  str = str.replace(/yyyy|YYYY/, this.getFullYear());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /yy|YY/,</span><br><span class="line">    this.getYear() % 100 &gt; 9</span><br><span class="line">      ? (this.getYear() % 100).toString()</span><br><span class="line">      : &quot;0&quot; + (this.getYear() % 100)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /MM/,</span><br><span class="line">    this.getMonth() + 1 &gt; 9</span><br><span class="line">      ? (this.getMonth() + 1).toString()</span><br><span class="line">      : &quot;0&quot; + (this.getMonth() + 1)</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(/M/g, this.getMonth() + 1);</span><br><span class="line">  str = str.replace(/w|W/g, Week[this.getDay()]);</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /dd|DD/,</span><br><span class="line">    this.getDate() &gt; 9 ? this.getDate().toString() : &quot;0&quot; + this.getDate()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(/d|D/g, this.getDate());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /hh|HH/,</span><br><span class="line">    this.getHours() &gt; 9 ? this.getHours().toString() : &quot;0&quot; + this.getHours()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(/h|H/g, this.getHours());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /mm/,</span><br><span class="line">    this.getMinutes() &gt; 9</span><br><span class="line">      ? this.getMinutes().toString()</span><br><span class="line">      : &quot;0&quot; + this.getMinutes()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(/m/g, this.getMinutes());</span><br><span class="line">  str = str.replace(</span><br><span class="line">    /ss|SS/,</span><br><span class="line">    this.getSeconds() &gt; 9</span><br><span class="line">      ? this.getSeconds().toString()</span><br><span class="line">      : &quot;0&quot; + this.getSeconds()</span><br><span class="line">  );</span><br><span class="line">  str = str.replace(/s|S/g, this.getSeconds());</span><br><span class="line">  return str;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 或</span><br><span class="line">Date.prototype.format = function(format) &#123;</span><br><span class="line">  var o = &#123;</span><br><span class="line">    &quot;M+&quot;: this.getMonth() + 1, //month</span><br><span class="line">    &quot;d+&quot;: this.getDate(), //day</span><br><span class="line">    &quot;h+&quot;: this.getHours(), //hour</span><br><span class="line">    &quot;m+&quot;: this.getMinutes(), //minute</span><br><span class="line">    &quot;s+&quot;: this.getSeconds(), //second</span><br><span class="line">    &quot;q+&quot;: Math.floor((this.getMonth() + 3) / 3), //quarter</span><br><span class="line">    S: this.getMilliseconds() //millisecond</span><br><span class="line">  &#125;;</span><br><span class="line">  if (/(y+)/.test(format))</span><br><span class="line">    format = format.replace(</span><br><span class="line">      RegExp.$1,</span><br><span class="line">      (this.getFullYear() + &quot;&quot;).substr(4 - RegExp.$1.length)</span><br><span class="line">    );</span><br><span class="line">  for (var k in o) &#123;</span><br><span class="line">    if (new RegExp(&quot;(&quot; + k + &quot;)&quot;).test(format))</span><br><span class="line">      format = format.replace(</span><br><span class="line">        RegExp.$1,</span><br><span class="line">        RegExp.$1.length == 1 ? o[k] : (&quot;00&quot; + o[k]).substr((&quot;&quot; + o[k]).length)</span><br><span class="line">      );</span><br><span class="line">  &#125;</span><br><span class="line">  return format;</span><br><span class="line">&#125;;</span><br><span class="line">alert(new Date().format(&quot;yyyy-MM-dd hh:mm:ss&quot;));</span><br></pre></td></tr></table></figure>

<h3 id="判断是否以某个字符串结束"><a href="#判断是否以某个字符串结束" class="headerlink" title="判断是否以某个字符串结束"></a>判断是否以某个字符串结束</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">String.prototype.endWith = function(s) &#123;</span><br><span class="line">  var d = this.length - s.length;</span><br><span class="line">  return d &gt;= 0 &amp;&amp; this.lastIndexOf(s) == d;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h3 id="获取移动设备初始化大小"><a href="#获取移动设备初始化大小" class="headerlink" title="获取移动设备初始化大小"></a>获取移动设备初始化大小</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getInitZoom() &#123;</span><br><span class="line">  if (!this._initZoom) &#123;</span><br><span class="line">    var screenWidth = Math.min(screen.height, screen.width);</span><br><span class="line">    if (this.isAndroidMobileDevice() &amp;&amp; !this.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      screenWidth = screenWidth / window.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">    this._initZoom = screenWidth / document.body.offsetWidth;</span><br><span class="line">  &#125;</span><br><span class="line">  return this._initZoom;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取页面高度"><a href="#获取页面高度" class="headerlink" title="获取页面高度"></a>获取页面高度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPageHeight() &#123;</span><br><span class="line">  var g = document,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == &quot;BackCompat&quot; ? a : g.documentElement;</span><br><span class="line">  return Math.max(f.scrollHeight, a.scrollHeight, d.clientHeight);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取页面可视高度"><a href="#获取页面可视高度" class="headerlink" title="获取页面可视高度"></a>获取页面可视高度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPageViewHeight() &#123;</span><br><span class="line">  var d = document,</span><br><span class="line">    a = d.compatMode == &quot;BackCompat&quot; ? d.body : d.documentElement;</span><br><span class="line">  return a.clientHeight;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取页面可视宽度"><a href="#获取页面可视宽度" class="headerlink" title="获取页面可视宽度"></a>获取页面可视宽度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPageViewWidth() &#123;</span><br><span class="line">  var d = document,</span><br><span class="line">    a = d.compatMode == &quot;BackCompat&quot; ? d.body : d.documentElement;</span><br><span class="line">  return a.clientWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取页面宽度"><a href="#获取页面宽度" class="headerlink" title="获取页面宽度"></a>获取页面宽度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getPageWidth() &#123;</span><br><span class="line">  var g = document,</span><br><span class="line">    a = g.body,</span><br><span class="line">    f = g.documentElement,</span><br><span class="line">    d = g.compatMode == &quot;BackCompat&quot; ? a : g.documentElement;</span><br><span class="line">  return Math.max(f.scrollWidth, a.scrollWidth, d.clientWidth);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取移动设备屏幕宽度"><a href="#获取移动设备屏幕宽度" class="headerlink" title="获取移动设备屏幕宽度"></a>获取移动设备屏幕宽度</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getScreenWidth() &#123;</span><br><span class="line">  var smallerSide = Math.min(screen.width, screen.height);</span><br><span class="line">  var fixViewPortsExperiment =</span><br><span class="line">    rendererModel.runningExperiments.FixViewport ||</span><br><span class="line">    rendererModel.runningExperiments.fixviewport;</span><br><span class="line">  var fixViewPortsExperimentRunning =</span><br><span class="line">    fixViewPortsExperiment &amp;&amp; fixViewPortsExperiment.toLowerCase() === &quot;new&quot;;</span><br><span class="line">  if (fixViewPortsExperiment) &#123;</span><br><span class="line">    if (this.isAndroidMobileDevice() &amp;&amp; !this.isNewChromeOnAndroid()) &#123;</span><br><span class="line">      smallerSide = smallerSide / window.devicePixelRatio;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  return smallerSide;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="获取窗体可见范围的宽与高"><a href="#获取窗体可见范围的宽与高" class="headerlink" title="获取窗体可见范围的宽与高"></a>获取窗体可见范围的宽与高</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function getViewSize() &#123;</span><br><span class="line">  var de = document.documentElement;</span><br><span class="line">  var db = document.body;</span><br><span class="line">  var viewW = de.clientWidth == 0 ? db.clientWidth : de.clientWidth;</span><br><span class="line">  var viewH = de.clientHeight == 0 ? db.clientHeight : de.clientHeight;</span><br><span class="line">  return Array(viewW, viewH);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否安卓移动设备访问"><a href="#判断是否安卓移动设备访问" class="headerlink" title="判断是否安卓移动设备访问"></a>判断是否安卓移动设备访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isAndroidMobileDevice() &#123;</span><br><span class="line">  return /android/i.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否苹果移动设备访问"><a href="#判断是否苹果移动设备访问" class="headerlink" title="判断是否苹果移动设备访问"></a>判断是否苹果移动设备访问</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isAppleMobileDevice() &#123;</span><br><span class="line">  return /iphone|ipod|ipad|Macintosh/i.test(navigator.userAgent.toLowerCase());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否为数字类型"><a href="#判断是否为数字类型" class="headerlink" title="判断是否为数字类型"></a>判断是否为数字类型</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isDigit(value) &#123;</span><br><span class="line">  var patrn = /^[0-9]*$/;</span><br><span class="line">  if (patrn.exec(value) == null || value == &quot;&quot;) &#123;</span><br><span class="line">    return false;</span><br><span class="line">  &#125; else &#123;</span><br><span class="line">    return true;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="判断是否Touch屏幕"><a href="#判断是否Touch屏幕" class="headerlink" title="判断是否Touch屏幕"></a>判断是否Touch屏幕</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isTouchScreen() &#123;</span><br><span class="line">  return (</span><br><span class="line">    &quot;ontouchstart&quot; in window ||</span><br><span class="line">    (window.DocumentTouch &amp;&amp; document instanceof DocumentTouch)</span><br><span class="line">  );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="金额大写转换函数"><a href="#金额大写转换函数" class="headerlink" title="金额大写转换函数"></a>金额大写转换函数</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function transform(tranvalue) &#123;</span><br><span class="line">  try &#123;</span><br><span class="line">    var i = 1;</span><br><span class="line">    var dw2 = new Array(&quot;&quot;, &quot;万&quot;, &quot;亿&quot;); //大单位</span><br><span class="line">    var dw1 = new Array(&quot;拾&quot;, &quot;佰&quot;, &quot;仟&quot;); //小单位</span><br><span class="line">    var dw = new Array(</span><br><span class="line">      &quot;零&quot;,</span><br><span class="line">      &quot;壹&quot;,</span><br><span class="line">      &quot;贰&quot;,</span><br><span class="line">      &quot;叁&quot;,</span><br><span class="line">      &quot;肆&quot;,</span><br><span class="line">      &quot;伍&quot;,</span><br><span class="line">      &quot;陆&quot;,</span><br><span class="line">      &quot;柒&quot;,</span><br><span class="line">      &quot;捌&quot;,</span><br><span class="line">      &quot;玖&quot;</span><br><span class="line">    );</span><br><span class="line">    //整数部分用</span><br><span class="line">    //以下是小写转换成大写显示在合计大写的文本框中</span><br><span class="line">    //分离整数与小数</span><br><span class="line">    var source = splits(tranvalue);</span><br><span class="line">    var num = source[0];</span><br><span class="line">    var dig = source[1];</span><br><span class="line">    //转换整数部分</span><br><span class="line">    var k1 = 0; //计小单位</span><br><span class="line">    var k2 = 0; //计大单位</span><br><span class="line">    var sum = 0;</span><br><span class="line">    var str = &quot;&quot;;</span><br><span class="line">    var len = source[0].length; //整数的长度</span><br><span class="line">    for (i = 1; i &lt;= len; i++) &#123;</span><br><span class="line">      var n = source[0].charAt(len - i); //取得某个位数上的数字</span><br><span class="line">      var bn = 0;</span><br><span class="line">      if (len - i - 1 &gt;= 0) &#123;</span><br><span class="line">        bn = source[0].charAt(len - i - 1); //取得某个位数前一位上的数字</span><br><span class="line">      &#125;</span><br><span class="line">      sum = sum + Number(n);</span><br><span class="line">      if (sum != 0) &#123;</span><br><span class="line">        str = dw[Number(n)].concat(str); //取得该数字对应的大写数字，并插入到str字符串的前面</span><br><span class="line">        if (n == &quot;0&quot;) sum = 0;</span><br><span class="line">      &#125;</span><br><span class="line">      if (len - i - 1 &gt;= 0) &#123;</span><br><span class="line">        //在数字范围内</span><br><span class="line">        if (k1 != 3) &#123;</span><br><span class="line">          //加小单位</span><br><span class="line">          if (bn != 0) &#123;</span><br><span class="line">            str = dw1[k1].concat(str);</span><br><span class="line">          &#125;</span><br><span class="line">          k1++;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">          //不加小单位，加大单位</span><br><span class="line">          k1 = 0;</span><br><span class="line">          var temp = str.charAt(0);</span><br><span class="line">          if (temp == &quot;万&quot; || temp == &quot;亿&quot;)</span><br><span class="line">            //若大单位前没有数字则舍去大单位</span><br><span class="line">            str = str.substr(1, str.length - 1);</span><br><span class="line">          str = dw2[k2].concat(str);</span><br><span class="line">          sum = 0;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if (k1 == 3) &#123;</span><br><span class="line">        //小单位到千则大单位进一</span><br><span class="line">        k2++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //转换小数部分</span><br><span class="line">    var strdig = &quot;&quot;;</span><br><span class="line">    if (dig != &quot;&quot;) &#123;</span><br><span class="line">      var n = dig.charAt(0);</span><br><span class="line">      if (n != 0) &#123;</span><br><span class="line">        strdig += dw[Number(n)] + &quot;角&quot;; //加数字</span><br><span class="line">      &#125;</span><br><span class="line">      var n = dig.charAt(1);</span><br><span class="line">      if (n != 0) &#123;</span><br><span class="line">        strdig += dw[Number(n)] + &quot;分&quot;; //加数字</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    str += &quot;元&quot; + strdig;</span><br><span class="line">  &#125; catch (e) &#123;</span><br><span class="line">    return &quot;0元&quot;;</span><br><span class="line">  &#125;</span><br><span class="line">  return str;</span><br><span class="line">&#125;</span><br><span class="line">//拆分整数与小数</span><br><span class="line">function splits(tranvalue) &#123;</span><br><span class="line">  var value = new Array(&quot;&quot;, &quot;&quot;);</span><br><span class="line">  temp = tranvalue.split(&quot;.&quot;);</span><br><span class="line">  for (var i = 0; i &lt; temp.length; i++) &#123;</span><br><span class="line">    value = temp;</span><br><span class="line">  &#125;</span><br><span class="line">  return value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验整数是否在取值范围内"><a href="#校验整数是否在取值范围内" class="headerlink" title="校验整数是否在取值范围内"></a>校验整数是否在取值范围内</h3><p>校验规则：<br>minInt为在取值范围中最小的整数<br>maxInt为在取值范围中最大的整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function checkIntRange(value,minInt,maxInt=9007199254740991)&#123;</span><br><span class="line">    return Boolean(isInt(value) &amp;&amp; (Boolean(minInt!=undefined &amp;&amp; minInt!=null)?value&gt;=minInt:true) &amp;&amp; (value&lt;=maxInt));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验是否为中国大陆手机号"><a href="#校验是否为中国大陆手机号" class="headerlink" title="校验是否为中国大陆手机号"></a>校验是否为中国大陆手机号</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isTel(value) &#123;</span><br><span class="line">    return /^1[3,4,5,6,7,8,9][0-9]&#123;9&#125;$/.test(value.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验是否为中国大陆传真或固定电话号码"><a href="#校验是否为中国大陆传真或固定电话号码" class="headerlink" title="校验是否为中国大陆传真或固定电话号码"></a>校验是否为中国大陆传真或固定电话号码</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isFax(str) &#123;</span><br><span class="line">    return /^([0-9]&#123;3,4&#125;)?[0-9]&#123;7,8&#125;$|^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验是否为QQ号码"><a href="#校验是否为QQ号码" class="headerlink" title="校验是否为QQ号码"></a>校验是否为QQ号码</h3><p>校验规则：<br>非0开头的5位-13位整数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isQQ(value) &#123;</span><br><span class="line">    return /^[1-9][0-9]&#123;4,12&#125;$/.test(value.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验是否为中国大陆第二代居民身份证"><a href="#校验是否为中国大陆第二代居民身份证" class="headerlink" title="校验是否为中国大陆第二代居民身份证"></a>校验是否为中国大陆第二代居民身份证</h3><p>校验规则：<br>共18位，最后一位可为X(大小写均可)<br>不能以0开头<br>出生年月日会进行校验：年份只能为18/19/2*开头，月份只能为01-12，日只能为01-31</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function isIDCard(str)&#123;</span><br><span class="line">    return /^[1-9][0-9]&#123;5&#125;(18|19|(2[0-9]))[0-9]&#123;2&#125;((0[1-9])|(10|11|12))(([0-2][1-9])|10|20|30|31)[0-9]&#123;3&#125;[0-9Xx]$/.test(str);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="校验字符的长度是否在规定的范围内"><a href="#校验字符的长度是否在规定的范围内" class="headerlink" title="校验字符的长度是否在规定的范围内"></a>校验字符的长度是否在规定的范围内</h3><p>校验规则：<br>minInt为在取值范围中最小的长度<br>maxInt为在取值范围中最大的长度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function lengthRange(str,minLength,maxLength=9007199254740991) &#123;</span><br><span class="line">    return Boolean(str.length &gt;= minLength &amp;&amp; str.length &lt;= maxLength);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序弹出商品框样式</title>
    <url>/2019/09/23/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%BC%B9%E5%87%BA%E5%95%86%E5%93%81%E6%A1%86%E6%A0%B7%E5%BC%8F/</url>
    <content><![CDATA[<p><img src="/images/1.jpg" alt></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!-- 弹出购买详情 --&gt;</span><br><span class="line"> </span><br><span class="line">&lt;view bindtap=&apos;showModal&apos;&gt;</span><br><span class="line">click me</span><br><span class="line">&lt;/view&gt;</span><br><span class="line"> </span><br><span class="line">&lt;!--屏幕背景变暗的背景  --&gt;</span><br><span class="line">&lt;view class=&quot;commodity_screen&quot; bindtap=&quot;hideModal&quot; wx:if=&quot;&#123;&#123;showModalStatus&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line"> &lt;!--弹出框  --&gt;</span><br><span class="line">&lt;view animation=&quot;&#123;&#123;animationData&#125;&#125;&quot; class=&quot;commodity_attr_box&quot; wx:if=&quot;&#123;&#123;showModalStatus&#125;&#125;&quot;&gt;</span><br><span class="line">   &lt;view class=&apos;commImg&apos;&gt;&lt;image src=&apos;&#123;&#123;imghref&#125;&#125;&#123;&#123;goods_img[0].img&#125;&#125;&apos; mode=&quot;aspectFit&quot;&gt;&lt;/image&gt;&lt;/view&gt;</span><br><span class="line">   &lt;view class=&apos;column&apos;&gt;</span><br><span class="line">      &lt;text class=&quot;sku-price&quot;&gt;￥&#123;&#123;gg_price&#125;&#125;&lt;/text&gt;</span><br><span class="line">      &lt;text class=&quot;sku-title&quot;&gt;&lt;block wx:if=&quot;&#123;&#123;gg_txt==&apos;&apos;&#125;&#125;&quot;&gt;请选择规格&lt;/block&gt;&lt;block wx:else&gt;已选择:&#123;&#123;gg_txt&#125;&#125;ml&lt;/block&gt;&lt;/text&gt;</span><br><span class="line">   &lt;/view&gt;</span><br><span class="line">   &lt;text class=&quot;line&quot;&gt;&lt;/text&gt;</span><br><span class="line">   &lt;view class=&apos;guige&apos;&gt;</span><br><span class="line">      &lt;text class=&quot;gg-title&quot;&gt;规格&lt;/text&gt;</span><br><span class="line">      &lt;view class=&apos;gg&apos;&gt;</span><br><span class="line">        &lt;text  wx:for=&quot;&#123;&#123;guigeList&#125;&#125;&quot; wx:key=&quot;gg&quot; wx:for-item=&quot;item&quot; class=&quot;&#123;&#123;gg_id==item.guige?&apos;active&apos;:&apos;&apos;&#125;&#125;&quot; data-id=&quot;&#123;&#123;item.guige&#125;&#125;&quot;  data-txt=&quot;&#123;&#123;item.guige&#125;&#125;&quot; data-price=&apos;&#123;&#123;item.price&#125;&#125;&apos; bindtap=&quot;filter&quot;&gt;&#123;&#123;item.guige&#125;&#125;ml&lt;/text&gt;</span><br><span class="line">      &lt;/view&gt;</span><br><span class="line">   &lt;/view&gt;</span><br><span class="line">   &lt;text class=&quot;line&quot;&gt;&lt;/text&gt;</span><br><span class="line">   &lt;view class=&quot;row&quot;&gt;</span><br><span class="line">        &lt;text class=&apos;quantity-title&apos;&gt;数量&lt;/text&gt;</span><br><span class="line">        &lt;view class=&quot;quantity-position&quot;&gt;</span><br><span class="line">           &lt;view class=&quot;stepper&quot;&gt;</span><br><span class="line">            &lt;!-- 减号 --&gt;  </span><br><span class="line">            &lt;text class=&quot;&#123;&#123;minusStatus&#125;&#125;&quot; bindtap=&quot;bindMinus&quot;&gt;-&lt;/text&gt;</span><br><span class="line">            &lt;!-- 数值 --&gt;  </span><br><span class="line">            &lt;input type=&quot;number&quot; bindinput=&apos;bindManual&apos; value=&quot;&#123;&#123;num&#125;&#125;&quot; /&gt;</span><br><span class="line">            &lt;!-- 加号 --&gt;  </span><br><span class="line">            &lt;text class=&quot;normal&quot; bindtap=&quot;bindPlus&quot;&gt;+&lt;/text&gt;</span><br><span class="line">            &lt;/view&gt;</span><br><span class="line">        &lt;/view&gt;</span><br><span class="line">   &lt;/view&gt;</span><br><span class="line">   &lt;text class=&quot;line&quot;&gt;&lt;/text&gt;</span><br><span class="line">   &lt;view class=&apos;btn&apos;&gt;</span><br><span class="line">    &lt;button class=&quot;button-add&quot; bindtap=&quot;addCart&quot;&gt;加入购物车&lt;/button&gt;</span><br><span class="line">    &lt;button class=&quot;button-buy&quot;&gt;立即购买&lt;/button&gt;</span><br><span class="line">   &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// pages/demo/alert/alert.js</span><br><span class="line">Page(&#123;</span><br><span class="line">  // 价格变化</span><br><span class="line">  onChange: function (e)&#123;</span><br><span class="line">    // 获取输入框的值</span><br><span class="line">    console.log(e.detail)</span><br><span class="line">    var num=e.detail</span><br><span class="line">    var p=this.data.price</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      price:199*num   </span><br><span class="line">    &#125;)</span><br><span class="line">      return</span><br><span class="line">    console.log()</span><br><span class="line">  &#125;,</span><br><span class="line">  // 型号</span><br><span class="line">  size(e) &#123;</span><br><span class="line">    let index = e.currentTarget.dataset.index</span><br><span class="line">    var bool = this.data.size[index].checked</span><br><span class="line">    var f = this.data.size[index].disabled</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [&apos;size[&apos; + index + &apos;].checked&apos;]: !bool,</span><br><span class="line">      // [&apos;color[11].disabled&apos;]:true</span><br><span class="line">    &#125;)</span><br><span class="line">    // if()&#123;</span><br><span class="line">    //   console.log(123)</span><br><span class="line">    // &#125;</span><br><span class="line">    console.log(index, bool, [&apos;size[&apos; + index + &apos;].checked&apos;], f)</span><br><span class="line">  &#125;,</span><br><span class="line">  // 颜色</span><br><span class="line">  choose(e) &#123;</span><br><span class="line">    let index = e.currentTarget.dataset.index</span><br><span class="line">    var bool = this.data.color[index].checked</span><br><span class="line">    var f = this.data.color[index].disabled</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      [&apos;color[&apos; + index + &apos;].checked&apos;]:!bool,</span><br><span class="line">        // [&apos;color[11].disabled&apos;]:true</span><br><span class="line">    &#125;)</span><br><span class="line">    // if()&#123;</span><br><span class="line">    //   console.log(123)</span><br><span class="line">    // &#125;</span><br><span class="line">    console.log(index, bool, [&apos;color[&apos; + index + &apos;].checked&apos;], f)</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  //点击我显示底部弹出框</span><br><span class="line">  clickme: function () &#123;</span><br><span class="line">    this.showModal();</span><br><span class="line">  &#125;,</span><br><span class="line"> </span><br><span class="line">  //显示对话框</span><br><span class="line">  showModal: function () &#123;</span><br><span class="line">    // 显示遮罩层</span><br><span class="line">    var animation = wx.createAnimation(&#123;</span><br><span class="line">      duration: 200,</span><br><span class="line">      timingFunction: &quot;linear&quot;,</span><br><span class="line">      delay: 0</span><br><span class="line">    &#125;)</span><br><span class="line">    this.animation = animation</span><br><span class="line">    animation.translateY(300).step()</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      animationData: animation.export(),</span><br><span class="line">      showModalStatus: true</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      animation.translateY(0).step()</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        animationData: animation.export()</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;.bind(this), 200)</span><br><span class="line">  &#125;,</span><br><span class="line">  //隐藏对话框</span><br><span class="line">  hideModal: function () &#123;</span><br><span class="line">    // 隐藏遮罩层</span><br><span class="line">    var animation = wx.createAnimation(&#123;</span><br><span class="line">      duration: 200,</span><br><span class="line">      timingFunction: &quot;linear&quot;,</span><br><span class="line">      delay: 0</span><br><span class="line">    &#125;)</span><br><span class="line">    this.animation = animation</span><br><span class="line">    animation.translateY(300).step()</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      animationData: animation.export(),</span><br><span class="line">    &#125;)</span><br><span class="line">    setTimeout(function () &#123;</span><br><span class="line">      animation.translateY(0).step()</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        animationData: animation.export(),</span><br><span class="line">        showModalStatus: false</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;.bind(this), 200)</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 页面的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    // 价格</span><br><span class="line">    price:199,</span><br><span class="line">    // 型号</span><br><span class="line">    size:[</span><br><span class="line">      &#123;</span><br><span class="line">        size:&quot;sm&quot;,</span><br><span class="line">        disabled:false,</span><br><span class="line">        checked:false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        size:&quot;s&quot;,</span><br><span class="line">        disabled: false,</span><br><span class="line">        checked: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        size:&quot;s&quot;,</span><br><span class="line">        disabled: false,</span><br><span class="line">        checked: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        size:&quot;l&quot;,</span><br><span class="line">        disabled: false,</span><br><span class="line">        checked: false</span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        size: &quot;xl&quot;,</span><br><span class="line">        disabled: true,</span><br><span class="line">        checked: false</span><br><span class="line">      &#125;,</span><br><span class="line">    ],</span><br><span class="line">    // 颜色</span><br><span class="line">      color:[</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;红色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;黄色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;白色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;绿色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;绿色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;紫色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;灰色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;橘色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;彩色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;紫色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;紫色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:false  </span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          color:&quot;紫色&quot;,</span><br><span class="line">          checked:false,</span><br><span class="line">          disabled:true </span><br><span class="line">        &#125;,</span><br><span class="line">      ]</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* 弹出框 */</span><br><span class="line"> </span><br><span class="line">.commodity_screen &#123;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 100%;</span><br><span class="line">  position: fixed;</span><br><span class="line">  top: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  background: #000;</span><br><span class="line">  opacity: 0.2;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  z-index: 1000;</span><br><span class="line">  color: #fff;</span><br><span class="line">&#125;</span><br><span class="line">/*对话框 */</span><br><span class="line">.commodity_attr_box &#123;</span><br><span class="line">  height: 920rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  z-index: 2000;</span><br><span class="line">  background: #fff;</span><br><span class="line">  padding-top: 29rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 商品图片 */</span><br><span class="line">.product&#123;</span><br><span class="line">  margin-left:30rpx;</span><br><span class="line">&#125;</span><br><span class="line">.product-img&#123;</span><br><span class="line">  width:200rpx;</span><br><span class="line">height:200rpx;</span><br><span class="line">border-radius:10rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 价格 */</span><br><span class="line">.cart-price&#123;</span><br><span class="line">  margin-top:116rpx;</span><br><span class="line">  margin-left:20rpx;</span><br><span class="line">&#125;</span><br><span class="line">.cart-price :first-child&#123;</span><br><span class="line">  font-size:34rpx;</span><br><span class="line">font-family:PingFang SC;</span><br><span class="line">font-weight:500;</span><br><span class="line">color:rgba(245,121,0,1);</span><br><span class="line">&#125;</span><br><span class="line">.cart-price :last-child&#123;</span><br><span class="line">  font-size:24rpx;</span><br><span class="line">font-family:PingFang SC;</span><br><span class="line">font-weight:400;</span><br><span class="line">color:rgba(153,153,153,1);</span><br><span class="line">&#125;</span><br><span class="line">/* 颜色 */</span><br><span class="line">.color&#123;</span><br><span class="line">  margin-top:60rpx;</span><br><span class="line">&#125;</span><br><span class="line">.color :first-child&#123;</span><br><span class="line">  font-size:28rpx;</span><br><span class="line">font-family:PingFang SC;</span><br><span class="line">font-weight:400;</span><br><span class="line">color:rgba(51,51,51,1);</span><br><span class="line">&#125;</span><br><span class="line">/* 颜色选择 */</span><br><span class="line">.color-btn&#123;</span><br><span class="line">  width:722rpx;flex-wrap:wrap;</span><br><span class="line">  margin-left:19rpx;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">/* 未选中状态 */</span><br><span class="line">.btns&#123;</span><br><span class="line">  /* width:100rpx; */</span><br><span class="line">height:50rpx;</span><br><span class="line">background:rgba(242,242,242,1);</span><br><span class="line">border-radius:10rpx;</span><br><span class="line">text-align: center;</span><br><span class="line">line-height:50rpx;</span><br><span class="line">font-size:28rpx;</span><br><span class="line">font-family:PingFang SC;</span><br><span class="line">font-weight:400;</span><br><span class="line">color:rgba(51,51,51,1);</span><br><span class="line">margin-right:8rpx;margin-top:20rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 选中状态 */</span><br><span class="line">.btnsactives&#123;</span><br><span class="line">  /* width:100rpx!important; */</span><br><span class="line">height:50rpx!important;</span><br><span class="line">background:rgba(118,212,198,1)!important;</span><br><span class="line">border-radius:10rpx!important;</span><br><span class="line">font-size:28rpx!important;</span><br><span class="line">font-family:PingFang SC!important;</span><br><span class="line">font-weight:400!important;</span><br><span class="line">color:rgba(255,255,255,1)!important;</span><br><span class="line">text-align: center!important;</span><br><span class="line">line-height:50rpx!important;</span><br><span class="line">margin-right:8rpx;margin-top:20rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 型号 */</span><br><span class="line">.size&#123;</span><br><span class="line">  margin-top:40rpx;</span><br><span class="line">&#125;</span><br><span class="line">.size :first-child&#123;</span><br><span class="line">  font-size:28rpx;</span><br><span class="line">font-family:PingFang SC;</span><br><span class="line">font-weight:400;</span><br><span class="line">color:rgba(51,51,51,1);</span><br><span class="line">margin-left:30rpx;</span><br><span class="line">&#125;</span><br><span class="line">.size-btn&#123;</span><br><span class="line">  width:497rpx;</span><br><span class="line">&#125;</span><br><span class="line">/* 未选中状态 */</span><br><span class="line">.sizes&#123;</span><br><span class="line">  /* width:50rpx; */</span><br><span class="line">height:50rpx!important;</span><br><span class="line">background:rgba(242,242,242,1)!important;</span><br><span class="line">border-radius:10rpx!important;</span><br><span class="line">text-align: center!important;</span><br><span class="line">line-height: 50rpx!important;</span><br><span class="line">font-size:28rpx!important;</span><br><span class="line">font-family:PingFang SC!important;</span><br><span class="line">font-weight:400!important;</span><br><span class="line">color:rgba(51,51,51,1)!important;</span><br><span class="line">margin-top:20rpx;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br><span class="line">.sizesactives&#123;</span><br><span class="line">  /* width:50rpx; */</span><br><span class="line">height:50rpx!important;</span><br><span class="line">background:rgba(118,212,198,1)!important;</span><br><span class="line">border-radius:10rpx!important;</span><br><span class="line">text-align: center!important;</span><br><span class="line">line-height: 50rpx!important;</span><br><span class="line">font-size:28rpx!important;</span><br><span class="line">font-family:PingFang SC!important;</span><br><span class="line">font-weight:400!important;</span><br><span class="line">color:rgba(255,255,255,1)!important;</span><br><span class="line">margin-top:20rpx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>微信从下而上弹框</tag>
      </tags>
  </entry>
  <entry>
    <title>60个前端常用工具方法</title>
    <url>/2020/06/22/60%E4%B8%AA%E5%89%8D%E7%AB%AF%E5%B8%B8%E7%94%A8%E5%B7%A5%E5%85%B7%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<p>60个前端常用工具方法<br>1.邮箱验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isEmail = (s) =&gt; &#123;</span><br><span class="line">    return /^([a-zA-Z0-9_-])+@([a-zA-Z0-9_-])+((.[a-zA-Z0-9_-]&#123;2,3&#125;)&#123;1,2&#125;)$/.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.手机号码验证</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isMobile = (s) =&gt; &#123;</span><br><span class="line">    return /^1[0-9]&#123;10&#125;$/.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>3.电话号码验证(座机)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isPhone = (s) =&gt; &#123;</span><br><span class="line">    return /^([0-9]&#123;3,4&#125;-)?[0-9]&#123;7,8&#125;$/.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>4.是否为url地址</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isURL = (s) =&gt; &#123;</span><br><span class="line">    return /^http[s]?:\/\/.*/.test(s)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>5.是否是字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isString = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;String&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.是否为数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isNumber = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Number&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>7.是否为boolean</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isBoolean = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Boolean&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>8.是否为函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isFunction = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Function&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>9.是否为null</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isNull = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Null&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>10.是否为undefined</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isUndefined = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Undefined&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>11.是否为对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isObj = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Object&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>12.是否为数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isArray = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Array&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>13.是否为时间格式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isDate = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Date&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>14.是否为正则表达式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isRegExp = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;RegExp&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>15.是否为错误的对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isError = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Error&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>16.是否Symbol函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isSymbol = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Symbol&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>17.是否Promise对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isPromise = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Promise&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>18.是否Set对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isSet = (o) =&gt; &#123;</span><br><span class="line">    return Object.prototype.toString.call(o).slice(8, -1) === &apos;Set&apos;</span><br><span class="line">&#125;</span><br><span class="line">export const ua = navigator.userAgent.toLowerCase();</span><br></pre></td></tr></table></figure>

<p>19.是否是微信浏览器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isWeiXin = () =&gt; &#123;</span><br><span class="line">    return ua.match(/microMessenger/i) == &apos;micromessenger&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>20.是否是移动端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isDeviceMobile = () =&gt; &#123;</span><br><span class="line">    return /android|webos|iphone|ipod|balckberry/i.test(ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>21.是否是QQ浏览器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isQQBrowser = () =&gt; &#123;</span><br><span class="line">    return !!ua.match(/mqqbrowser|qzone|qqbrowser|qbwebviewtype/i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>22.是否是爬虫</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isSpider = () =&gt; &#123;</span><br><span class="line">    return /adsbot|googlebot|bingbot|msnbot|yandexbot|baidubot|robot|careerbot|seznambot|bot|baiduspider|jikespider|symantecspider|scannerlwebcrawler|crawler|360spider|sosospider|sogou web sprider|sogou orion spider/.test(ua)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>23.是否ios</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isIos = () =&gt; &#123;</span><br><span class="line">    var u = navigator.userAgent;</span><br><span class="line">    if (u.indexOf(&apos;Android&apos;) &gt; -1 || u.indexOf(&apos;Linux&apos;) &gt; -1) &#123;  //安卓手机</span><br><span class="line">        return false</span><br><span class="line">    &#125; else if (u.indexOf(&apos;iPhone&apos;) &gt; -1) &#123;//苹果手机</span><br><span class="line">        return true</span><br><span class="line">    &#125; else if (u.indexOf(&apos;iPad&apos;) &gt; -1) &#123;//iPad</span><br><span class="line">        return false</span><br><span class="line">    &#125; else if (u.indexOf(&apos;Windows Phone&apos;) &gt; -1) &#123;//winphone手机</span><br><span class="line">        return false</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>24.是否为PC端</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isPC = () =&gt; &#123;</span><br><span class="line">    var userAgentInfo = navigator.userAgent;</span><br><span class="line">    var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,</span><br><span class="line">        &quot;SymbianOS&quot;, &quot;Windows Phone&quot;,</span><br><span class="line">        &quot;iPad&quot;, &quot;iPod&quot;];</span><br><span class="line">    var flag = true;</span><br><span class="line">    for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class="line">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class="line">            flag = false;</span><br><span class="line">            break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>25.去除html标签</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const removeHtmltag = (str) =&gt; &#123;</span><br><span class="line">    return str.replace(/&lt;[^&gt;]+&gt;/g, &apos;&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>26.获取url参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const getQueryString = (name) =&gt; &#123;</span><br><span class="line">    const reg = new RegExp(&apos;(^|&amp;)&apos; + name + &apos;=([^&amp;]*)(&amp;|$)&apos;, &apos;i&apos;);</span><br><span class="line">    const search = window.location.search.split(&apos;?&apos;)[1] || &apos;&apos;;</span><br><span class="line">    const r = search.match(reg) || [];</span><br><span class="line">    return r[2];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>27.动态引入js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const injectScript = (src) =&gt; &#123;</span><br><span class="line">    const s = document.createElement(&apos;script&apos;);</span><br><span class="line">    s.type = &apos;text/javascript&apos;;</span><br><span class="line">    s.async = true;</span><br><span class="line">    s.src = src;</span><br><span class="line">    const t = document.getElementsByTagName(&apos;script&apos;)[0];</span><br><span class="line">    t.parentNode.insertBefore(s, t);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>28.根据url地址下载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const download = (url) =&gt; &#123;</span><br><span class="line">    var isChrome = navigator.userAgent.toLowerCase().indexOf(&apos;chrome&apos;) &gt; -1;</span><br><span class="line">    var isSafari = navigator.userAgent.toLowerCase().indexOf(&apos;safari&apos;) &gt; -1;</span><br><span class="line">    if (isChrome || isSafari) &#123;</span><br><span class="line">        var link = document.createElement(&apos;a&apos;);</span><br><span class="line">        link.href = url;</span><br><span class="line">        if (link.download !== undefined) &#123;</span><br><span class="line">            var fileName = url.substring(url.lastIndexOf(&apos;/&apos;) + 1, url.length);</span><br><span class="line">            link.download = fileName;</span><br><span class="line">        &#125;</span><br><span class="line">        if (document.createEvent) &#123;</span><br><span class="line">            var e = document.createEvent(&apos;MouseEvents&apos;);</span><br><span class="line">            e.initEvent(&apos;click&apos;, true, true);</span><br><span class="line">            link.dispatchEvent(e);</span><br><span class="line">            return true;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (url.indexOf(&apos;?&apos;) === -1) &#123;</span><br><span class="line">        url += &apos;?download&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">    window.open(url, &apos;_self&apos;);</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>29.el是否包含某个class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const hasClass = (el, className) =&gt; &#123;</span><br><span class="line">    let reg = new RegExp(&apos;(^|\\s)&apos; + className + &apos;(\\s|$)&apos;)</span><br><span class="line">    return reg.test(el.className)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>30.el添加某个class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const addClass = (el, className) =&gt; &#123;</span><br><span class="line">    if (hasClass(el, className)) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    let newClass = el.className.split(&apos; &apos;)</span><br><span class="line">    newClass.push(className)</span><br><span class="line">    el.className = newClass.join(&apos; &apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>31.el去除某个class</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const removeClass = (el, className) =&gt; &#123;</span><br><span class="line">    if (!hasClass(el, className)) &#123;</span><br><span class="line">        return</span><br><span class="line">    &#125;</span><br><span class="line">    let reg = new RegExp(&apos;(^|\\s)&apos; + className + &apos;(\\s|$)&apos;, &apos;g&apos;)</span><br><span class="line">    el.className = el.className.replace(reg, &apos; &apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>32.获取滚动的坐标</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const getScrollPosition = (el = window) =&gt; (&#123;</span><br><span class="line">    x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,</span><br><span class="line">    y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>33.滚动到顶部</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const scrollToTop = () =&gt; &#123;</span><br><span class="line">    const c = document.documentElement.scrollTop || document.body.scrollTop;</span><br><span class="line">    if (c &gt; 0) &#123;</span><br><span class="line">        window.requestAnimationFrame(scrollToTop);</span><br><span class="line">        window.scrollTo(0, c - c / 8);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>34.el是否在视口范围内</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const elementIsVisibleInViewport = (el, partiallyVisible = false) =&gt; &#123;</span><br><span class="line">    const &#123; top, left, bottom, right &#125; = el.getBoundingClientRect();</span><br><span class="line">    const &#123; innerHeight, innerWidth &#125; = window;</span><br><span class="line">    return partiallyVisible</span><br><span class="line">        ? ((top &gt; 0 &amp;&amp; top &lt; innerHeight) || (bottom &gt; 0 &amp;&amp; bottom &lt; innerHeight)) &amp;&amp;</span><br><span class="line">        ((left &gt; 0 &amp;&amp; left &lt; innerWidth) || (right &gt; 0 &amp;&amp; right &lt; innerWidth))</span><br><span class="line">        : top &gt;= 0 &amp;&amp; left &gt;= 0 &amp;&amp; bottom &lt;= innerHeight &amp;&amp; right &lt;= innerWidth;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>35.洗牌算法随机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const shuffle = (arr) =&gt; &#123;</span><br><span class="line">    var result = [],</span><br><span class="line">        random;</span><br><span class="line">    while (arr.length &gt; 0) &#123;</span><br><span class="line">        random = Math.floor(Math.random() * arr.length);</span><br><span class="line">        result.push(arr[random])</span><br><span class="line">        arr.splice(random, 1)</span><br><span class="line">    &#125;</span><br><span class="line">    return result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>36.拦截粘贴板</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const copyTextToClipboard = (value) =&gt; &#123;</span><br><span class="line">    var textArea = document.createElement(&quot;textarea&quot;);</span><br><span class="line">    textArea.style.background = &apos;transparent&apos;;</span><br><span class="line">    textArea.value = value;</span><br><span class="line">    document.body.appendChild(textArea);</span><br><span class="line">    textArea.select();</span><br><span class="line">    try &#123;</span><br><span class="line">        var successful = document.execCommand(&apos;copy&apos;);</span><br><span class="line">    &#125; catch (err) &#123;</span><br><span class="line">        console.log(&apos;Oops, unable to copy&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">    document.body.removeChild(textArea);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>37.判断类型集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const checkStr = (str, type) =&gt; &#123;</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case &apos;phone&apos;:   //手机号码</span><br><span class="line">            return /^1[3|4|5|6|7|8|9][0-9]&#123;9&#125;$/.test(str);</span><br><span class="line">        case &apos;tel&apos;:     //座机</span><br><span class="line">            return /^(0\d&#123;2,3&#125;-\d&#123;7,8&#125;)(-\d&#123;1,4&#125;)?$/.test(str);</span><br><span class="line">        case &apos;card&apos;:    //身份证</span><br><span class="line">            return /(^\d&#123;15&#125;$)|(^\d&#123;18&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.test(str);</span><br><span class="line">        case &apos;pwd&apos;:     //密码以字母开头，长度在6~18之间，只能包含字母、数字和下划线</span><br><span class="line">            return /^[a-zA-Z]\w&#123;5,17&#125;$/.test(str)</span><br><span class="line">        case &apos;postal&apos;:  //邮政编码</span><br><span class="line">            return /[1-9]\d&#123;5&#125;(?!\d)/.test(str);</span><br><span class="line">        case &apos;QQ&apos;:      //QQ号</span><br><span class="line">            return /^[1-9][0-9]&#123;4,9&#125;$/.test(str);</span><br><span class="line">        case &apos;email&apos;:   //邮箱</span><br><span class="line">            return /^[\w-]+(\.[\w-]+)*@[\w-]+(\.[\w-]+)+$/.test(str);</span><br><span class="line">        case &apos;money&apos;:   //金额(小数点2位)</span><br><span class="line">            return /^\d*(?:\.\d&#123;0,2&#125;)?$/.test(str);</span><br><span class="line">        case &apos;URL&apos;:     //网址</span><br><span class="line">            return /(http|ftp|https):\/\/[\w\-_]+(\.[\w\-_]+)+([\w\-\.,@?^=%&amp;:/~\+#]*[\w\-\@?^=%&amp;/~\+#])?/.test(str)</span><br><span class="line">        case &apos;IP&apos;:      //IP</span><br><span class="line">            return /((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))/.test(str);</span><br><span class="line">        case &apos;date&apos;:    //日期时间</span><br><span class="line">            return /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;) (\d&#123;2&#125;)(?:\:\d&#123;2&#125;|:(\d&#123;2&#125;):(\d&#123;2&#125;))$/.test(str) || /^(\d&#123;4&#125;)\-(\d&#123;2&#125;)\-(\d&#123;2&#125;)$/.test(str)</span><br><span class="line">        case &apos;number&apos;:  //数字</span><br><span class="line">            return /^[0-9]$/.test(str);</span><br><span class="line">        case &apos;english&apos;: //英文</span><br><span class="line">            return /^[a-zA-Z]+$/.test(str);</span><br><span class="line">        case &apos;chinese&apos;: //中文</span><br><span class="line">            return /^[\\u4E00-\\u9FA5]+$/.test(str);</span><br><span class="line">        case &apos;lower&apos;:   //小写</span><br><span class="line">            return /^[a-z]+$/.test(str);</span><br><span class="line">        case &apos;upper&apos;:   //大写</span><br><span class="line">            return /^[A-Z]+$/.test(str);</span><br><span class="line">        case &apos;HTML&apos;:    //HTML标记</span><br><span class="line">            return /&lt;(&quot;[^&quot;]*&quot;|&apos;[^&apos;]*&apos;|[^&apos;&quot;&gt;])*&gt;/.test(str);</span><br><span class="line">        default:</span><br><span class="line">            return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>38.严格的身份证校验</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isCardID = (sId) =&gt; &#123;</span><br><span class="line">    if (!/(^\d&#123;15&#125;$)|(^\d&#123;17&#125;(\d|X|x)$)/.test(sId)) &#123;</span><br><span class="line">        console.log(&apos;你输入的身份证长度或格式错误&apos;)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line">    //身份证城市</span><br><span class="line">    var aCity = &#123; 11: &quot;北京&quot;, 12: &quot;天津&quot;, 13: &quot;河北&quot;, 14: &quot;山西&quot;, 15: &quot;内蒙古&quot;, 21: &quot;辽宁&quot;, 22: &quot;吉林&quot;, 23: &quot;黑龙江&quot;, 31: &quot;上海&quot;, 32: &quot;江苏&quot;, 33: &quot;浙江&quot;, 34: &quot;安徽&quot;, 35: &quot;福建&quot;, 36: &quot;江西&quot;, 37: &quot;山东&quot;, 41: &quot;河南&quot;, 42: &quot;湖北&quot;, 43: &quot;湖南&quot;, 44: &quot;广东&quot;, 45: &quot;广西&quot;, 46: &quot;海南&quot;, 50: &quot;重庆&quot;, 51: &quot;四川&quot;, 52: &quot;贵州&quot;, 53: &quot;云南&quot;, 54: &quot;西藏&quot;, 61: &quot;陕西&quot;, 62: &quot;甘肃&quot;, 63: &quot;青海&quot;, 64: &quot;宁夏&quot;, 65: &quot;新疆&quot;, 71: &quot;台湾&quot;, 81: &quot;香港&quot;, 82: &quot;澳门&quot;, 91: &quot;国外&quot; &#125;;</span><br><span class="line">    if (!aCity[parseInt(sId.substr(0, 2))]) &#123;</span><br><span class="line">        console.log(&apos;你的身份证地区非法&apos;)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 出生日期验证</span><br><span class="line">    var sBirthday = (sId.substr(6, 4) + &quot;-&quot; + Number(sId.substr(10, 2)) + &quot;-&quot; + Number(sId.substr(12, 2))).replace(/-/g, &quot;/&quot;),</span><br><span class="line">        d = new Date(sBirthday)</span><br><span class="line">    if (sBirthday != (d.getFullYear() + &quot;/&quot; + (d.getMonth() + 1) + &quot;/&quot; + d.getDate())) &#123;</span><br><span class="line">        console.log(&apos;身份证上的出生日期非法&apos;)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 身份证号码校验</span><br><span class="line">    var sum = 0,</span><br><span class="line">        weights = [7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2],</span><br><span class="line">        codes = &quot;10X98765432&quot;</span><br><span class="line">    for (var i = 0; i &lt; sId.length - 1; i++) &#123;</span><br><span class="line">        sum += sId[i] * weights[i];</span><br><span class="line">    &#125;</span><br><span class="line">    var last = codes[sum % 11]; //计算出来的最后一位身份证号码</span><br><span class="line">    if (sId[sId.length - 1] != last) &#123;</span><br><span class="line">        console.log(&apos;你输入的身份证号非法&apos;)</span><br><span class="line">        return false</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return true</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>39.随机数范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const random = (min, max) =&gt; &#123;</span><br><span class="line">    if (arguments.length === 2) &#123;</span><br><span class="line">        return Math.floor(min + Math.random() * ((max + 1) - min))</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        return null;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>40.将阿拉伯数字翻译成中文的大写数字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const numberToChinese = (num) =&gt; &#123;</span><br><span class="line">    var AA = new Array(&quot;零&quot;, &quot;一&quot;, &quot;二&quot;, &quot;三&quot;, &quot;四&quot;, &quot;五&quot;, &quot;六&quot;, &quot;七&quot;, &quot;八&quot;, &quot;九&quot;, &quot;十&quot;);</span><br><span class="line">    var BB = new Array(&quot;&quot;, &quot;十&quot;, &quot;百&quot;, &quot;仟&quot;, &quot;萬&quot;, &quot;億&quot;, &quot;点&quot;, &quot;&quot;);</span><br><span class="line">    var a = (&quot;&quot; + num).replace(/(^0*)/g, &quot;&quot;).split(&quot;.&quot;),</span><br><span class="line">        k = 0,</span><br><span class="line">        re = &quot;&quot;;</span><br><span class="line">    for (var i = a[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        switch (k) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                re = BB[7] + re;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                if (!new RegExp(&quot;0&#123;4&#125;//d&#123;&quot; + (a[0].length - i - 1) + &quot;&#125;$&quot;)</span><br><span class="line">                    .test(a[0]))</span><br><span class="line">                    re = BB[4] + re;</span><br><span class="line">                break;</span><br><span class="line">            case 8:</span><br><span class="line">                re = BB[5] + re;</span><br><span class="line">                BB[7] = BB[5];</span><br><span class="line">                k = 0;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        if (k % 4 == 2 &amp;&amp; a[0].charAt(i + 2) != 0 &amp;&amp; a[0].charAt(i + 1) == 0)</span><br><span class="line">            re = AA[0] + re;</span><br><span class="line">        if (a[0].charAt(i) != 0)</span><br><span class="line">            re = AA[a[0].charAt(i)] + BB[k % 4] + re;</span><br><span class="line">        k++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    if (a.length &gt; 1) // 加上小数部分(如果有小数部分)</span><br><span class="line">    &#123;</span><br><span class="line">        re += BB[6];</span><br><span class="line">        for (var i = 0; i &lt; a[1].length; i++)</span><br><span class="line">            re += AA[a[1].charAt(i)];</span><br><span class="line">    &#125;</span><br><span class="line">    if (re == &apos;一十&apos;)</span><br><span class="line">        re = &quot;十&quot;;</span><br><span class="line">    if (re.match(/^一/) &amp;&amp; re.length == 3)</span><br><span class="line">        re = re.replace(&quot;一&quot;, &quot;&quot;);</span><br><span class="line">    return re;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>41.将数字转换为大写金额</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const changeToChinese = (Num) =&gt; &#123;</span><br><span class="line">    //判断如果传递进来的不是字符的话转换为字符</span><br><span class="line">    if (typeof Num == &quot;number&quot;) &#123;</span><br><span class="line">        Num = new String(Num);</span><br><span class="line">    &#125;;</span><br><span class="line">    Num = Num.replace(/,/g, &quot;&quot;) //替换tomoney()中的“,”</span><br><span class="line">    Num = Num.replace(/ /g, &quot;&quot;) //替换tomoney()中的空格</span><br><span class="line">    Num = Num.replace(/￥/g, &quot;&quot;) //替换掉可能出现的￥字符</span><br><span class="line">    if (isNaN(Num)) &#123; //验证输入的字符是否为数字</span><br><span class="line">        //alert(&quot;请检查小写金额是否正确&quot;);</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;;</span><br><span class="line">    //字符处理完毕后开始转换，采用前后两部分分别转换</span><br><span class="line">    var part = String(Num).split(&quot;.&quot;);</span><br><span class="line">    var newchar = &quot;&quot;;</span><br><span class="line">    //小数点前进行转化</span><br><span class="line">    for (var i = part[0].length - 1; i &gt;= 0; i--) &#123;</span><br><span class="line">        if (part[0].length &gt; 10) &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">            //若数量超过拾亿单位，提示</span><br><span class="line">        &#125;</span><br><span class="line">        var tmpnewchar = &quot;&quot;</span><br><span class="line">        var perchar = part[0].charAt(i);</span><br><span class="line">        switch (perchar) &#123;</span><br><span class="line">            case &quot;0&quot;:</span><br><span class="line">                tmpnewchar = &quot;零&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;1&quot;:</span><br><span class="line">                tmpnewchar = &quot;壹&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;2&quot;:</span><br><span class="line">                tmpnewchar = &quot;贰&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;3&quot;:</span><br><span class="line">                tmpnewchar = &quot;叁&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;4&quot;:</span><br><span class="line">                tmpnewchar = &quot;肆&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;5&quot;:</span><br><span class="line">                tmpnewchar = &quot;伍&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;6&quot;:</span><br><span class="line">                tmpnewchar = &quot;陆&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;7&quot;:</span><br><span class="line">                tmpnewchar = &quot;柒&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;8&quot;:</span><br><span class="line">                tmpnewchar = &quot;捌&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">            case &quot;9&quot;:</span><br><span class="line">                tmpnewchar = &quot;玖&quot; + tmpnewchar;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        switch (part[0].length - i - 1) &#123;</span><br><span class="line">            case 0:</span><br><span class="line">                tmpnewchar = tmpnewchar + &quot;元&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 1:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;拾&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;佰&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;仟&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 4:</span><br><span class="line">                tmpnewchar = tmpnewchar + &quot;万&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 5:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;拾&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 6:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;佰&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 7:</span><br><span class="line">                if (perchar != 0) tmpnewchar = tmpnewchar + &quot;仟&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 8:</span><br><span class="line">                tmpnewchar = tmpnewchar + &quot;亿&quot;;</span><br><span class="line">                break;</span><br><span class="line">            case 9:</span><br><span class="line">                tmpnewchar = tmpnewchar + &quot;拾&quot;;</span><br><span class="line">                break;</span><br><span class="line">        &#125;</span><br><span class="line">        var newchar = tmpnewchar + newchar;</span><br><span class="line">    &#125;</span><br><span class="line">    //小数点之后进行转化</span><br><span class="line">    if (Num.indexOf(&quot;.&quot;) != -1) &#123;</span><br><span class="line">        if (part[1].length &gt; 2) &#123;</span><br><span class="line">            // alert(&quot;小数点之后只能保留两位,系统将自动截断&quot;);</span><br><span class="line">            part[1] = part[1].substr(0, 2)</span><br><span class="line">        &#125;</span><br><span class="line">        for (i = 0; i &lt; part[1].length; i++) &#123;</span><br><span class="line">            tmpnewchar = &quot;&quot;</span><br><span class="line">            perchar = part[1].charAt(i)</span><br><span class="line">            switch (perchar) &#123;</span><br><span class="line">                case &quot;0&quot;:</span><br><span class="line">                    tmpnewchar = &quot;零&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;1&quot;:</span><br><span class="line">                    tmpnewchar = &quot;壹&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;2&quot;:</span><br><span class="line">                    tmpnewchar = &quot;贰&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;3&quot;:</span><br><span class="line">                    tmpnewchar = &quot;叁&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;4&quot;:</span><br><span class="line">                    tmpnewchar = &quot;肆&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;5&quot;:</span><br><span class="line">                    tmpnewchar = &quot;伍&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;6&quot;:</span><br><span class="line">                    tmpnewchar = &quot;陆&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;7&quot;:</span><br><span class="line">                    tmpnewchar = &quot;柒&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;8&quot;:</span><br><span class="line">                    tmpnewchar = &quot;捌&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">                case &quot;9&quot;:</span><br><span class="line">                    tmpnewchar = &quot;玖&quot; + tmpnewchar;</span><br><span class="line">                    break;</span><br><span class="line">            &#125;</span><br><span class="line">            if (i == 0) tmpnewchar = tmpnewchar + &quot;角&quot;;</span><br><span class="line">            if (i == 1) tmpnewchar = tmpnewchar + &quot;分&quot;;</span><br><span class="line">            newchar = newchar + tmpnewchar;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //替换所有无用汉字</span><br><span class="line">    while (newchar.search(&quot;零零&quot;) != -1)</span><br><span class="line">        newchar = newchar.replace(&quot;零零&quot;, &quot;零&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;零亿&quot;, &quot;亿&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;亿万&quot;, &quot;亿&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;零万&quot;, &quot;万&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;零元&quot;, &quot;元&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;零角&quot;, &quot;&quot;);</span><br><span class="line">    newchar = newchar.replace(&quot;零分&quot;, &quot;&quot;);</span><br><span class="line">    if (newchar.charAt(newchar.length - 1) == &quot;元&quot;) &#123;</span><br><span class="line">        newchar = newchar + &quot;整&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    return newchar;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>42.判断一个元素是否在数组中</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const contains = (arr, val) =&gt; &#123;</span><br><span class="line">    return arr.indexOf(val) != -1 ? true : false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>43.数组排序，{type} 1：从小到大 2：从大到小 3：随机</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const sort = (arr, type = 1) =&gt; &#123;</span><br><span class="line">    return arr.sort((a, b) =&gt; &#123;</span><br><span class="line">        switch (type) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                return a - b;</span><br><span class="line">            case 2:</span><br><span class="line">                return b - a;</span><br><span class="line">            case 3:</span><br><span class="line">                return Math.random() - 0.5;</span><br><span class="line">            default:</span><br><span class="line">                return arr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>44.去重</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const unique = (arr) =&gt; &#123;</span><br><span class="line">    if (Array.hasOwnProperty(&apos;from&apos;)) &#123;</span><br><span class="line">        return Array.from(new Set(arr));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        var n = &#123;&#125;, r = [];</span><br><span class="line">        for (var i = 0; i &lt; arr.length; i++) &#123;</span><br><span class="line">            if (!n[arr[i]]) &#123;</span><br><span class="line">                n[arr[i]] = true;</span><br><span class="line">                r.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>45.求两个集合的并集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const union = (a, b) =&gt; &#123;</span><br><span class="line">    var newArr = a.concat(b);</span><br><span class="line">    return this.unique(newArr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>46.求两个集合的交集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const intersect = (a, b) =&gt; &#123;</span><br><span class="line">    var _this = this;</span><br><span class="line">    a = this.unique(a);</span><br><span class="line">    return this.map(a, function (o) &#123;</span><br><span class="line">        return _this.contains(b, o) ? o : null;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>47.删除其中一个元素</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const remove = (arr, ele) =&gt; &#123;</span><br><span class="line">    var index = arr.indexOf(ele);</span><br><span class="line">    if (index &gt; -1) &#123;</span><br><span class="line">        arr.splice(index, 1);</span><br><span class="line">    &#125;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>48.将类数组转换为数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const formArray = (ary) =&gt; &#123;</span><br><span class="line">    var arr = [];</span><br><span class="line">    if (Array.isArray(ary)) &#123;</span><br><span class="line">        arr = ary;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        arr = Array.prototype.slice.call(ary);</span><br><span class="line">    &#125;;</span><br><span class="line">    return arr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>49.最大值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const max = (arr) =&gt; &#123;</span><br><span class="line">    return Math.max.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>50.最小值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const min = (arr) =&gt; &#123;</span><br><span class="line">    return Math.min.apply(null, arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>51.求和</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const sum = (arr) =&gt; &#123;</span><br><span class="line">    return arr.reduce((pre, cur) =&gt; &#123;</span><br><span class="line">        return pre + cur</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>52.平均值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const average = (arr) =&gt; &#123;</span><br><span class="line">    return this.sum(arr) / arr.length</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>53.去除空格,type: 1-所有空格 2-前后空格 3-前空格 4-后空格</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const trim = (str, type) =&gt; &#123;</span><br><span class="line">    type = type || 1</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            return str.replace(/\s+/g, &quot;&quot;);</span><br><span class="line">        case 2:</span><br><span class="line">            return str.replace(/(^\s*)|(\s*$)/g, &quot;&quot;);</span><br><span class="line">        case 3:</span><br><span class="line">            return str.replace(/(^\s*)/g, &quot;&quot;);</span><br><span class="line">        case 4:</span><br><span class="line">            return str.replace(/(\s*$)/g, &quot;&quot;);</span><br><span class="line">        default:</span><br><span class="line">            return str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>54.字符转换，type: 1:首字母大写 2：首字母小写 3：大小写转换 4：全部大写 5：全部小写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const changeCase = (str, type) =&gt; &#123;</span><br><span class="line">    type = type || 4</span><br><span class="line">    switch (type) &#123;</span><br><span class="line">        case 1:</span><br><span class="line">            return str.replace(/\b\w+\b/g, function (word) &#123;</span><br><span class="line">                return word.substring(0, 1).toUpperCase() + word.substring(1).toLowerCase();</span><br><span class="line"></span><br><span class="line">            &#125;);</span><br><span class="line">        case 2:</span><br><span class="line">            return str.replace(/\b\w+\b/g, function (word) &#123;</span><br><span class="line">                return word.substring(0, 1).toLowerCase() + word.substring(1).toUpperCase();</span><br><span class="line">            &#125;);</span><br><span class="line">        case 3:</span><br><span class="line">            return str.split(&apos;&apos;).map(function (word) &#123;</span><br><span class="line">                if (/[a-z]/.test(word)) &#123;</span><br><span class="line">                    return word.toUpperCase();</span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    return word.toLowerCase()</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;).join(&apos;&apos;)</span><br><span class="line">        case 4:</span><br><span class="line">            return str.toUpperCase();</span><br><span class="line">        case 5:</span><br><span class="line">            return str.toLowerCase();</span><br><span class="line">        default:</span><br><span class="line">            return str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>55.检测密码强度</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const checkPwd = (str) =&gt; &#123;</span><br><span class="line">    var Lv = 0;</span><br><span class="line">    if (str.length &lt; 6) &#123;</span><br><span class="line">        return Lv</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[0-9]/.test(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[a-z]/.test(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[A-Z]/.test(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    if (/[\.|-|_]/.test(str)) &#123;</span><br><span class="line">        Lv++</span><br><span class="line">    &#125;</span><br><span class="line">    return Lv;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>56.函数节流器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const debouncer = (fn, time, interval = 200) =&gt; &#123;</span><br><span class="line">    if (time - (window.debounceTimestamp || 0) &gt; interval) &#123;</span><br><span class="line">        fn &amp;&amp; fn();</span><br><span class="line">        window.debounceTimestamp = time;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>57.在字符串中插入新字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const insertStr = (soure, index, newStr) =&gt; &#123;</span><br><span class="line">    var str = soure.slice(0, index) + newStr + soure.slice(index);</span><br><span class="line">    return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>58.判断两个对象是否键值相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const isObjectEqual = (a, b) =&gt; &#123;</span><br><span class="line">    var aProps = Object.getOwnPropertyNames(a);</span><br><span class="line">    var bProps = Object.getOwnPropertyNames(b);</span><br><span class="line"></span><br><span class="line">    if (aProps.length !== bProps.length) &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; aProps.length; i++) &#123;</span><br><span class="line">        var propName = aProps[i];</span><br><span class="line"></span><br><span class="line">        if (a[propName] !== b[propName]) &#123;</span><br><span class="line">            return false;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>59.16进制颜色转RGBRGBA字符串</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const colorToRGB = (val, opa) =&gt; &#123;</span><br><span class="line"></span><br><span class="line">    var pattern = /^(#?)[a-fA-F0-9]&#123;6&#125;$/; //16进制颜色值校验规则</span><br><span class="line">    var isOpa = typeof opa == &apos;number&apos;; //判断是否有设置不透明度</span><br><span class="line"></span><br><span class="line">    if (!pattern.test(val)) &#123; //如果值不符合规则返回空字符</span><br><span class="line">        return &apos;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    var v = val.replace(/#/, &apos;&apos;); //如果有#号先去除#号</span><br><span class="line">    var rgbArr = [];</span><br><span class="line">    var rgbStr = &apos;&apos;;</span><br><span class="line"></span><br><span class="line">    for (var i = 0; i &lt; 3; i++) &#123;</span><br><span class="line">        var item = v.substring(i * 2, i * 2 + 2);</span><br><span class="line">        var num = parseInt(item, 16);</span><br><span class="line">        rgbArr.push(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rgbStr = rgbArr.join();</span><br><span class="line">    rgbStr = &apos;rgb&apos; + (isOpa ? &apos;a&apos; : &apos;&apos;) + &apos;(&apos; + rgbStr + (isOpa ? &apos;,&apos; + opa : &apos;&apos;) + &apos;)&apos;;</span><br><span class="line">    return rgbStr;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>60.追加url参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export const appendQuery = (url, key, value) =&gt; &#123;</span><br><span class="line">    var options = key;</span><br><span class="line">    if (typeof options == &apos;string&apos;) &#123;</span><br><span class="line">        options = &#123;&#125;;</span><br><span class="line">        options[key] = value;</span><br><span class="line">    &#125;</span><br><span class="line">    options = $.param(options);</span><br><span class="line">    if (url.includes(&apos;?&apos;)) &#123;</span><br><span class="line">        url += &apos;&amp;&apos; + options</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        url += &apos;?&apos; + options</span><br><span class="line">    &#125;</span><br><span class="line">    return url;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序相关功能</title>
    <url>/2019/09/28/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9B%B8%E5%85%B3%E5%8A%9F%E5%8A%9F%E8%83%BD/</url>
    <content><![CDATA[<h1 id="微信小程序三级联动省市区选择器"><a href="#微信小程序三级联动省市区选择器" class="headerlink" title="微信小程序三级联动省市区选择器"></a>微信小程序三级联动省市区选择器</h1><p><img src="/images/select2.png" alt></p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;！ -  modelTest.wxml  - &gt;</span><br><span class="line">&lt;import src =&quot;../../ model / model.wxml&quot;/&gt;      /*引入从下而上的弹出框*/</span><br><span class="line">&lt;view class =&quot;infoText”&gt; &#123;&#123;province&#125;&#125; &#123;&#123;city&#125;&#125; &#123;&#123;county&#125;&#125; &lt;/ view&gt;</span><br><span class="line">&lt;button class =&quot;animation-button&quot; bindtap =&quot;translate&quot;&gt;选择城市&lt;/ button&gt;</span><br><span class="line">&lt;template is =&quot;areaData&quot; data =&quot;&#123;&#123;... item&#125;&#125;&quot; /&gt;/*这里的is是model.wxml中template的name*/</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;！ -  modelTest.js  - &gt;</span><br><span class="line"> model = require(&apos;../../model/model.js&apos;)//引入model.js</span><br><span class="line"></span><br><span class="line">var show = false;</span><br><span class="line">var item = &#123;&#125;;</span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">      show: show</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">   //生命周期函数--监听页面初次渲染完成</span><br><span class="line">  onReady: function (e) &#123;</span><br><span class="line">    var that = this;</span><br><span class="line">    //请求数据</span><br><span class="line">    model.updateAreaData(that, 0, e);</span><br><span class="line">  &#125;,</span><br><span class="line">  //点击选择城市按钮显示picker-view</span><br><span class="line">  translate: function (e) &#123;</span><br><span class="line">    model.animationEvents(this, 0, true,400);  </span><br><span class="line">  &#125;,</span><br><span class="line">  //隐藏picker-view</span><br><span class="line">  hiddenFloatView: function (e) &#123;</span><br><span class="line">    console.log(&quot;id = &quot; + e.target.dataset.id)</span><br><span class="line">    model.animationEvents(this, 200, false,400);</span><br><span class="line">    //点击确定按钮更新数据(id=444是背后透明蒙版 id=555是取消按钮)</span><br><span class="line">    if (e.target.dataset.id == 666)&#123;</span><br><span class="line">      this.updateShowData()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  //滑动事件</span><br><span class="line">  bindChange: function (e) &#123;</span><br><span class="line">    model.updateAreaData(this, 1, e);</span><br><span class="line">    //如果想滑动的时候不实时更新，只点确定的时候更新，注释掉下面这行代码即可。</span><br><span class="line">    this.updateShowData()</span><br><span class="line">  &#125;,</span><br><span class="line">  //更新顶部展示的数据</span><br><span class="line">  updateShowData:function(e)&#123;</span><br><span class="line">    item = this.data.item;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      province: item.provinces[item.value[0]].name,</span><br><span class="line">      city: item.citys[item.value[1]].name,</span><br><span class="line">      county: item.countys[item.value[2]].name</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  ,</span><br><span class="line">  onReachBottom: function ()&#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  nono: function ()&#123;&#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;！ -  modelTest.wxss  - &gt;</span><br><span class="line">@import &apos;../../model/model.wxss&apos;</span><br></pre></td></tr></table></figure>

<p>下面就是model的代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!--model.wxml--&gt;</span><br><span class="line">&lt;template name=&quot;msgItem&quot;&gt;</span><br><span class="line">  &lt;view class = &apos;centerText&apos;&gt;</span><br><span class="line">    &lt;text&gt; &#123;&#123;index&#125;&#125;: &#123;&#123;msg&#125;&#125; &lt;/text&gt;</span><br><span class="line">    &lt;text&gt; Time: &#123;&#123;time&#125;&#125; &lt;/text&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- --------------分割线------------- --&gt;</span><br><span class="line"></span><br><span class="line">&lt;template name=&quot;areaData&quot;&gt;</span><br><span class="line">  &lt;view class=&quot;animation-element-wrapper&quot; animation=&quot;&#123;&#123;animation&#125;&#125;&quot; style=&quot;visibility:&#123;&#123;show ? &apos;visible&apos;:&apos;hidden&apos;&#125;&#125;&quot; bindtap=&quot;hiddenFloatView&quot; data-id=&quot;444&quot;&gt;</span><br><span class="line">     &lt;view class=&quot;animation-element&quot; catchtap=&quot;nono&quot;&gt;</span><br><span class="line">        &lt;text class=&quot;left-bt&quot; catchtap=&quot;hiddenFloatView&quot; data-id=&quot;555&quot;&gt;取消&lt;/text&gt;</span><br><span class="line">        &lt;text class=&quot;right-bt&quot; catchtap=&quot;hiddenFloatView&quot; data-id=&quot;666&quot;&gt;确定&lt;/text&gt;</span><br><span class="line">          &lt;view class=&quot;line&quot;&gt;&lt;/view&gt; </span><br><span class="line"></span><br><span class="line">        &lt;picker-view indicator-style = &quot;height: 50rpx;&quot; value=&quot;&#123;&#123;value&#125;&#125;&quot; bindchange=&quot;bindChange&quot; catchtap=&quot;nono&quot;&gt;</span><br><span class="line">        &lt;!--省--&gt;</span><br><span class="line">        &lt;picker-view-column&gt;</span><br><span class="line">           &lt;view wx:for=&quot;&#123;&#123;provinces&#125;&#125;&quot; wx:for-item=&quot;sheng&quot; wx:key=&quot;&quot;&gt;</span><br><span class="line">             &#123;&#123;sheng.name&#125;&#125;</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/picker-view-column&gt;</span><br><span class="line">        &lt;!--地级市--&gt;</span><br><span class="line">        &lt;picker-view-column&gt;</span><br><span class="line">          &lt;view wx:for=&quot;&#123;&#123;citys&#125;&#125;&quot; wx:for-item=&quot;shi&quot; wx:key=&quot;&quot;&gt;</span><br><span class="line">            &#123;&#123;shi.name&#125;&#125;</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/picker-view-column&gt;</span><br><span class="line">        &lt;!--区县--&gt;</span><br><span class="line">        &lt;picker-view-column&gt;</span><br><span class="line">          &lt;view wx:for=&quot;&#123;&#123;countys&#125;&#125;&quot; wx:for-item=&quot;xian&quot; wx:key=&quot;&quot;&gt;</span><br><span class="line">            &#123;&#123;xian.name&#125;&#125;</span><br><span class="line">          &lt;/view&gt;</span><br><span class="line">        &lt;/picker-view-column&gt;</span><br><span class="line">        &lt;/picker-view&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">/* model.wxss */</span><br><span class="line">page&#123;</span><br><span class="line">  background-color: rgba(255, 255, 255, 1); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.infoText&#123;</span><br><span class="line">    margin-top: 20rpx;</span><br><span class="line">    text-align: center;</span><br><span class="line">    width: 100%;</span><br><span class="line">    justify-content: center; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.centerText&#123;</span><br><span class="line">  margin-top: 100rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  text-align: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/* --------------分割线------------- */</span><br><span class="line"></span><br><span class="line">picker-view&#123;</span><br><span class="line">  background-color: white;</span><br><span class="line">  padding: 0;</span><br><span class="line">  width: 100%; </span><br><span class="line">  height: 380rpx;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  position: fixed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">picker-view-column view&#123;</span><br><span class="line">  vertical-align:middle; </span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  line-height: 28rpx;</span><br><span class="line">  height: 100%;</span><br><span class="line">  display: flex;</span><br><span class="line">  align-items: center;</span><br><span class="line">  justify-content: center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.animation-element-wrapper &#123;</span><br><span class="line">  display: flex;  </span><br><span class="line">  position: fixed;</span><br><span class="line">  left: 0;</span><br><span class="line">  top:0;</span><br><span class="line">  height: 100%;</span><br><span class="line">  width: 100%;</span><br><span class="line">  background-color: rgba(0, 0, 0, 0.6);</span><br><span class="line">&#125;</span><br><span class="line">.animation-element &#123;</span><br><span class="line">  display: flex;</span><br><span class="line">  position: fixed;</span><br><span class="line">  width: 100%;</span><br><span class="line">  height: 470rpx;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  background-color: rgba(255, 255, 255, 1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.animation-button &#123;</span><br><span class="line">  margin-top: 20rpx;</span><br><span class="line">  top:20rpx;</span><br><span class="line">  width: 400rpx;</span><br><span class="line">  height: 100rpx; </span><br><span class="line">  line-height: 100rpx; </span><br><span class="line">  align-items:center;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">.animation-element text&#123;</span><br><span class="line">  color: #999999;</span><br><span class="line">  display: inline-flex;  </span><br><span class="line">  position: fixed;</span><br><span class="line">  margin-top: 20rpx;</span><br><span class="line">  height: 50rpx;</span><br><span class="line">  text-align: center;</span><br><span class="line">  line-height: 50rpx;</span><br><span class="line">  font-size: 34rpx;</span><br><span class="line">  font-family: Arial, Helvetica, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.left-bt&#123;</span><br><span class="line">  left: 30rpx;</span><br><span class="line">&#125;</span><br><span class="line">.right-bt &#123;</span><br><span class="line">  right: 30rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.line&#123;</span><br><span class="line">  display: block;</span><br><span class="line">  position: fixed;</span><br><span class="line">  height: 1rpx;</span><br><span class="line">  width: 100%;</span><br><span class="line">  margin-top: 89rpx; </span><br><span class="line">  background-color: #eeeeee;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// model.js</span><br><span class="line">var area = require(&apos;../utils/area.js&apos;)</span><br><span class="line">var areaInfo = [];//所有省市区县数据</span><br><span class="line">var provinces = [];//省</span><br><span class="line">var citys = [];//城市</span><br><span class="line">var countys = [];//区县</span><br><span class="line">var value = [0, 0, 0];//数据位置下标</span><br><span class="line">var info = &#123;&#125;;</span><br><span class="line">function updateAreaData(that, status, e) &#123;</span><br><span class="line">  //获取省份数据</span><br><span class="line">  var getProvinceData = function () &#123;</span><br><span class="line">    var s;</span><br><span class="line">    provinces = [];</span><br><span class="line">    var num = 0;</span><br><span class="line">    for (var i = 0; i &lt; areaInfo.length; i++) &#123;</span><br><span class="line">      s = areaInfo[i];</span><br><span class="line">      if (s.di == &quot;00&quot; &amp;&amp; s.xian == &quot;00&quot;) &#123;</span><br><span class="line">        provinces[num] = s;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    //初始化调一次</span><br><span class="line">    //获取地级市数据</span><br><span class="line">    getCityArr();</span><br><span class="line">    //获取区县数据</span><br><span class="line">    getCountyInfo();</span><br><span class="line"></span><br><span class="line">    //模型赋值</span><br><span class="line">    info = &#123;</span><br><span class="line">      item: &#123;</span><br><span class="line">        provinces: provinces,</span><br><span class="line">        citys: citys,</span><br><span class="line">        countys: countys,</span><br><span class="line">        value: value</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    animationEvents(that, 200, false, 0);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取地级市数据</span><br><span class="line">  var getCityArr = function (count = 0) &#123;</span><br><span class="line">    var c;</span><br><span class="line">    citys = [];</span><br><span class="line">    var num = 0;</span><br><span class="line">    for (var i = 0; i &lt; areaInfo.length; i++) &#123;</span><br><span class="line">      c = areaInfo[i];</span><br><span class="line">      if (c.xian == &quot;00&quot; &amp;&amp; c.sheng == provinces[count].sheng &amp;&amp; c.di != &quot;00&quot;) &#123;</span><br><span class="line">        citys[num] = c;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (citys.length == 0) &#123;</span><br><span class="line">      citys[0] = &#123; name: &apos;&apos; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  // 获取区县数据</span><br><span class="line">  var getCountyInfo = function (column0 = 0, column1 = 0) &#123;</span><br><span class="line">    var c;</span><br><span class="line">    countys = [];</span><br><span class="line">    var num = 0;</span><br><span class="line">    for (var i = 0; i &lt; areaInfo.length; i++) &#123;</span><br><span class="line">      c = areaInfo[i];</span><br><span class="line">      if (c.xian != &quot;00&quot; &amp;&amp; c.sheng == provinces[column0].sheng &amp;&amp; c.di == citys[column1].di) &#123;</span><br><span class="line">        countys[num] = c;</span><br><span class="line">        num++;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    if (countys.length == 0) &#123;</span><br><span class="line">      countys[0] = &#123; name: &apos;&apos; &#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    value = [column0, column1, 0];</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //滑动事件</span><br><span class="line">  var valueChange = function (e, that) &#123;</span><br><span class="line">    var val = e.detail.value</span><br><span class="line">    console.log(e)</span><br><span class="line">    //判断滑动的是第几个column</span><br><span class="line">    //若省份column做了滑动则定位到地级市和区县第一位</span><br><span class="line">    if (value[0] != val[0]) &#123;</span><br><span class="line">      val[1] = 0;</span><br><span class="line">      val[2] = 0;</span><br><span class="line">      getCityArr(val[0]);//获取地级市数据</span><br><span class="line">      getCountyInfo(val[0], val[1]);//获取区县数据</span><br><span class="line">    &#125; else &#123;    //若省份column未做滑动，地级市做了滑动则定位区县第一位</span><br><span class="line">      if (value[1] != val[1]) &#123;</span><br><span class="line">        val[2] = 0;</span><br><span class="line">        getCountyInfo(val[0], val[1]);//获取区县数据</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    value = val;</span><br><span class="line"></span><br><span class="line">    assignmentData(that, that.data.item.show)</span><br><span class="line"></span><br><span class="line">    console.log(val);</span><br><span class="line"></span><br><span class="line">    //回调</span><br><span class="line">    //callBack(val);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  if (status == 0) &#123;</span><br><span class="line">    area.getAreaInfo(function (arr) &#123;</span><br><span class="line">      areaInfo = arr;</span><br><span class="line">      //获取省份数据</span><br><span class="line">      getProvinceData();</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  //滑动事件</span><br><span class="line">  else &#123;</span><br><span class="line">    valueChange(e, that);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//动画事件</span><br><span class="line">function animationEvents(that, moveY, show, duration) &#123;</span><br><span class="line">  console.log(&quot;moveY:&quot; + moveY + &quot;\nshow:&quot; + show);</span><br><span class="line">  that.animation = wx.createAnimation(&#123;</span><br><span class="line">    transformOrigin: &quot;50% 50%&quot;,</span><br><span class="line">    duration: duration,</span><br><span class="line">    timingFunction: &quot;ease&quot;,</span><br><span class="line">    delay: 0</span><br><span class="line">  &#125;)</span><br><span class="line">  that.animation.translateY(moveY + &apos;vh&apos;).step()</span><br><span class="line">  //赋值</span><br><span class="line">  assignmentData(that, show)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//赋值</span><br><span class="line">function assignmentData(that, show) &#123;</span><br><span class="line">  that.setData(&#123;</span><br><span class="line">    item: &#123;</span><br><span class="line">      animation: that.animation.export(),</span><br><span class="line">      show: show,</span><br><span class="line">      provinces: provinces,</span><br><span class="line">      citys: citys,</span><br><span class="line">      countys: countys,</span><br><span class="line">      value: value</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">  updateAreaData: updateAreaData,</span><br><span class="line">  animationEvents: animationEvents</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于area的代码量较大所以请移步本人github下载即可<br>github地址：<a href="https://github.com/yueqiqi/tushifang2/blob/master/%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/utils/area.js" target="_blank" rel="noopener">https://github.com/yueqiqi/tushifang2/blob/master/%E7%9C%81%E5%B8%82%E5%8C%BA%E4%B8%89%E7%BA%A7%E8%81%94%E5%8A%A8/utils/area.js</a></p>
<h1 id="微信小程序上传图片功能"><a href="#微信小程序上传图片功能" class="headerlink" title="微信小程序上传图片功能"></a>微信小程序上传图片功能</h1><!-- more -->
<h2 id="不带上传到后台的功能"><a href="#不带上传到后台的功能" class="headerlink" title="不带上传到后台的功能"></a>不带上传到后台的功能</h2><iframe width="500" height="700" src="/images/GIF.gif"></iframe>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml --&gt;</span><br><span class="line">&lt;!-- 容器 --&gt;</span><br><span class="line">&lt;view class=&apos;ui_uploader_cell&apos;&gt;</span><br><span class="line">    &lt;!-- 根据已选择的图片临时路径数组展示图片--&gt;</span><br><span class="line">    &lt;view class=&apos;ui_uploader_item&apos; wx:for=&quot;&#123;&#123;uploaderList&#125;&#125;&quot; wx:key=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;</span><br><span class="line">        &lt;!-- 删除小红叉--&gt;</span><br><span class="line">        &lt;!-- data-index自定义属性 --&gt;</span><br><span class="line">        &lt;icon class=&apos;ui_uploader_item_icon&apos; bindtap=&apos;clearImg&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; type=&quot;clear&quot; size=&quot;20&quot; color=&quot;red&quot;/&gt;</span><br><span class="line">        &lt;!-- 图片--&gt;</span><br><span class="line">        &lt;image bindtap=&apos;showImg&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; src=&apos;&#123;&#123;item&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;!-- 上传按钮+框 --&gt;</span><br><span class="line">    &lt;view class=&apos;ui_uploader&apos; bindtap=&apos;upload&apos; wx:if=&quot;&#123;&#123;showUpload&#125;&#125;&quot;&gt;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- js --&gt;</span><br><span class="line">初始值</span><br><span class="line">page(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">    uploadList:[],//已选择的图片临时路径数组</span><br><span class="line">    uploadNum:0,//已选择的图片个数</span><br><span class="line">    showUpload:true,//用来判断图片是否超过9张，当超过限定值不可继续上传</span><br><span class="line">  &#125;</span><br><span class="line">  // 删除图片</span><br><span class="line">    clearImg:function(e)&#123;</span><br><span class="line">        var nowList = [];//新数据</span><br><span class="line">        var uploaderList = this.data.uploaderList;//原数据</span><br><span class="line">        </span><br><span class="line">        for (let i = 0; i &lt; uploaderList.length;i++)&#123;</span><br><span class="line">            if (i == e.currentTarget.dataset.index)&#123;</span><br><span class="line">                continue;</span><br><span class="line">            &#125;else&#123;</span><br><span class="line">                nowList.push(uploaderList[i])</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        this.setData(&#123;</span><br><span class="line">            uploaderNum: this.data.uploaderNum - 1,</span><br><span class="line">            uploaderList: nowList,</span><br><span class="line">            showUpload: true</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //展示图片</span><br><span class="line">    showImg:function(e)&#123;</span><br><span class="line">        var that=this;</span><br><span class="line">        wx.previewImage(&#123;</span><br><span class="line">            urls: that.data.uploaderList,</span><br><span class="line">            current: that.data.uploaderList[e.currentTarget.dataset.index]</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    //上传图片</span><br><span class="line">    upload: function(e) &#123;</span><br><span class="line">        var that = this;</span><br><span class="line">        wx.chooseImage(&#123;</span><br><span class="line">            count: 9 - that.data.uploaderNum, // 默认9</span><br><span class="line">            sizeType: [&apos;original&apos;, &apos;compressed&apos;], // 可以指定是原图还是压缩图，默认二者都有</span><br><span class="line">            sourceType: [&apos;album&apos;, &apos;camera&apos;], // 可以指定来源是相册还是相机，默认二者都有</span><br><span class="line">            success: function(res) &#123;</span><br><span class="line">                console.log(res)</span><br><span class="line">                // 返回选定照片的本地文件路径列表，tempFilePath可以作为img标签的src属性显示图片</span><br><span class="line">                let tempFilePaths = res.tempFilePaths;</span><br><span class="line">                let uploaderList = that.data.uploaderList.concat(tempFilePaths);</span><br><span class="line">                if (uploaderList.length==9)&#123;</span><br><span class="line">                    that.setData(&#123;</span><br><span class="line">                        showUpload:false</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;</span><br><span class="line">                that.setData(&#123;</span><br><span class="line">                    uploaderList: uploaderList,</span><br><span class="line">                    uploaderNum: uploaderList.length,</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>

<h1 id="微信小程序单选多选功能"><a href="#微信小程序单选多选功能" class="headerlink" title="微信小程序单选多选功能"></a>微信小程序单选多选功能</h1><!-- more -->
<p><img src="/images/radio.png" alt></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml --&gt;</span><br><span class="line">&lt;!-- 多选功能 --&gt;</span><br><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view class=&apos;wrap&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;checkbox-con&apos;&gt;</span><br><span class="line">    &lt;checkbox-group bindchange=&quot;checkboxChange&quot;&gt;</span><br><span class="line">      &lt;label class=&quot;&#123;&#123;item.checked?&apos;checkbox checked&apos;:&apos;checkbox&apos;&#125;&#125;&quot; wx:for=&quot;&#123;&#123;checkboxArr&#125;&#125;&quot; bindtap=&apos;checkbox&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; wx:key=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;checkbox value=&quot;&#123;&#123;item.name&#125;&#125;&quot; checked=&quot;&#123;&#123;item.checked&#125;&#125;&quot;/&gt;&#123;&#123;item.name&#125;&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">    &lt;/checkbox-group&gt;</span><br><span class="line">     &lt;button type=&apos;primary&apos; bindtap=&apos;confirm&apos;&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 单选功能 --&gt;</span><br><span class="line">&lt;!--wxml--&gt;</span><br><span class="line">&lt;view class=&apos;wrap&apos;&gt;</span><br><span class="line">  &lt;view class=&apos;checkbox-con&apos;&gt;</span><br><span class="line">    &lt;radio-group bindchange=&quot;radioChange&quot;&gt;</span><br><span class="line">      &lt;label class=&quot;&#123;&#123;item.checked?&apos;checkbox checked&apos;:&apos;checkbox&apos;&#125;&#125;&quot; wx:for=&quot;&#123;&#123;checkboxArr&#125;&#125;&quot; bindtap=&apos;radio&apos; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; wx:key=&quot;item.name&quot;&gt;</span><br><span class="line">        &lt;checkbox value=&quot;&#123;&#123;item.name&#125;&#125;&quot; checked=&quot;&#123;&#123;item.checked&#125;&#125;&quot;/&gt;&#123;&#123;item.name&#125;&#125;</span><br><span class="line">      &lt;/label&gt;</span><br><span class="line">    &lt;/radio-group&gt;</span><br><span class="line">     &lt;button type=&apos;primary&apos; bindtap=&apos;confirm&apos;&gt;提交&lt;/button&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxss --&gt;</span><br><span class="line">/* wxss */</span><br><span class="line">.wrap&#123;</span><br><span class="line">  width: 550rpx;</span><br><span class="line">  margin: 50rpx auto</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line">.checkbox-con&#123;</span><br><span class="line">  margin-top: 40rpx;</span><br><span class="line">  text-align: center</span><br><span class="line">&#125;</span><br><span class="line">.checkbox&#123;</span><br><span class="line">  width: 260rpx;</span><br><span class="line">  height: 72rpx;</span><br><span class="line">  line-height: 72rpx;</span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  color: #888888;</span><br><span class="line">  border: 1rpx solid #CECECE;</span><br><span class="line">  border-radius: 5rpx;</span><br><span class="line">  display: inline-block;</span><br><span class="line">  margin: 0 10rpx 20rpx 0;</span><br><span class="line">  position: relative</span><br><span class="line">&#125;</span><br><span class="line">.checked&#123;</span><br><span class="line">  color: #1A92EC;</span><br><span class="line">  background: rgba(49,165,253,0.08);</span><br><span class="line">  border: 1rpx solid #31A5FD;</span><br><span class="line">&#125;</span><br><span class="line">.checkbox checkbox&#123;</span><br><span class="line">  display: none</span><br><span class="line">&#125;</span><br><span class="line">.checked-img&#123;</span><br><span class="line">  width: 28rpx;</span><br><span class="line">  height: 28rpx;</span><br><span class="line">  position: absolute;</span><br><span class="line">  top: 0;</span><br><span class="line">  right: 0</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- js --&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Page(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    checkboxArr: [&#123;</span><br><span class="line">      name: &apos;选项A&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &apos;选项B&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &apos;选项C&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &apos;选项D&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &apos;选项E&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;, &#123;</span><br><span class="line">      name: &apos;选项F&apos;,</span><br><span class="line">      checked: false</span><br><span class="line">    &#125;],</span><br><span class="line">  &#125;,</span><br><span class="line">  // 单选功能</span><br><span class="line">  radio: function (e) &#123;</span><br><span class="line">    var index = e.currentTarget.dataset.index;//获取当前点击的下标</span><br><span class="line">    var checkboxArr = this.data.checkboxArr;//选项集合</span><br><span class="line">    if (checkboxArr[index].checked) return;//如果点击的当前已选中则返回</span><br><span class="line">    checkboxArr.forEach(item =&gt; &#123;</span><br><span class="line">      item.checked = false</span><br><span class="line">    &#125;)</span><br><span class="line">    checkboxArr[index].checked = true;//改变当前选中的checked值</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      checkboxArr: checkboxArr</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  radioChange: function (e) &#123;</span><br><span class="line">    var checkValue = e.detail.value;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      checkValue: checkValue</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  confirm: function () &#123;// 提交</span><br><span class="line">    console.log(this.data.checkValue)//所有选中的项的value</span><br><span class="line">  &#125;,</span><br><span class="line">  // 多选功能</span><br><span class="line">  checkbox: function (e) &#123;</span><br><span class="line">    var index = e.currentTarget.dataset.index;//获取当前点击的下标</span><br><span class="line">    var checkboxArr = this.data.checkboxArr;//选项集合</span><br><span class="line">    checkboxArr[index].checked = !checkboxArr[index].checked;//改变当前选中的checked值</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      checkboxArr: checkboxArr</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  checkboxChange: function (e) &#123;</span><br><span class="line">    var checkValue = e.detail.value;</span><br><span class="line">    this.setData(&#123;</span><br><span class="line">      checkValue: checkValue</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;,</span><br><span class="line">  confirm: function () &#123;// 提交</span><br><span class="line">    console.log(this.data.checkValue)//所有选中的项的value</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h1 id="微信小程序自定义底部导航栏-中间一个凸起"><a href="#微信小程序自定义底部导航栏-中间一个凸起" class="headerlink" title="微信小程序自定义底部导航栏(中间一个凸起)"></a>微信小程序自定义底部导航栏(中间一个凸起)</h1><p><img src="/images/tabbar.png" alt></p>
<!-- more -->
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- router.js --&gt;替代微信小程序自带的底部导航条</span><br><span class="line">module.exports = [</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;pagePath&quot;: &quot;pages/body/body&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;主页&quot;,</span><br><span class="line">    &quot;iconPath&quot;: &quot;/pages/images/home1.png&quot;,</span><br><span class="line">    &quot;selectedIconPath&quot;: &quot;/pages/images/home2.png&quot;,</span><br><span class="line">    &quot;auth&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;pagePath&quot;: &quot;pages/informmation/recruitment/recruitment&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;信息中心&quot;,</span><br><span class="line">    &quot;iconPath&quot;: &quot;/pages/images/mes1.png&quot;,</span><br><span class="line">    &quot;selectedIconPath&quot;: &quot;/pages/images/mes2.png&quot;,</span><br><span class="line">    &quot;auth&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;pagePath&quot;: &quot;pages/index/index&quot;,</span><br><span class="line">    &quot;text&quot;: &quot; &quot;,</span><br><span class="line">    &quot;iconPath&quot;: &quot;/pages/images/add2.png&quot;,</span><br><span class="line">    &quot;selectedIconPath&quot;: &quot;/pages/images/add2.png&quot;,</span><br><span class="line">    &quot;auth&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;pagePath&quot;: &quot;pages/store/index/index&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;商城&quot;,</span><br><span class="line">    &quot;iconPath&quot;: &quot;/pages/images/store1.png&quot;,</span><br><span class="line">    &quot;selectedIconPath&quot;: &quot;/pages/images/store2.png&quot;,</span><br><span class="line">    &quot;auth&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    &quot;pagePath&quot;: &quot;pages/self/index/index&quot;,</span><br><span class="line">    &quot;text&quot;: &quot;会员中心&quot;,</span><br><span class="line">    &quot;iconPath&quot;: &quot;/pages/images/self1.png&quot;,</span><br><span class="line">    &quot;selectedIconPath&quot;: &quot;/pages/images/self2.png&quot;,</span><br><span class="line">    &quot;auth&quot;: 0</span><br><span class="line">  &#125;,</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tabbar.wxml --&gt;</span><br><span class="line">&lt;!-- 底部导航条 --&gt;</span><br><span class="line">&lt;view class=&apos;tabbar&apos;&gt;</span><br><span class="line">  &lt;view wx:if=&apos;&#123;&#123;_auth &gt;= item.auth&#125;&#125;&apos; class=&apos;tabbar-item&apos; wx:for=&apos;&#123;&#123;tabbarList&#125;&#125;&apos; wx:key=&apos;&#123;&#123;item.pagePath&#125;&#125;&apos; bindtap=&apos;handleItemTap&apos; data-path=&apos;&#123;&#123;item.pagePath&#125;&#125;&apos; data-idx=&apos;&#123;&#123;index&#125;&#125;&apos;&gt;</span><br><span class="line">    &lt;view class=&apos;tabbar-item-icon&apos;&gt;</span><br><span class="line">      &lt;image src=&apos;&#123;&#123;activeIdx === index ? item.selectedIconPath : item.iconPath&#125;&#125;&apos;&gt;&lt;/image&gt;</span><br><span class="line">    &lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;tabbar-item-text &#123;&#123;activeIdx === index ? &quot;active&quot; : &quot;&quot;&#125;&#125;&apos;&gt;&#123;&#123;item.text&#125;&#125;&lt;/view&gt;</span><br><span class="line">  &lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tabbar.wxss --&gt;</span><br><span class="line">/* pages/tab/tab.wxss */</span><br><span class="line">.tabbar &#123;</span><br><span class="line">  z-index:99999;</span><br><span class="line">  position: fixed;</span><br><span class="line">  bottom: 0;</span><br><span class="line">  left: 0;</span><br><span class="line">  right: 0;</span><br><span class="line">  height: 100rpx;</span><br><span class="line">  border-top: 0.5px solid #d5d5d5;</span><br><span class="line">  display: flex;</span><br><span class="line">  font-size: 0;</span><br><span class="line">  background: #fff;</span><br><span class="line">&#125;</span><br><span class="line">.tabbar-item &#123;</span><br><span class="line">  flex: 1;</span><br><span class="line">  text-align: center;</span><br><span class="line">  overflow: hidden;</span><br><span class="line">  box-sizing: border-box;</span><br><span class="line">  padding: 8rpx 10rpx 0;</span><br><span class="line">  color: #333333;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item:nth-child(3)&#123;</span><br><span class="line">  position: relative;</span><br><span class="line">  bottom: 50rpx;</span><br><span class="line">  height:150rpx;</span><br><span class="line">  flex: 0.7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item:nth-child(3) .tabbar-item-icon&#123;</span><br><span class="line">  height: 100rpx;</span><br><span class="line">  background: #fff;</span><br><span class="line">  border-radius: 50%;</span><br><span class="line">  border-top: solid 1px gray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item:nth-child(3) .tabbar-item-icon image&#123;</span><br><span class="line">  width: 90rpx;</span><br><span class="line">  height: 90rpx;</span><br><span class="line">  padding-top: 0rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item:nth-child(3) .tabbar-item-text&#123;</span><br><span class="line">  line-height: 0;</span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  margin-top: 8px;</span><br><span class="line">  color: #808080;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item-icon &#123;</span><br><span class="line">  margin-bottom: 6rpx;</span><br><span class="line">  height: 56rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item-icon image &#123;</span><br><span class="line">  width: 56rpx;</span><br><span class="line">  height: 56rpx;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.tabbar-item-text &#123;</span><br><span class="line">  font-size: 28rpx;</span><br><span class="line">  line-height: 20rpx;</span><br><span class="line">  color: #808080;</span><br><span class="line">&#125;</span><br><span class="line">.active &#123;</span><br><span class="line">  color: rgba(118,212,198,1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- tabbar.js --&gt;</span><br><span class="line">// pages/tab/tab.js</span><br><span class="line">import tabbarList from &quot;../../utils/router.js&quot;//根据刚才创建的router.js引入即可</span><br><span class="line">Component(&#123;</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的属性列表</span><br><span class="line">   */</span><br><span class="line">  properties: &#123;</span><br><span class="line">    activeIdx: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      value: 0</span><br><span class="line">    &#125;,</span><br><span class="line">    auth: &#123;</span><br><span class="line">      type: Number,</span><br><span class="line">      value: 0,</span><br><span class="line">      observer: &apos;onAuthChanged&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    tabbarList: tabbarList,</span><br><span class="line">    _auth: 0</span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的方法列表</span><br><span class="line">   */</span><br><span class="line">  methods: &#123;</span><br><span class="line">    handleItemTap(e) &#123;</span><br><span class="line">      const &#123;</span><br><span class="line">        idx,</span><br><span class="line">        path</span><br><span class="line">      &#125; = e.currentTarget.dataset</span><br><span class="line"></span><br><span class="line">      if (idx === this.data.activeIdx) &#123;</span><br><span class="line">        this.trigger(&apos;refresh&apos;)</span><br><span class="line">        return</span><br><span class="line">      &#125;</span><br><span class="line">      wx.switchTab(&#123;</span><br><span class="line">        url: `/$&#123;path&#125;`,</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    onAuthChanged(newVal) &#123;</span><br><span class="line">      wx.setStorageSync(&apos;__com-tabbar-auth&apos;, newVal)</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        _auth: newVal</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    trigger(eventName, value = &#123;&#125;, info) &#123;</span><br><span class="line">      if (!eventName) &#123;</span><br><span class="line">        throw new TypeError(&apos;没有自定义事件名&apos;)</span><br><span class="line">      &#125;</span><br><span class="line">      this.triggerEvent(eventName, value)</span><br><span class="line">      console.log(`发送 $&#123;eventName&#125; 事件,携带的值为 $&#123;typeof value === &apos;object&apos; ? JSON.stringify(value) : value&#125; $&#123;info ? &apos;   ---   &apos; + info : &apos;&apos;&#125;`)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  ready() &#123; &#125;,</span><br><span class="line">  /** 权限显示 */</span><br><span class="line">  pageLifetimes: &#123;</span><br><span class="line">    show: function () &#123;</span><br><span class="line">      console.log(&apos;show&apos;)</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        _auth: wx.getStorageSync(&apos;__com-tabbar-auth&apos;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>tabbar组件创建完成 直接在需要显示底部导航条的页面引入即可<br>el:在index中引入底部导航条<br>1.在index.json中”usingComponents”: {“tabbar”: “/pages/tabbar/tabbar”}//位置是刚才的tabbar.wxml位置<br>2.在index.wxml中最后(位置不限)添加<tabbar activeidx></tabbar><br>3.！！！在index.js data中添加 activeIdx: 0{根据下标选择(el:index是首页就是0，body是信息中心就是1…)},</p>
<h1 id="微信小程序选项卡功能"><a href="#微信小程序选项卡功能" class="headerlink" title="微信小程序选项卡功能"></a>微信小程序选项卡功能</h1><iframe width="500" height="700" src="/images/tab.gif"></iframe>
<!-- more -->

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxml --&gt;</span><br><span class="line">&lt;!-- 上方选项卡 --&gt;</span><br><span class="line">&lt;view class=&apos;topTabSwiper&apos;&gt;</span><br><span class="line">    &lt;view class=&apos;tab  &#123;&#123;currentData == 0 ? &quot;tabBorer&quot; : &quot;&quot;&#125;&#125;&apos;  data-current = &quot;0&quot; bindtap=&apos;checkCurrent&apos;&gt;推荐&lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;tab  &#123;&#123;currentData == 1 ? &quot;tabBorer&quot; : &quot;&quot;&#125;&#125;&apos;  data-current = &quot;1&quot; bindtap=&apos;checkCurrent&apos;&gt;热点&lt;/view&gt;</span><br><span class="line">    &lt;view class=&apos;tab  &#123;&#123;currentData == 2 ? &quot;tabBorer&quot; : &quot;&quot;&#125;&#125;&apos;  data-current = &quot;2&quot; bindtap=&apos;checkCurrent&apos;&gt;关注&lt;/view&gt; </span><br><span class="line">&lt;/view&gt;</span><br><span class="line">&lt;!-- 下方选项卡所对应内容 --&gt;</span><br><span class="line">&lt;swiper current=&quot;&#123;&#123;currentData&#125;&#125;&quot; class=&apos;swiper&apos; style=&quot;height:600px;&quot; duration=&quot;300&quot; bindchange=&quot;bindchange&quot;&gt;</span><br><span class="line">  &lt;swiper-item&gt;&lt;view class=&apos;swiper_con&apos;&gt;内容1&lt;/view&gt;&lt;/swiper-item&gt; </span><br><span class="line">  &lt;swiper-item&gt;&lt;view class=&apos;swiper_con&apos;&gt;内容2&lt;/view&gt;&lt;/swiper-item&gt;</span><br><span class="line">  &lt;swiper-item&gt;&lt;view class=&apos;swiper_con&apos;&gt;内容3&lt;/view&gt;&lt;/swiper-item&gt;  </span><br><span class="line">&lt;/swiper&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- wxss --&gt;</span><br><span class="line">.tab&#123;float: left; width: 33.3333%;text-align: center;padding: 10rpx 0; &#125;</span><br><span class="line">.topTabSwiper&#123;  zoom: 1;&#125;</span><br><span class="line">.topTabSwiper:after&#123;content: &quot;&quot;; clear: both;display: block;&#125;</span><br><span class="line">.tabBorer&#123;border-bottom: 1px solid #f00; color: #f00;&#125;</span><br><span class="line">.swiper&#123;width: 100%;&#125;</span><br><span class="line">.swiper_con&#123;text-align: center; width: 100%; height: 100%; padding: 80rpx 0;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- js --&gt;</span><br><span class="line">//点击切换，滑块index赋值</span><br><span class="line">  checkCurrent: function (e) &#123;</span><br><span class="line">    const that = this;</span><br><span class="line"></span><br><span class="line">    if (that.data.currentData === e.target.dataset.current) &#123;</span><br><span class="line">      return false;</span><br><span class="line">    &#125; else &#123;</span><br><span class="line"></span><br><span class="line">      that.setData(&#123;</span><br><span class="line">        currentData: e.target.dataset.current</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">    //获取当前滑块的index</span><br><span class="line">  bindchange: function (e) &#123;</span><br><span class="line">    const that = this;</span><br><span class="line">    that.setData(&#123;</span><br><span class="line">      currentData: e.detail.current</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;,</span><br><span class="line">  data:&#123;</span><br><span class="line">    // 选项卡显示第一页</span><br><span class="line">    currentData: 0,&#125;</span><br></pre></td></tr></table></figure>

<h1 id="微信小程序自定义total提示-自定义组件"><a href="#微信小程序自定义total提示-自定义组件" class="headerlink" title="微信小程序自定义total提示(自定义组件)"></a>微信小程序自定义total提示(自定义组件)</h1><p><img src="/images/total.png" alt><br>  <!--more--></p>
<!-- 自定义组件 -->
<p>1:创建一个文件夹，用于保存自己所创建的组件<br>2:右键文件夹创建component(微信开发者工具中使用)<br>3:自定义组件样式，模板(默认样式与引入的文件样式互不干扰)<br>4:引入自定义组件(json配置)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自定义组件(component.wxml) --&gt;</span><br><span class="line">&lt;view class=&apos;wx_toast_container&apos; hidden=&quot;&#123;&#123;!toastShow&#125;&#125;&quot;&gt;</span><br><span class="line">  &lt;view class=&apos;wx_toast_text&apos;&gt;&#123;&#123;toastText&#125;&#125;&lt;/view&gt;</span><br><span class="line">&lt;/view&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 自定义组件(component.wxss)&gt;</span><br><span class="line">.wx_toast_container&#123;</span><br><span class="line">    position: fixed; </span><br><span class="line">    top: 0;</span><br><span class="line">    right: 0;</span><br><span class="line">    left: 0;</span><br><span class="line">    bottom: 0;</span><br><span class="line">    display: flex;</span><br><span class="line">    justify-content: center;</span><br><span class="line">    align-items: center;</span><br><span class="line">    z-index: 1000;</span><br><span class="line">&#125;</span><br><span class="line">.wx_toast_text&#123;</span><br><span class="line">    background:rgba(0,0,0,0.95);</span><br><span class="line">    color:white;</span><br><span class="line">    text-align:center;</span><br><span class="line">    font-size:34rpx;</span><br><span class="line">    padding:34rpx 50rpx;</span><br><span class="line">    border-radius:20rpx;</span><br><span class="line">    max-width:70%;</span><br><span class="line">    min-width:35%;</span><br><span class="line">    box-sizing:border-box;</span><br><span class="line">    line-height:120%;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//自定义组件(component.js)</span><br><span class="line">Component(&#123;</span><br><span class="line">  options: &#123;</span><br><span class="line">    styleIsolation: &apos;isolated&apos;,  // 外部样式组件是否阻隔</span><br><span class="line">    multipleSlots: true // 在组件定义时的选项中启用多slot支持  </span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 组件的属性列表</span><br><span class="line">   */</span><br><span class="line">  properties: &#123;</span><br><span class="line"></span><br><span class="line">  //  引用组件(index.wxml)传来的数据</span><br><span class="line">   toastText: &#123;            // 属性名  </span><br><span class="line">      type: String,</span><br><span class="line">      value: &apos;内容&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  /**</span><br><span class="line">   * 组件的初始数据</span><br><span class="line">   */</span><br><span class="line">  data: &#123;</span><br><span class="line">    toastShow: false, </span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  /**</span><br><span class="line">   * 组件的方法列表</span><br><span class="line">   */</span><br><span class="line">  methods: &#123;</span><br><span class="line">    showToast(text, time) &#123;//text time 分别是引用组件(index.wxml)的传来的</span><br><span class="line">      this.setData(&#123;</span><br><span class="line">        toastShow: !this.data.toastShow,</span><br><span class="line">        toastText: text</span><br><span class="line">      &#125;)</span><br><span class="line">      var that = this</span><br><span class="line">      if (!time) &#123;</span><br><span class="line">        time = 8000</span><br><span class="line">      &#125;</span><br><span class="line">      setTimeout(function () &#123;</span><br><span class="line">        that.setData(&#123;</span><br><span class="line">          toastShow: !that.data.toastShow</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;, time)</span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//index.json</span><br><span class="line">&quot;usingComponents&quot;: &#123;</span><br><span class="line">    &quot;component&quot;:&quot;/pages/component/component&quot;//自定义组件的位置</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- 引用组件(index.wxml) --&gt;</span><br><span class="line">&lt;component id=&quot;toastedit&quot;&gt;&#123;&#123;toastText&#125;&#125;&lt;/component&gt;   //id 用于在js中获取  </span><br><span class="line">&lt;button type=&quot;primary&quot; bindtap=&quot;showToast&quot;&gt; showToast! &lt;/button&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;!-- index.js--&gt;</span><br><span class="line">Page(&#123;</span><br><span class="line">  onReady()&#123;</span><br><span class="line">  //获得toastedit组件</span><br><span class="line">  this.component = this.selectComponent(&quot;#toastedit&quot;)</span><br><span class="line">&#125;,</span><br><span class="line">  showToast: function () &#123;</span><br><span class="line">    this.component.showToast(&apos;这是text&apos;, 2000)//第一个就是自定义组件的text，第二个就是time</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>10个Vue开发技巧</title>
    <url>/2020/08/08/10%E4%B8%AAVue%E5%BC%80%E5%8F%91%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="路由参数解耦"><a href="#路由参数解耦" class="headerlink" title="路由参数解耦"></a>路由参数解耦</h3><p>一般在组件内使用路由参数，大多数人会这样做：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getParamsId() &#123;</span><br><span class="line">            return this.$route.params.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>
<p>在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。<br>正确的做法是通过 props 解耦</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: &apos;/user/:id&apos;,</span><br><span class="line">        component: User,</span><br><span class="line">        props: true</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>将路由的 props 属性设置为 true 后，组件内可通过 props 接收到 params 参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    props: [&apos;id&apos;],</span><br><span class="line">    methods: &#123;</span><br><span class="line">        getParamsId() &#123;</span><br><span class="line">            return this.id</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>另外你还可以通过函数模式来返回 props</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const router = new VueRouter(&#123;</span><br><span class="line">    routes: [&#123;</span><br><span class="line">        path: &apos;/user/:id&apos;,</span><br><span class="line">        component: User,</span><br><span class="line">        props: (route) =&gt; (&#123;</span><br><span class="line">            id: route.query.id</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>函数式组件是无状态，它无法实例化，没有任何的生命周期和方法。创建函数式组件也很简单，只需要在模板添加 functional 声明即可。一般适合只依赖于外部数据的变化而变化的组件，因其轻量，渲染性能也会有所提高。<br>组件需要的一切都是通过 context 参数传递。它是一个上下文对象，具体属性查看文档。这里 props 是一个包含所有绑定属性的对象。<br>函数式组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">    &lt;div class=&quot;list&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;item&quot; v-for=&quot;item in props.list&quot; :key=&quot;item.id&quot; @click=&quot;props.itemClick(item)&quot;&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;item.title&#125;&#125;&lt;/p&gt;</span><br><span class="line">            &lt;p&gt;&#123;&#123;item.content&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>父组件使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;List :list=&quot;list&quot; :itemClick=&quot;item =&gt; (currentItem = item)&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">import List from &apos;@/components/List.vue&apos;</span><br><span class="line">export default &#123;</span><br><span class="line">    components: &#123;</span><br><span class="line">        List</span><br><span class="line">    &#125;,</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            list: [&#123;</span><br><span class="line">                title: &apos;title&apos;,</span><br><span class="line">                content: &apos;content&apos;</span><br><span class="line">            &#125;],</span><br><span class="line">            currentItem: &apos;&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="样式穿透"><a href="#样式穿透" class="headerlink" title="样式穿透"></a>样式穿透</h3><p>在开发中修改第三方组件样式是很常见，但由于 scoped 属性的样式隔离，可能需要去除 scoped 或是另起一个 style 。这些做法都会带来副作用（组件样式污染、不够优雅），样式穿透在css预处理器中使用才生效。<br>我们可以使用 &gt;&gt;&gt; 或 /deep/ 解决这一问题:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;style scoped&gt;</span><br><span class="line">外层 &gt;&gt;&gt; .el-checkbox &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  font-size: 26px;</span><br><span class="line"></span><br><span class="line">  .el-checkbox__label &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line">&lt;style scoped&gt;</span><br><span class="line">/deep/ .el-checkbox &#123;</span><br><span class="line">  display: block;</span><br><span class="line">  font-size: 26px;</span><br><span class="line"></span><br><span class="line">  .el-checkbox__label &#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h3 id="watch高阶使用"><a href="#watch高阶使用" class="headerlink" title="watch高阶使用"></a>watch高阶使用</h3><h4 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h4><p>watch 是在监听属性改变时才会触发，有些时候，我们希望在组件创建后 watch 能够立即执行<br>可能想到的的方法就是在 create 生命周期中调用一次，但这样的写法不优雅，或许我们可以使用这样的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            name: &apos;Joe&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        name: &#123;</span><br><span class="line">            handler: &apos;sayName&apos;,</span><br><span class="line">            immediate: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sayName() &#123;</span><br><span class="line">            console.log(this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h4><p>在监听对象时，对象内部的属性被改变时无法触发 watch ，我们可以为其设置深度监听</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        studen: &#123;</span><br><span class="line">            name: &apos;Joe&apos;,</span><br><span class="line">            skill: &#123;</span><br><span class="line">                run: &#123;</span><br><span class="line">                    speed: &apos;fast&apos;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        studen: &#123;</span><br><span class="line">            handler: &apos;sayName&apos;,</span><br><span class="line">            deep: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sayName() &#123;</span><br><span class="line">            console.log(this.studen)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="触发监听执行多个方法"><a href="#触发监听执行多个方法" class="headerlink" title="触发监听执行多个方法"></a>触发监听执行多个方法</h4><p>使用数组可以设置多项，形式包括字符串、函数、对象</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        name: &apos;Joe&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        name: [</span><br><span class="line">            &apos;sayName1&apos;,</span><br><span class="line">            function(newVal, oldVal) &#123;</span><br><span class="line">                this.sayName2()</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                handler: &apos;sayName3&apos;,</span><br><span class="line">                immaediate: true</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        sayName1() &#123;</span><br><span class="line">            console.log(&apos;sayName1==&gt;&apos;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        sayName2() &#123;</span><br><span class="line">            console.log(&apos;sayName2==&gt;&apos;, this.name)</span><br><span class="line">        &#125;,</span><br><span class="line">        sayName3() &#123;</span><br><span class="line">            console.log(&apos;sayName3==&gt;&apos;, this.name)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="watch监听多个变量"><a href="#watch监听多个变量" class="headerlink" title="watch监听多个变量"></a>watch监听多个变量</h3><p>watch本身无法监听多个变量。但我们可以将需要监听的多个变量通过计算属性返回对象，再监听这个对象来实现“监听多个变量”</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            msg1: &apos;apple&apos;,</span><br><span class="line">            msg2: &apos;banana&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    compouted: &#123;</span><br><span class="line">        msgObj() &#123;</span><br><span class="line">            const &#123; msg1, msg2 &#125; = this</span><br><span class="line">            return &#123;</span><br><span class="line">                msg1,</span><br><span class="line">                msg2</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    watch: &#123;</span><br><span class="line">        msgObj: &#123;</span><br><span class="line">            handler(newVal, oldVal) &#123;</span><br><span class="line">                if (newVal.msg1 != oldVal.msg1) &#123;</span><br><span class="line">                    console.log(&apos;msg1 is change&apos;)</span><br><span class="line">                &#125;</span><br><span class="line">                if (newVal.msg2 != oldVal.msg2) &#123;</span><br><span class="line">                    console.log(&apos;msg2 is change&apos;)</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            deep: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件参数-event"><a href="#事件参数-event" class="headerlink" title="事件参数$event"></a>事件参数$event</h3><p>$event 是事件对象的特殊变量，在一些场景能给我们实现复杂功能提供更多可用的参数</p>
<h4 id="原生事件"><a href="#原生事件" class="headerlink" title="原生事件"></a>原生事件</h4><p>在原生事件中表现和默认的事件对象相同</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;input type=&quot;text&quot; @input=&quot;inputHandler(&apos;hello&apos;, $event)&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        inputHandler(msg, e) &#123;</span><br><span class="line">            console.log(e.target.value)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="自定义事件"><a href="#自定义事件" class="headerlink" title="自定义事件"></a>自定义事件</h4><p>在自定义事件中表现为捕获从子组件抛出的值<br>my-item.vue :</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        customEvent() &#123;</span><br><span class="line">            this.$emit(&apos;custom-event&apos;, &apos;some value&apos;)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;my-item v-for=&quot;(item, index) in list&quot; @custom-event=&quot;customEvent(index, $event)&quot;&gt;</span><br><span class="line">            &lt;/my-list&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    methods: &#123;</span><br><span class="line">        customEvent(index, e) &#123;</span><br><span class="line">            console.log(e) // &apos;some value&apos;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义组件双向绑定"><a href="#自定义组件双向绑定" class="headerlink" title="自定义组件双向绑定"></a>自定义组件双向绑定</h3><p>组件 model 选项:<br>允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。<br>input 默认作为双向绑定的更新事件，通过 $emit 可以更新绑定的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-switch v-model=&quot;val&quot;&gt;&lt;/my-switch&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">            type: Boolean,</span><br><span class="line">            default: false</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        switchChange(val) &#123;</span><br><span class="line">            this.$emit(&apos;input&apos;, val)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改组件的 model 选项，自定义绑定的变量和事件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;my-switch v-model=&quot;num&quot; value=&quot;some value&quot;&gt;&lt;/my-switch&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">    model: &#123;</span><br><span class="line">        prop: &apos;num&apos;,</span><br><span class="line">        event: &apos;update&apos;</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">        value: &#123;</span><br><span class="line">            type: String,</span><br><span class="line">            default: &apos;&apos;</span><br><span class="line">        &#125;,</span><br><span class="line">        num: &#123;</span><br><span class="line">            type: Number,</span><br><span class="line">            default: 0</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        numChange() &#123;</span><br><span class="line">            this.$emit(&apos;update&apos;, this.num++)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="监听组件生命周期"><a href="#监听组件生命周期" class="headerlink" title="监听组件生命周期"></a>监听组件生命周期</h3><p>通常我们监听组件生命周期会使用 $emit ，父组件接收事件来进行通知<br>子组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.$emit(&apos;listenMounted&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>父组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;List @listenMounted=&quot;listenMounted&quot; /&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<p>其实还有一种简洁的方法，使用 @hook 即可监听组件生命周期，组件内无需做任何改变。同样的， created 、 updated 等也可以使用此方法。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;List @hook:mounted=&quot;listenMounted&quot; /&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="程序化的事件侦听器"><a href="#程序化的事件侦听器" class="headerlink" title="程序化的事件侦听器"></a>程序化的事件侦听器</h3><p>比如，在页面挂载时定义计时器，需要在页面销毁时清除定时器。这看起来没什么问题。但仔细一看 this.timer 唯一的作用只是为了能够在 beforeDestroy 内取到计时器序号，除此之外没有任何用处。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.timer = setInterval(() =&gt; &#123;</span><br><span class="line">            console.log(Date.now())</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy() &#123;</span><br><span class="line">        clearInterval(this.timer)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。<br>我们可以通过 $on 或 $once 监听页面生命周期销毁来解决这个问题：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default &#123;</span><br><span class="line">    mounted() &#123;</span><br><span class="line">        this.creatInterval(&apos;hello&apos;)</span><br><span class="line">        this.creatInterval(&apos;world&apos;)</span><br><span class="line">    &#125;,</span><br><span class="line">    creatInterval(msg) &#123;</span><br><span class="line">        let timer = setInterval(() =&gt; &#123;</span><br><span class="line">            console.log(msg)</span><br><span class="line">        &#125;, 1000)</span><br><span class="line">        this.$once(&apos;hook:beforeDestroy&apos;, function() &#123;</span><br><span class="line">            clearInterval(timer)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>使用这个方法后，即使我们同时创建多个计时器，也不影响效果。因为它们会在页面销毁后程序化的自主清除。</p>
<h3 id="手动挂载组件"><a href="#手动挂载组件" class="headerlink" title="手动挂载组件"></a>手动挂载组件</h3><p>在一些需求中，手动挂载组件能够让我们实现起来更加优雅。比如一个弹窗组件，最理想的用法是通过命令式调用，就像 elementUI 的 this.$message 。而不是在模板中通过状态切换，这种实现真的很糟糕。<br>先来个最简单的例子：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Message from &apos;./Message.vue&apos;</span><br><span class="line"></span><br><span class="line">// 构造子类</span><br><span class="line">let MessageConstructor = Vue.extend(Message)</span><br><span class="line">// 实例化组件</span><br><span class="line">let messageInstance = new MessageConstructor()</span><br><span class="line">// $mount可以传入选择器字符串，表示挂载到该选择器</span><br><span class="line">// 如果不传入选择器，将渲染为文档之外的的元素，你可以想象成 document.createElement()在内存中生成dom</span><br><span class="line">messageInstance.$mount()</span><br><span class="line">// messageInstance.$el获取的是dom元素</span><br><span class="line">document.body.appendChild(messageInstance.$el)</span><br></pre></td></tr></table></figure>

<p>下面实现一个简易的 message 弹窗组件<br>Message/index.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div class=&quot;wrap&quot;&gt;</span><br><span class="line">        &lt;div class=&quot;message&quot; :class=&quot;item.type&quot; v-for=&quot;item in notices&quot; :key=&quot;item._name&quot;&gt;</span><br><span class="line">            &lt;div class=&quot;content&quot;&gt;&#123;&#123;item.content&#125;&#125;&lt;/div&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">// 默认选项</span><br><span class="line">const DefaultOptions = &#123;</span><br><span class="line">    duration: 1500,</span><br><span class="line">    type: &apos;info&apos;,</span><br><span class="line">    content: &apos;这是一条提示信息！&apos;,</span><br><span class="line">&#125;</span><br><span class="line">let mid = 0</span><br><span class="line">export default &#123;</span><br><span class="line">    data() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            notices: []</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        add(notice = &#123;&#125;) &#123;</span><br><span class="line">            // name标识 用于移除弹窗</span><br><span class="line">            let _name = this.getName()</span><br><span class="line">            // 合并选项</span><br><span class="line">            notice = Object.assign(&#123;</span><br><span class="line">                _name</span><br><span class="line">            &#125;, DefaultOptions, notice)</span><br><span class="line"></span><br><span class="line">            this.notices.push(notice)</span><br><span class="line"></span><br><span class="line">            setTimeout(() =&gt; &#123;</span><br><span class="line">                this.removeNotice(_name)</span><br><span class="line">            &#125;, notice.duration)</span><br><span class="line">        &#125;,</span><br><span class="line">        getName() &#123;</span><br><span class="line">            return &apos;msg_&apos; + (mid++)</span><br><span class="line">        &#125;,</span><br><span class="line">        removeNotice(_name) &#123;</span><br><span class="line">            let index = this.notices.findIndex(item =&gt; item._name === _name)</span><br><span class="line">            this.notices.splice(index, 1)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">.wrap &#123;</span><br><span class="line">    position: fixed;</span><br><span class="line">    top: 50px;</span><br><span class="line">    left: 50%;</span><br><span class="line">    display: flex;</span><br><span class="line">    flex-direction: column;</span><br><span class="line">    align-items: center;</span><br><span class="line">    transform: translateX(-50%);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message &#123;</span><br><span class="line">    --borderWidth: 3px;</span><br><span class="line">    min-width: 240px;</span><br><span class="line">    max-width: 500px;</span><br><span class="line">    margin-bottom: 10px;</span><br><span class="line">    border-radius: 3px;</span><br><span class="line">    box-shadow: 0 0 8px #ddd;</span><br><span class="line">    overflow: hidden;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.content &#123;</span><br><span class="line">    padding: 8px;</span><br><span class="line">    line-height: 1.3;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message.info &#123;</span><br><span class="line">    border-left: var(--borderWidth) solid #909399;</span><br><span class="line">    background: #F4F4F5;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message.success &#123;</span><br><span class="line">    border-left: var(--borderWidth) solid #67C23A;</span><br><span class="line">    background: #F0F9EB;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message.error &#123;</span><br><span class="line">    border-left: var(--borderWidth) solid #F56C6C;</span><br><span class="line">    background: #FEF0F0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">.message.warning &#123;</span><br><span class="line">    border-left: var(--borderWidth) solid #E6A23C;</span><br><span class="line">    background: #FDF6EC;</span><br><span class="line">&#125;</span><br><span class="line">Message/index.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line">import Index from &apos;./index.vue&apos;</span><br><span class="line"></span><br><span class="line">let messageInstance = null</span><br><span class="line">let MessageConstructor = Vue.extend(Index)</span><br><span class="line"></span><br><span class="line">let init = () =&gt; &#123;</span><br><span class="line">    messageInstance = new MessageConstructor()</span><br><span class="line">    messageInstance.$mount()</span><br><span class="line">    document.body.appendChild(messageInstance.$el)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">let caller = (options) =&gt; &#123;</span><br><span class="line">    if (!messageInstance) &#123;</span><br><span class="line">        init(options)</span><br><span class="line">    &#125;</span><br><span class="line">    messageInstance.add(options)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">    // 返回 install 函数 用于 Vue.use 注册</span><br><span class="line">    install(vue) &#123;</span><br><span class="line">        vue.prototype.$message = caller</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>main.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import Message from &apos;@/components/Message/index.js&apos;</span><br><span class="line"></span><br><span class="line">Vue.use(Message)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用</span><br></pre></td></tr></table></figure>

<p>this.$message({<br>    type: ‘success’,<br>    content: ‘成功信息提示’,<br>    duration: 3000<br>})</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 路由参数解耦</span><br><span class="line">一般在组件内使用路由参数，大多数人会这样做：</span><br></pre></td></tr></table></figure>

<p>export default {<br>    methods: {<br>        getParamsId() {<br>            return this.$route.params.id<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">在组件中使用 $route 会使之与其对应路由形成高度耦合，从而使组件只能在某些特定的 URL 上使用，限制了其灵活性。</span><br><span class="line">正确的做法是通过 props 解耦</span><br></pre></td></tr></table></figure>

<p>const router = new VueRouter({<br>    routes: [{<br>        path: ‘/user/:id’,<br>        component: User,<br>        props: true<br>    }]<br>})</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">将路由的 props 属性设置为 true 后，组件内可通过 props 接收到 params 参数</span><br></pre></td></tr></table></figure>

<p>export default {<br>    props: [‘id’],<br>    methods: {<br>        getParamsId() {<br>            return this.id<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">另外你还可以通过函数模式来返回 props</span><br></pre></td></tr></table></figure>

<p>const router = new VueRouter({<br>    routes: [{<br>        path: ‘/user/:id’,<br>        component: User,<br>        props: (route) =&gt; ({<br>            id: route.query.id<br>        })<br>    }]<br>})</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 函数式组件</span><br><span class="line">函数式组件是无状态，它无法实例化，没有任何的生命周期和方法。创建函数式组件也很简单，只需要在模板添加 functional 声明即可。一般适合只依赖于外部数据的变化而变化的组件，因其轻量，渲染性能也会有所提高。</span><br><span class="line">组件需要的一切都是通过 context 参数传递。它是一个上下文对象，具体属性查看文档。这里 props 是一个包含所有绑定属性的对象。</span><br><span class="line">函数式组件</span><br></pre></td></tr></table></figure>

<template functional>
    <div class="list">
        <div class="item" v-for="item in props.list" :key="item.id" @click="props.itemClick(item)">
            <p></p>
            <p></p>
        </div>
    </div>
</template>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父组件使用</span><br></pre></td></tr></table></figure>

<template>
    <div>
        <list :list="list" :itemclick="item => (currentItem = item)">
    </list></div>
</template>
import List from '@/components/List.vue'
export default {
    components: {
        List
    },
    data() {
        return {
            list: [{
                title: 'title',
                content: 'content'
            }],
            currentItem: ''
        }
    }
}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 样式穿透</span><br><span class="line">在开发中修改第三方组件样式是很常见，但由于 scoped 属性的样式隔离，可能需要去除 scoped 或是另起一个 style 。这些做法都会带来副作用（组件样式污染、不够优雅），样式穿透在css预处理器中使用才生效。</span><br><span class="line">我们可以使用 &gt;&gt;&gt; 或 /deep/ 解决这一问题:</span><br></pre></td></tr></table></figure>

<style scoped>
外层 >>> .el-checkbox {
  display: block;
  font-size: 26px;

  .el-checkbox__label {
    font-size: 16px;
  }
}
</style>
<style scoped>
/deep/ .el-checkbox {
  display: block;
  font-size: 26px;

  .el-checkbox__label {
    font-size: 16px;
  }
}
</style>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### watch高阶使用</span><br><span class="line">#### 立即执行</span><br><span class="line">watch 是在监听属性改变时才会触发，有些时候，我们希望在组件创建后 watch 能够立即执行</span><br><span class="line">可能想到的的方法就是在 create 生命周期中调用一次，但这样的写法不优雅，或许我们可以使用这样的方法</span><br></pre></td></tr></table></figure>

<p>export default {<br>    data() {<br>        return {<br>            name: ‘Joe’<br>        }<br>    },<br>    watch: {<br>        name: {<br>            handler: ‘sayName’,<br>            immediate: true<br>        }<br>    },<br>    methods: {<br>        sayName() {<br>            console.log(this.name)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 深度监听</span><br><span class="line">在监听对象时，对象内部的属性被改变时无法触发 watch ，我们可以为其设置深度监听</span><br></pre></td></tr></table></figure>

<p>export default {<br>    data: {<br>        studen: {<br>            name: ‘Joe’,<br>            skill: {<br>                run: {<br>                    speed: ‘fast’<br>                }<br>            }<br>        }<br>    },<br>    watch: {<br>        studen: {<br>            handler: ‘sayName’,<br>            deep: true<br>        }<br>    },<br>    methods: {<br>        sayName() {<br>            console.log(this.studen)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 触发监听执行多个方法</span><br><span class="line">使用数组可以设置多项，形式包括字符串、函数、对象</span><br></pre></td></tr></table></figure>

<p>export default {<br>    data: {<br>        name: ‘Joe’<br>    },<br>    watch: {<br>        name: [<br>            ‘sayName1’,<br>            function(newVal, oldVal) {<br>                this.sayName2()<br>            },<br>            {<br>                handler: ‘sayName3’,<br>                immaediate: true<br>            }<br>        ]<br>    },<br>    methods: {<br>        sayName1() {<br>            console.log(‘sayName1==&gt;’, this.name)<br>        },<br>        sayName2() {<br>            console.log(‘sayName2==&gt;’, this.name)<br>        },<br>        sayName3() {<br>            console.log(‘sayName3==&gt;’, this.name)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### watch监听多个变量</span><br><span class="line">watch本身无法监听多个变量。但我们可以将需要监听的多个变量通过计算属性返回对象，再监听这个对象来实现“监听多个变量”</span><br></pre></td></tr></table></figure>

<p>export default {<br>    data() {<br>        return {<br>            msg1: ‘apple’,<br>            msg2: ‘banana’<br>        }<br>    },<br>    compouted: {<br>        msgObj() {<br>            const { msg1, msg2 } = this<br>            return {<br>                msg1,<br>                msg2<br>            }<br>        }<br>    },<br>    watch: {<br>        msgObj: {<br>            handler(newVal, oldVal) {<br>                if (newVal.msg1 != oldVal.msg1) {<br>                    console.log(‘msg1 is change’)<br>                }<br>                if (newVal.msg2 != oldVal.msg2) {<br>                    console.log(‘msg2 is change’)<br>                }<br>            },<br>            deep: true<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 事件参数$event</span><br><span class="line">$event 是事件对象的特殊变量，在一些场景能给我们实现复杂功能提供更多可用的参数</span><br><span class="line">#### 原生事件</span><br><span class="line">在原生事件中表现和默认的事件对象相同</span><br></pre></td></tr></table></figure>

<template>
    <div>
        <input type="text" @input="inputHandler('hello', $event)">
    </div>
</template>
export default {
    methods: {
        inputHandler(msg, e) {
            console.log(e.target.value)
        }
    }
}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">#### 自定义事件</span><br><span class="line">在自定义事件中表现为捕获从子组件抛出的值</span><br><span class="line">my-item.vue :</span><br></pre></td></tr></table></figure>

<p>export default {<br>    methods: {<br>        customEvent() {<br>            this.$emit(‘custom-event’, ‘some value’)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">App.vue</span><br></pre></td></tr></table></figure>

<template>
    <div>
        <my-item v-for="(item, index) in list" @custom-event="customEvent(index, $event)">
            
    </my-item></div>
</template>
export default {
    methods: {
        customEvent(index, e) {
            console.log(e) // 'some value'
        }
    }
}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 自定义组件双向绑定</span><br><span class="line">组件 model 选项:</span><br><span class="line">允许一个自定义组件在使用 v-model 时定制 prop 和 event。默认情况下，一个组件上的 v-model 会把 value 用作 prop 且把 input 用作 event，但是一些输入类型比如单选框和复选框按钮可能想使用 value prop 来达到不同的目的。使用 model 选项可以回避这些情况产生的冲突。</span><br><span class="line">input 默认作为双向绑定的更新事件，通过 $emit 可以更新绑定的值</span><br></pre></td></tr></table></figure>

<p><my-switch v-model="val"></my-switch><br>export default {<br>    props: {<br>        value: {<br>            type: Boolean,<br>            default: false<br>        }<br>    },<br>    methods: {<br>        switchChange(val) {<br>            this.$emit(‘input’, val)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">修改组件的 model 选项，自定义绑定的变量和事件</span><br></pre></td></tr></table></figure>

<p><my-switch v-model="num" value="some value"></my-switch><br>export default {<br>    model: {<br>        prop: ‘num’,<br>        event: ‘update’<br>    },<br>    props: {<br>        value: {<br>            type: String,<br>            default: ‘’<br>        },<br>        num: {<br>            type: Number,<br>            default: 0<br>        }<br>    },<br>    methods: {<br>        numChange() {<br>            this.$emit(‘update’, this.num++)<br>        }<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">### 监听组件生命周期</span><br><span class="line">通常我们监听组件生命周期会使用 $emit ，父组件接收事件来进行通知</span><br><span class="line">子组件</span><br></pre></td></tr></table></figure>

<p>export default {<br>    mounted() {<br>        this.$emit(‘listenMounted’)<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">父组件</span><br></pre></td></tr></table></figure>

<template>
    <div>
        <list @listenmounted="listenMounted">
    </list></div>
</template>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">其实还有一种简洁的方法，使用 @hook 即可监听组件生命周期，组件内无需做任何改变。同样的， created 、 updated 等也可以使用此方法。</span><br></pre></td></tr></table></figure>

<template>
    <list @hook:mounted="listenMounted">
</list></template>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">### 程序化的事件侦听器</span><br><span class="line">比如，在页面挂载时定义计时器，需要在页面销毁时清除定时器。这看起来没什么问题。但仔细一看 this.timer 唯一的作用只是为了能够在 beforeDestroy 内取到计时器序号，除此之外没有任何用处。</span><br></pre></td></tr></table></figure>

<p>export default {<br>    mounted() {<br>        this.timer = setInterval(() =&gt; {<br>            console.log(Date.now())<br>        }, 1000)<br>    },<br>    beforeDestroy() {<br>        clearInterval(this.timer)<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。</span><br><span class="line">我们可以通过 $on 或 $once 监听页面生命周期销毁来解决这个问题：</span><br></pre></td></tr></table></figure>

<p>export default {<br>    mounted() {<br>        this.creatInterval(‘hello’)<br>        this.creatInterval(‘world’)<br>    },<br>    creatInterval(msg) {<br>        let timer = setInterval(() =&gt; {<br>            console.log(msg)<br>        }, 1000)<br>        this.$once(‘hook:beforeDestroy’, function() {<br>            clearInterval(timer)<br>        })<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">使用这个方法后，即使我们同时创建多个计时器，也不影响效果。因为它们会在页面销毁后程序化的自主清除。</span><br><span class="line"></span><br><span class="line">### 手动挂载组件</span><br><span class="line">在一些需求中，手动挂载组件能够让我们实现起来更加优雅。比如一个弹窗组件，最理想的用法是通过命令式调用，就像 elementUI 的 this.$message 。而不是在模板中通过状态切换，这种实现真的很糟糕。</span><br><span class="line">先来个最简单的例子：</span><br></pre></td></tr></table></figure>

<p>import Vue from ‘vue’<br>import Message from ‘./Message.vue’</p>
<p>// 构造子类<br>let MessageConstructor = Vue.extend(Message)<br>// 实例化组件<br>let messageInstance = new MessageConstructor()<br>// $mount可以传入选择器字符串，表示挂载到该选择器<br>// 如果不传入选择器，将渲染为文档之外的的元素，你可以想象成 document.createElement()在内存中生成dom<br>messageInstance.$mount()<br>// messageInstance.$el获取的是dom元素<br>document.body.appendChild(messageInstance.$el)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">下面实现一个简易的 message 弹窗组件</span><br><span class="line">Message/index.vue</span><br></pre></td></tr></table></figure>

<template>
    <div class="wrap">
        <div class="message" :class="item.type" v-for="item in notices" :key="item._name">
            <div class="content"></div>
        </div>
    </div>
</template>
// 默认选项
const DefaultOptions = {
    duration: 1500,
    type: 'info',
    content: '这是一条提示信息！',
}
let mid = 0
export default {
    data() {
        return {
            notices: []
        }
    },
    methods: {
        add(notice = {}) {
            // name标识 用于移除弹窗
            let _name = this.getName()
            // 合并选项
            notice = Object.assign({
                _name
            }, DefaultOptions, notice)

<pre><code>        this.notices.push(notice)

        setTimeout(() =&gt; {
            this.removeNotice(_name)
        }, notice.duration)
    },
    getName() {
        return &apos;msg_&apos; + (mid++)
    },
    removeNotice(_name) {
        let index = this.notices.findIndex(item =&gt; item._name === _name)
        this.notices.splice(index, 1)
    }
}</code></pre><p>}<br>.wrap {<br>    position: fixed;<br>    top: 50px;<br>    left: 50%;<br>    display: flex;<br>    flex-direction: column;<br>    align-items: center;<br>    transform: translateX(-50%);<br>}</p>
<p>.message {<br>    –borderWidth: 3px;<br>    min-width: 240px;<br>    max-width: 500px;<br>    margin-bottom: 10px;<br>    border-radius: 3px;<br>    box-shadow: 0 0 8px #ddd;<br>    overflow: hidden;<br>}</p>
<p>.content {<br>    padding: 8px;<br>    line-height: 1.3;<br>}</p>
<p>.message.info {<br>    border-left: var(–borderWidth) solid #909399;<br>    background: #F4F4F5;<br>}</p>
<p>.message.success {<br>    border-left: var(–borderWidth) solid #67C23A;<br>    background: #F0F9EB;<br>}</p>
<p>.message.error {<br>    border-left: var(–borderWidth) solid #F56C6C;<br>    background: #FEF0F0;<br>}</p>
<p>.message.warning {<br>    border-left: var(–borderWidth) solid #E6A23C;<br>    background: #FDF6EC;<br>}<br>Message/index.js<br>import Vue from ‘vue’<br>import Index from ‘./index.vue’</p>
<p>let messageInstance = null<br>let MessageConstructor = Vue.extend(Index)</p>
<p>let init = () =&gt; {<br>    messageInstance = new MessageConstructor()<br>    messageInstance.$mount()<br>    document.body.appendChild(messageInstance.$el)<br>}</p>
<p>let caller = (options) =&gt; {<br>    if (!messageInstance) {<br>        init(options)<br>    }<br>    messageInstance.add(options)<br>}</p>
<p>export default {<br>    // 返回 install 函数 用于 Vue.use 注册<br>    install(vue) {<br>        vue.prototype.$message = caller<br>    }<br>}</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">main.js</span><br></pre></td></tr></table></figure>

<p>import Message from ‘@/components/Message/index.js’</p>
<p>Vue.use(Message)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">```</span><br><span class="line">使用</span><br></pre></td></tr></table></figure>

<p>this.$message({<br>    type: ‘success’,<br>    content: ‘成功信息提示’,<br>    duration: 3000<br>})</p>
<pre><code></code></pre>]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue开发的36个技巧</title>
    <url>/2020/07/13/Vue%E5%BC%80%E5%8F%91%E7%9A%8436%E4%B8%AA%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<h3 id="1-require-context"><a href="#1-require-context" class="headerlink" title="1.require.context()"></a>1.require.context()</h3><p>1.场景:如页面需要导入多个组件,原始写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import titleCom from &apos;@/components/home/titleCom&apos;</span><br><span class="line">import bannerCom from &apos;@/components/home/bannerCom&apos;</span><br><span class="line">import cellCom from &apos;@/components/home/cellCom&apos;</span><br><span class="line">components:&#123;titleCom,bannerCom,cellCom&#125;</span><br></pre></td></tr></table></figure>

<a id="more"></a>    
<p>2.这样就写了大量重复的代码,利用 require.context 可以写成</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const path = require(&apos;path&apos;)</span><br><span class="line">const files = require.context(&apos;@/components/home&apos;, false, /\.vue$/)</span><br><span class="line">const modules = &#123;&#125;</span><br><span class="line">files.keys().forEach(key =&gt; &#123;</span><br><span class="line">  const name = path.basename(key, &apos;.vue&apos;)</span><br><span class="line">  modules[name] = files(key).default || files(key)</span><br><span class="line">&#125;)</span><br><span class="line">components:modules</span><br></pre></td></tr></table></figure>

<p>这样不管页面引入多少组件,都可以使用这个方法<br>3.API 方法<br>实际上是 webpack 的方法,vue 工程一般基于 webpack,所以可以使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">require.context(directory,useSubdirectories,regExp)</span><br><span class="line">接收三个参数:</span><br><span class="line">directory：说明需要检索的目录</span><br><span class="line">useSubdirectories：是否检索子目录</span><br><span class="line">regExp: 匹配文件的正则表达式,一般是文件名</span><br></pre></td></tr></table></figure>

<h3 id="2-watch"><a href="#2-watch" class="headerlink" title="2.watch"></a>2.watch</h3><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><p>场景:表格初始进来需要调查询接口getList(),然后input 改变会重新查询</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">created()&#123;</span><br><span class="line">  this.getList()</span><br><span class="line">&#125;,</span><br><span class="line">watch: &#123;</span><br><span class="line">  inpVal()&#123;</span><br><span class="line">    this.getList()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="立即执行"><a href="#立即执行" class="headerlink" title="立即执行"></a>立即执行</h4><p>可以直接利用watch的immediate和handler属性简写</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch: &#123;</span><br><span class="line">  inpVal:&#123;</span><br><span class="line">    handler: &apos;getList&apos;,</span><br><span class="line">      immediate: true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="深度监听"><a href="#深度监听" class="headerlink" title="深度监听"></a>深度监听</h4><p>watch 的 deep 属性,深度监听,也就是监听复杂数据类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">watch:&#123;</span><br><span class="line">  inpValObj:&#123;</span><br><span class="line">    handler(newVal,oldVal)&#123;</span><br><span class="line">      console.log(newVal)</span><br><span class="line">      console.log(oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    deep:true</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="14种组件通讯"><a href="#14种组件通讯" class="headerlink" title="14种组件通讯"></a>14种组件通讯</h3><h4 id="props"><a href="#props" class="headerlink" title="props"></a>props</h4><p>这个应该非常属性,就是父传子的属性;<br>props 值可以是一个数组或对象;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 数组:不建议使用</span><br><span class="line">props:[]</span><br><span class="line"></span><br><span class="line">// 对象</span><br><span class="line">props:&#123;</span><br><span class="line"> inpVal:&#123;</span><br><span class="line">  type:Number, //传入值限定类型</span><br><span class="line">  // type 值可为String,Number,Boolean,Array,Object,Date,Function,Symbol</span><br><span class="line">  // type 还可以是一个自定义的构造函数，并且通过 instanceof 来进行检查确认</span><br><span class="line">  required: true, //是否必传</span><br><span class="line">  default:200,  //默认值,对象或数组默认值必须从一个工厂函数获取如 default:()=&gt;[]</span><br><span class="line">  validator:(value) &#123;</span><br><span class="line">    // 这个值必须匹配下列字符串中的一个</span><br><span class="line">    return [&apos;success&apos;, &apos;warning&apos;, &apos;danger&apos;].indexOf(value) !== -1</span><br><span class="line">  &#125;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="emit"><a href="#emit" class="headerlink" title="$emit"></a>$emit</h4><p>这个也应该非常常见,触发子组件触发父组件给自己绑定的事件,其实就是子传父的方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home @title=&quot;title&quot;&gt;</span><br><span class="line">// 子组件</span><br><span class="line">this.$emit(&apos;title&apos;,[&#123;title:&apos;这是title&apos;&#125;])</span><br></pre></td></tr></table></figure>

<h4 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h4><p>1.这个也是很常用的,vuex 是一个状态管理器<br>2.是一个独立的插件,适合数据共享多的项目里面,因为如果只是简单的通讯,使用起来会比较重<br>3.API</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">state:定义存贮数据的仓库 ,可通过this.$store.state 或mapState访问</span><br><span class="line">getter:获取 store 值,可认为是 store 的计算属性,可通过this.$store.getter 或</span><br><span class="line">       mapGetters访问</span><br><span class="line">mutation:同步改变 store 值,为什么会设计成同步,因为mutation是直接改变 store 值,</span><br><span class="line">         vue 对操作进行了记录,如果是异步无法追踪改变.可通过mapMutations调用</span><br><span class="line">action:异步调用函数执行mutation,进而改变 store 值,可通过 this.$dispatch或mapActions</span><br><span class="line">       访问</span><br><span class="line">modules:模块,如果状态过多,可以拆分成模块,最后在入口通过...解构引入</span><br></pre></td></tr></table></figure>

<h4 id="listeners"><a href="#listeners" class="headerlink" title="listeners"></a>listeners</h4><p>2.4.0 新增<br>这两个是不常用属性,但是高级用法很常见;<br>1.场景如果父传子有很多值那么在子组件需要定义多个解决attrs获取子传父中未在 props 定义的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home title=&quot;这是标题&quot; width=&quot;80&quot; height=&quot;80&quot; imgUrl=&quot;imgUrl&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$attrs) //&#123;title: &quot;这是标题&quot;, width: &quot;80&quot;, height: &quot;80&quot;, imgUrl: &quot;imgUrl&quot;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>相对应的如果子组件定义了 props,打印的值就是剔除定义的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">  width: &#123;</span><br><span class="line">    type: String,</span><br><span class="line">    default: &apos;&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$attrs) //&#123;title: &quot;这是标题&quot;, height: &quot;80&quot;, imgUrl: &quot;imgUrl&quot;&#125;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>

<p>2.场景子组件需要调用父组件的方法解决父组件的方法可以通过listeners” 传入内部组件——在创建更高层次的组件时非常有用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home @change=&quot;change&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$listeners) //即可拿到 change 事件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>如果是孙组件要访问父组件的属性和调用方法,直接一级一级传下去就可以<br>3.inheritAttrs</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home title=&quot;这是标题&quot; width=&quot;80&quot; height=&quot;80&quot; imgUrl=&quot;imgUrl&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.$attrs) //&#123;title: &quot;这是标题&quot;, width: &quot;80&quot;, height: &quot;80&quot;, imgUrl: &quot;imgUrl&quot;&#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">inheritAttrs默认值为true，true的意思是将父组件中除了props外的属性添加到子组件的根节点上(说明，即使设置为true，子组件仍然可以通过$attr获取到props意外的属性)</span><br><span class="line">将inheritAttrs:false后,属性就不会显示在根节点上了</span><br></pre></td></tr></table></figure>

<h3 id="provide和inject"><a href="#provide和inject" class="headerlink" title="provide和inject"></a>provide和inject</h3><p>2.2.0 新增<br>描述:<br>provide 和 inject 主要为高阶插件/组件库提供用例。并不推荐直接用于应用程序代码中;<br>并且这对选项需要一起使用;<br>以允许一个祖先组件向其所有子孙后代注入一个依赖，不论组件层次有多深，并在起上下游关系成立的时间里始终生效。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//父组件:</span><br><span class="line">provide: &#123; //provide 是一个对象,提供一个属性或方法</span><br><span class="line">  foo: &apos;这是 foo&apos;,</span><br><span class="line">  fooMethod:()=&gt;&#123;</span><br><span class="line">    console.log(&apos;父组件 fooMethod 被调用&apos;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;,</span><br><span class="line"></span><br><span class="line">// 子或者孙子组件</span><br><span class="line">inject: [&apos;foo&apos;,&apos;fooMethod&apos;], //数组或者对象,注入到子组件</span><br><span class="line">mounted() &#123;</span><br><span class="line">  this.fooMethod()</span><br><span class="line">  console.log(this.foo)</span><br><span class="line">&#125;</span><br><span class="line">//在父组件下面所有的子组件都可以利用inject</span><br></pre></td></tr></table></figure>

<h4 id="provide-和-inject-绑定并不是可响应的。这是官方刻意为之的。"><a href="#provide-和-inject-绑定并不是可响应的。这是官方刻意为之的。" class="headerlink" title="provide 和 inject 绑定并不是可响应的。这是官方刻意为之的。"></a>provide 和 inject 绑定并不是可响应的。这是官方刻意为之的。</h4><p>然而，如果你传入了一个可监听的对象，那么其对象的属性还是可响应的,对象是因为是引用类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">//父组件:</span><br><span class="line">provide: &#123; </span><br><span class="line">  foo: &apos;这是 foo&apos;</span><br><span class="line">&#125;,</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.foo=&apos;这是新的 foo&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 子或者孙子组件</span><br><span class="line">inject: [&apos;foo&apos;], </span><br><span class="line">mounted() &#123;</span><br><span class="line">  console.log(this.foo) //子组件打印的还是&apos;这是 foo&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="children"><a href="#children" class="headerlink" title="children"></a>children</h4><p>父实例children:子实例</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$children) </span><br><span class="line">  //可以拿到 一级子组件的属性和方法</span><br><span class="line">  //所以就可以直接改变 data,或者调用 methods 方法</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$parent) //可以拿到 parent 的属性和方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>和parent 并不保证顺序，也不是响应式的<br>只能拿到一级父组件和子组件</p>
<h4 id="refs"><a href="#refs" class="headerlink" title="$refs"></a>$refs</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home ref=&quot;home&quot;/&gt;</span><br><span class="line"></span><br><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$refs.home) //即可拿到子组件的实例,就可以直接操作 data 和 methods</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="root"><a href="#root" class="headerlink" title="$root"></a>$root</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">mounted()&#123;</span><br><span class="line">  console.log(this.$root) //获取根实例,最后所有组件都是挂载到根实例上</span><br><span class="line">  console.log(this.$root.$children[0]) //获取根实例的一级子组件</span><br><span class="line">  console.log(this.$root.$children[0].$children[0]) //获取根实例的二级子组件</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="sync"><a href="#sync" class="headerlink" title=".sync"></a>.sync</h4><p>在 <a href="mailto:vue@1.x" target="_blank" rel="noopener">vue@1.x</a> 的时候曾作为双向绑定功能存在，即子组件可以修改父组件中的值;<br>在 <a href="mailto:vue@2.0" target="_blank" rel="noopener">vue@2.0</a> 的由于违背单项数据流的设计被干掉了;<br>在 <a href="mailto:vue@2.3.0" target="_blank" rel="noopener">vue@2.3.0</a>+ 以上版本又重新引入了这个 .sync 修饰符;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;home :title.sync=&quot;title&quot; /&gt;</span><br><span class="line">//编译时会被扩展为</span><br><span class="line">&lt;home :title=&quot;title&quot;  @update:title=&quot;val =&gt; title = val&quot;/&gt;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">// 所以子组件可以通过$emit 触发 update 方法改变</span><br><span class="line">mounted()&#123;</span><br><span class="line">  this.$emit(&quot;update:title&quot;, &apos;这是新的title&apos;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="v-slot"><a href="#v-slot" class="headerlink" title="v-slot"></a>v-slot</h4><p>2.6.0 新增<br>1.slot,slot-cope,scope 在 2.6.0 中都被废弃,但未被移除<br>2.作用就是将父组件的 template 传入子组件<br>3.插槽分类:<br>A.匿名插槽(也叫默认插槽): 没有命名,有且只有一个;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    &lt;template v-slot:default&gt;</span><br><span class="line">       任意内容</span><br><span class="line">       &lt;p&gt;我是匿名插槽 &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;slot&gt;我是默认值&lt;/slot&gt;</span><br><span class="line">//v-slot:default写上感觉和具名写法比较统一,容易理解,也可以不用写</span><br></pre></td></tr></table></figure>

<p>B.具名插槽: 相对匿名插槽组件slot标签带name命名的;</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;todo-list&gt; </span><br><span class="line">    &lt;template v-slot:todo&gt;</span><br><span class="line">       任意内容</span><br><span class="line">       &lt;p&gt;我是匿名插槽 &lt;/p&gt;</span><br><span class="line">    &lt;/template&gt;</span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line"></span><br><span class="line">//子组件</span><br><span class="line">&lt;slot name=&quot;todo&quot;&gt;我是默认值&lt;/slot&gt;</span><br></pre></td></tr></table></figure>

<p>C.作用域插槽: 子组件内数据可以被父页面拿到(解决了数据只能从父页面传递给子组件)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 父组件</span><br><span class="line">&lt;todo-list&gt;</span><br><span class="line"> &lt;template v-slot:todo=&quot;slotProps&quot; &gt;</span><br><span class="line">   &#123;&#123;slotProps.user.firstName&#125;&#125;</span><br><span class="line"> &lt;/template&gt; </span><br><span class="line">&lt;/todo-list&gt; </span><br><span class="line">//slotProps 可以随意命名</span><br><span class="line">//slotProps 接取的是子组件标签slot上属性数据的集合所有v-bind:user=&quot;user&quot;</span><br><span class="line"></span><br><span class="line">// 子组件</span><br><span class="line">&lt;slot name=&quot;todo&quot; :user=&quot;user&quot; :test=&quot;test&quot;&gt;</span><br><span class="line">    &#123;&#123; user.lastName &#125;&#125;</span><br><span class="line"> &lt;/slot&gt; </span><br><span class="line">data() &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      user:&#123;</span><br><span class="line">        lastName:&quot;Zhang&quot;,</span><br><span class="line">        firstName:&quot;yue&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      test:[1,2,3,4]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">// &#123;&#123; user.lastName &#125;&#125;是默认数据  v-slot:todo 当父页面没有(=&quot;slotProps&quot;)</span><br></pre></td></tr></table></figure>

<h4 id="EventBus"><a href="#EventBus" class="headerlink" title="EventBus"></a>EventBus</h4><p>1.就是声明一个全局Vue实例变量 EventBus , 把所有的通信数据，事件监听都存储到这个变量上;<br>2.类似于 Vuex。但这种方式只适用于极小的项目<br>3.原理就是利用和emit 并实例化一个全局 vue 实现数据共享</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在 main.js</span><br><span class="line">Vue.prototype.$eventBus=new Vue()</span><br><span class="line"></span><br><span class="line">// 传值组件</span><br><span class="line">this.$eventBus.$emit(&apos;eventTarget&apos;,&apos;这是eventTarget传过来的值&apos;)</span><br><span class="line"></span><br><span class="line">// 接收组件</span><br><span class="line">this.$eventBus.$on(&quot;eventTarget&quot;,v=&gt;&#123;</span><br><span class="line">  console.log(&apos;eventTarget&apos;,v);//这是eventTarget传过来的值</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>4.可以实现平级,嵌套组件传值,但是对应的事件名eventTarget必须是全局唯一的</p>
<h4 id="broadcast和dispatch"><a href="#broadcast和dispatch" class="headerlink" title="broadcast和dispatch"></a>broadcast和dispatch</h4><p>vue 1.x 有这两个方法,事件广播和派发,但是 vue 2.x 删除了<br>下面是对两个方法进行的封装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">function broadcast(componentName, eventName, params) &#123;</span><br><span class="line">  this.$children.forEach(child =&gt; &#123;</span><br><span class="line">    var name = child.$options.componentName;</span><br><span class="line"></span><br><span class="line">    if (name === componentName) &#123;</span><br><span class="line">      child.$emit.apply(child, [eventName].concat(params));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      broadcast.apply(child, [componentName, eventName].concat(params));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line">export default &#123;</span><br><span class="line">  methods: &#123;</span><br><span class="line">    dispatch(componentName, eventName, params) &#123;</span><br><span class="line">      var parent = this.$parent;</span><br><span class="line">      var name = parent.$options.componentName;</span><br><span class="line">      while (parent &amp;&amp; (!name || name !== componentName)) &#123;</span><br><span class="line">        parent = parent.$parent;</span><br><span class="line"></span><br><span class="line">        if (parent) &#123;</span><br><span class="line">          name = parent.$options.componentName;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      if (parent) &#123;</span><br><span class="line">        parent.$emit.apply(parent, [eventName].concat(params));</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    broadcast(componentName, eventName, params) &#123;</span><br><span class="line">      broadcast.call(this, componentName, eventName, params);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="路由传参"><a href="#路由传参" class="headerlink" title="路由传参"></a>路由传参</h4><p>1.方案一</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 路由定义</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;/describe/:id&apos;,</span><br><span class="line">  name: &apos;Describe&apos;,</span><br><span class="line">  component: Describe</span><br><span class="line">&#125;</span><br><span class="line">// 页面传参</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  path: `/describe/$&#123;id&#125;`,</span><br><span class="line">&#125;)</span><br><span class="line">// 页面获取</span><br><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure>

<p>2.方案二</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 路由定义</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;/describe&apos;,</span><br><span class="line">  name: &apos;Describe&apos;,</span><br><span class="line">  omponent: Describe</span><br><span class="line">&#125;</span><br><span class="line">// 页面传参</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  name: &apos;Describe&apos;,</span><br><span class="line">  params: &#123;</span><br><span class="line">    id: id</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">// 页面获取</span><br><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure>

<p>3.方案三</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 路由定义</span><br><span class="line">&#123;</span><br><span class="line">  path: &apos;/describe&apos;,</span><br><span class="line">  name: &apos;Describe&apos;,</span><br><span class="line">  component: Describe</span><br><span class="line">&#125;</span><br><span class="line">// 页面传参</span><br><span class="line">this.$router.push(&#123;</span><br><span class="line">  path: &apos;/describe&apos;,</span><br><span class="line">    query: &#123;</span><br><span class="line">      id: id</span><br><span class="line">  `&#125;</span><br><span class="line">)</span><br><span class="line">// 页面获取</span><br><span class="line">this.$route.query.id</span><br></pre></td></tr></table></figure>

<p>4.三种方案对比<br>方案二参数不会拼接在路由后面,页面刷新参数会丢失<br>方案一和三参数拼接在后面,丑,而且暴露了信息</p>
<h4 id="Vue-observable"><a href="#Vue-observable" class="headerlink" title="Vue.observable"></a>Vue.observable</h4><p>2.6.0 新增<br>用法:让一个对象可响应。Vue 内部会用它来处理 data 函数返回的对象;返回的对象可以直接用于渲染函数和计算属性内，并且会在发生改变时触发相应的更新;<br>也可以作为最小化的跨组件状态存储器，用于简单的场景。<br>通讯原理实质上是利用Vue.observable实现一个简易的 vuex</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 文件路径 - /store/store.js</span><br><span class="line">import Vue from &apos;vue&apos;</span><br><span class="line"></span><br><span class="line">export const store = Vue.observable(&#123; count: 0 &#125;)</span><br><span class="line">export const mutations = &#123;</span><br><span class="line">  setCount (count) &#123;</span><br><span class="line">    store.count = count</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">        &lt;label for=&quot;bookNum&quot;&gt;数 量&lt;/label&gt;</span><br><span class="line">            &lt;button @click=&quot;setCount(count+1)&quot;&gt;+&lt;/button&gt;</span><br><span class="line">            &lt;span&gt;&#123;&#123;count&#125;&#125;&lt;/span&gt;</span><br><span class="line">            &lt;button @click=&quot;setCount(count-1)&quot;&gt;-&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import &#123; store, mutations &#125; from &apos;../store/store&apos; // Vue2.6新增API Observable</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  name: &apos;Add&apos;,</span><br><span class="line">  computed: &#123;</span><br><span class="line">    count () &#123;</span><br><span class="line">      return store.count</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    setCount: mutations.setCount</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="render-函数"><a href="#render-函数" class="headerlink" title="render 函数"></a>render 函数</h3><p>1.场景:有些代码在 template 里面写会重复很多,所以这个时候 render 函数就有作用啦</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 根据 props 生成标签</span><br><span class="line">// 初级</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;div v-if=&quot;level === 1&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/div&gt;</span><br><span class="line">    &lt;p v-else-if=&quot;level === 2&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/p&gt;</span><br><span class="line">    &lt;h1 v-else-if=&quot;level === 3&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h1&gt;</span><br><span class="line">    &lt;h2 v-else-if=&quot;level === 4&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/h2&gt;</span><br><span class="line">    &lt;strong v-else-if=&quot;level === 5&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/stong&gt;</span><br><span class="line">    &lt;textarea v-else-if=&quot;level === 6&quot;&gt; &lt;slot&gt;&lt;/slot&gt; &lt;/textarea&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">// 优化版,利用 render 函数减小了代码重复率</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;child :level=&quot;level&quot;&gt;Hello world!&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type=&apos;text/javascript&apos;&gt;</span><br><span class="line">  import Vue from &apos;vue&apos;</span><br><span class="line">  Vue.component(&apos;child&apos;, &#123;</span><br><span class="line">    render(h) &#123;</span><br><span class="line">      const tag = [&apos;div&apos;, &apos;p&apos;, &apos;strong&apos;, &apos;h1&apos;, &apos;h2&apos;, &apos;textarea&apos;][this.level-1]</span><br><span class="line">      return h(tag, this.$slots.default)</span><br><span class="line">    &#125;,</span><br><span class="line">    props: &#123;</span><br><span class="line">      level: &#123;  type: Number,  required: true  &#125; </span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)   </span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;hehe&apos;,</span><br><span class="line">    data() &#123; return &#123; level: 3 &#125; &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>2.render 和 template 的对比<br>前者适合复杂逻辑,后者适合逻辑简单;<br>后者属于声明是渲染，前者属于自定Render函数;<br>前者的性能较高，后者性能较低。</p>
<h3 id="异步组件"><a href="#异步组件" class="headerlink" title="异步组件"></a>异步组件</h3><p>场景:项目过大就会导致加载缓慢,所以异步组件实现按需加载就是必须要做的事啦<br>1.异步注册组件<br>3种方法</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 工厂函数执行 resolve 回调</span><br><span class="line">Vue.component(&apos;async-webpack-example&apos;, function (resolve) &#123;</span><br><span class="line">  // 这个特殊的 `require` 语法将会告诉 webpack</span><br><span class="line">  // 自动将你的构建代码切割成多个包, 这些包</span><br><span class="line">  // 会通过 Ajax 请求加载</span><br><span class="line">  require([&apos;./my-async-component&apos;], resolve)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 工厂函数返回 Promise</span><br><span class="line">Vue.component(</span><br><span class="line">  &apos;async-webpack-example&apos;,</span><br><span class="line">  // 这个 `import` 函数会返回一个 `Promise` 对象。</span><br><span class="line">  () =&gt; import(&apos;./my-async-component&apos;)</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">// 工厂函数返回一个配置化组件对象</span><br><span class="line">const AsyncComponent = () =&gt; (&#123;</span><br><span class="line">  // 需要加载的组件 (应该是一个 `Promise` 对象)</span><br><span class="line">  component: import(&apos;./MyComponent.vue&apos;),</span><br><span class="line">  // 异步组件加载时使用的组件</span><br><span class="line">  loading: LoadingComponent,</span><br><span class="line">  // 加载失败时使用的组件</span><br><span class="line">  error: ErrorComponent,</span><br><span class="line">  // 展示加载时组件的延时时间。默认值是 200 (毫秒)</span><br><span class="line">  delay: 200,</span><br><span class="line">  // 如果提供了超时时间且组件加载也超时了，</span><br><span class="line">  // 则使用加载失败时使用的组件。默认值是：`Infinity`</span><br><span class="line">  timeout: 3000</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>异步组件的渲染本质上其实就是执行2次或者2次以上的渲染, 先把当前组件渲染为注释节点, 当组件加载成功后, 通过 forceRender 执行重新渲染。或者是渲染为注释节点, 然后再渲染为loading节点, 在渲染为请求完成的组件</p>
<p>2.路由的按需加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">webpack&lt; 2.4 时</span><br><span class="line">&#123;</span><br><span class="line">  path:&apos;/&apos;,</span><br><span class="line">  name:&apos;home&apos;,</span><br><span class="line">  components:resolve=&gt;require([&apos;@/components/home&apos;],resolve)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webpack&gt; 2.4 时</span><br><span class="line">&#123;</span><br><span class="line">  path:&apos;/&apos;,</span><br><span class="line">  name:&apos;home&apos;,</span><br><span class="line">  components:()=&gt;import(&apos;@/components/home&apos;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">import()方法由es6提出，import()方法是动态加载，返回一个Promise对象，then方法的参数是加载到的模块。类似于Node.js的require方法，主要import()方法是异步加载的。</span><br></pre></td></tr></table></figure>

<h3 id="动态组件"><a href="#动态组件" class="headerlink" title="动态组件"></a>动态组件</h3><p>场景:做一个 tab 切换时就会涉及到组件动态加载</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure>

<p>但是这样每次组件都会重新加载,会消耗大量性能,所以<keep-alive> 就起到了作用</keep-alive></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>

<p>这样切换效果没有动画效果,这个也不用着急,可以利用内置的<transition></transition></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">&lt;keep-alive&gt;</span><br><span class="line">  &lt;component v-bind:is=&quot;currentTabComponent&quot;&gt;&lt;/component&gt;</span><br><span class="line">&lt;/keep-alive&gt;</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<h3 id="递归组件"><a href="#递归组件" class="headerlink" title="递归组件"></a>递归组件</h3><p>场景:如果开发一个 tree 组件,里面层级是根据后台数据决定的,这个时候就需要用到动态组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 递归组件: 组件在它的模板内可以递归的调用自己，只要给组件设置name组件就可以了。</span><br><span class="line">// 设置那么House在组件模板内就可以递归使用了,不过需要注意的是，</span><br><span class="line">// 必须给一个条件来限制数量，否则会抛出错误: max stack size exceeded</span><br><span class="line">// 组件递归用来开发一些具体有未知层级关系的独立组件。比如：</span><br><span class="line">// 联级选择器和树形控件 </span><br><span class="line"></span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div v-for=&quot;(item,index) in treeArr&quot;&gt;</span><br><span class="line">      子组件，当前层级值： &#123;&#123;index&#125;&#125; &lt;br/&gt;</span><br><span class="line">      &lt;!-- 递归调用自身, 后台判断是否不存在改值 --&gt;</span><br><span class="line">      &lt;tree :item=&quot;item.arr&quot; v-if=&quot;item.flag&quot;&gt;&lt;/tree&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default &#123;</span><br><span class="line">  // 必须定义name，组件内部才能递归调用</span><br><span class="line">  name: &apos;tree&apos;,</span><br><span class="line">  data()&#123;</span><br><span class="line">    return &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  // 接收外部传入的值</span><br><span class="line">  props: &#123;</span><br><span class="line">     item: &#123;</span><br><span class="line">      type:Array,</span><br><span class="line">      default: ()=&gt;[]</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>递归组件必须设置name 和结束的阀值</p>
<h3 id="函数式组件"><a href="#函数式组件" class="headerlink" title="函数式组件"></a>函数式组件</h3><p>定义:无状态,无法实例化，内部没有任何生命周期处理方法<br>规则:在 2.3.0 之前的版本中，如果一个函数式组件想要接收 prop，则 props 选项是必须的。<br>在 2.3.0 或以上的版本中，你可以省略 props 选项，所有组件上的特性都会被自动隐式解析为 prop<br>在 2.5.0 及以上版本中，如果你使用了单文件组件(就是普通的.vue 文件),可以直接在 template 上声明functional<br>组件需要的一切都是通过 context 参数传递<br>context 属性有:<br>1.props：提供所有 prop 的对象<br>2.children: VNode 子节点的数组<br>3.slots: 一个函数，返回了包含所有插槽的对象<br>4.scopedSlots: (2.6.0+) 一个暴露传入的作用域插槽的对象。也以函数形式暴露普通插槽。<br>5.data：传递给组件的整个数据对象，作为 createElement 的第二个参数传入组件<br>6.parent：对父组件的引用<br>7.listeners: (2.3.0+) 一个包含了所有父组件为当前组件注册的事件监听器的对象。这是 data.on 的一个别名。<br>8.injections: (2.3.0+) 如果使用了 inject 选项，则该对象包含了应当被注入的属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;template functional&gt;</span><br><span class="line">  &lt;div v-for=&quot;(item,index) in props.arr&quot;&gt;&#123;&#123;item&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="components和Vue-component"><a href="#components和Vue-component" class="headerlink" title="components和Vue.component"></a>components和Vue.component</h3><p>components:局部注册组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">export default&#123;</span><br><span class="line">  components:&#123;home&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Vue.component:全局注册组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.component(&apos;home&apos;,home)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-extend"><a href="#Vue-extend" class="headerlink" title="Vue.extend"></a>Vue.extend</h3><p>场景:vue 组件中有些需要将一些元素挂载到元素上,这个时候 extend 就起到作用了<br>是构造一个组件的语法器<br>写法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 创建构造器</span><br><span class="line">var Profile = Vue.extend(&#123;</span><br><span class="line">  template: &apos;&lt;p&gt;&#123;&#123;extendData&#125;&#125;&lt;/br&gt;实例传入的数据为:&#123;&#123;propsExtend&#125;&#125;&lt;/p&gt;&apos;,//template对应的标签最外层必须只有一个标签</span><br><span class="line">  data: function () &#123;</span><br><span class="line">    return &#123;</span><br><span class="line">      extendData: &apos;这是extend扩展的数据&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props:[&apos;propsExtend&apos;]</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 创建的构造器可以挂载到元素上,也可以通过 components 或 Vue.component()注册使用</span><br><span class="line">// 挂载到一个元素上。可以通过propsData传参.</span><br><span class="line">new Profile(&#123;propsData:&#123;propsExtend:&apos;我是实例传入的数据&apos;&#125;&#125;).$mount(&apos;#app-extend&apos;)</span><br><span class="line"></span><br><span class="line">// 通过 components 或 Vue.component()注册</span><br><span class="line">Vue.component(&apos;Profile&apos;,Profile)</span><br></pre></td></tr></table></figure>

<h3 id="mixins"><a href="#mixins" class="headerlink" title="mixins"></a>mixins</h3><p>场景:有些组件有些重复的 js 逻辑,如校验手机验证码,解析时间等,mixins 就可以实现这种混入<br>mixins 值是一个数组</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const mixin=&#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">      this.dealTime()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      dealTime()&#123;</span><br><span class="line">        console.log(&apos;这是mixin的dealTime里面的方法&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  mixins:[mixin]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>extends用法和mixins很相似,只不过接收的参数是简单的选项对象或构造函数,所以extends只能单次扩展一个组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">const extend=&#123;</span><br><span class="line">    created()&#123;</span><br><span class="line">      this.dealTime()</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      dealTime()&#123;</span><br><span class="line">        console.log(&apos;这是mixin的dealTime里面的方法&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">  extends:extend</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-use"><a href="#Vue-use" class="headerlink" title="Vue.use()"></a>Vue.use()</h3><p>extends用法和mixins很相似,只不过接收的参数是简单的选项对象或构造函数,所以extends只能单次扩展一个组件<br>场景:我们使用 element时会先 import,再 Vue.use()一下,实际上就是注册组件,触发 install 方法;<br>这个在组件调用会经常使用到;<br>会自动组织多次注册相同的插件.</p>
<h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><p>场景:在 Vue.use()说到,执行该方法会触发 install<br>是开发vue的插件,这个方法的第一个参数是 Vue 构造器，第二个参数是一个可选的选项对象(可选)</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var MyPlugin = &#123;&#125;;</span><br><span class="line">  MyPlugin.install = function (Vue, options) &#123;</span><br><span class="line">    // 2. 添加全局资源,第二个参数传一个值默认是update对应的值</span><br><span class="line">    Vue.directive(&apos;click&apos;, &#123;</span><br><span class="line">      bind(el, binding, vnode, oldVnode) &#123;</span><br><span class="line">        //做绑定的准备工作,添加时间监听</span><br><span class="line">        console.log(&apos;指令my-directive的bind执行啦&apos;);</span><br><span class="line">      &#125;,</span><br><span class="line">      inserted: function(el)&#123;</span><br><span class="line">      //获取绑定的元素</span><br><span class="line">      console.log(&apos;指令my-directive的inserted执行啦&apos;);</span><br><span class="line">      &#125;,</span><br><span class="line">      update: function()&#123;</span><br><span class="line">      //根据获得的新值执行对应的更新</span><br><span class="line">      //对于初始值也会调用一次</span><br><span class="line">      console.log(&apos;指令my-directive的update执行啦&apos;);</span><br><span class="line">      &#125;,</span><br><span class="line">      componentUpdated: function()&#123;</span><br><span class="line">      console.log(&apos;指令my-directive的componentUpdated执行啦&apos;);</span><br><span class="line">      &#125;,</span><br><span class="line">      unbind: function()&#123;</span><br><span class="line">      //做清理操作</span><br><span class="line">      //比如移除bind时绑定的事件监听器</span><br><span class="line">      console.log(&apos;指令my-directive的unbind执行啦&apos;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 3. 注入组件</span><br><span class="line">    Vue.mixin(&#123;</span><br><span class="line">      created: function () &#123;</span><br><span class="line">        console.log(&apos;注入组件的created被调用啦&apos;);</span><br><span class="line">        console.log(&apos;options的值为&apos;,options)</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    // 4. 添加实例方法</span><br><span class="line">    Vue.prototype.$myMethod = function (methodOptions) &#123;</span><br><span class="line">      console.log(&apos;实例方法myMethod被调用啦&apos;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  //调用MyPlugin</span><br><span class="line">  Vue.use(MyPlugin,&#123;someOption: true &#125;)</span><br><span class="line"></span><br><span class="line">  //3.挂载</span><br><span class="line">  new Vue(&#123;</span><br><span class="line">    el: &apos;#app&apos;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>

<h3 id="Vue-nextTick"><a href="#Vue-nextTick" class="headerlink" title="Vue.nextTick"></a>Vue.nextTick</h3><p>2.1.0 新增<br>场景:页面加载时需要让文本框获取焦点<br>用法:在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">mounted()&#123; //因为 mounted 阶段 dom 并未渲染完毕,所以需要$nextTick</span><br><span class="line">  this.$nextTick(() =&gt; &#123;</span><br><span class="line">    this.$refs.inputs.focus() //通过 $refs 获取dom 并绑定 focus 方法</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-directive"><a href="#Vue-directive" class="headerlink" title="Vue.directive"></a>Vue.directive</h3><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><p>场景:官方给我们提供了很多指令,但是我们如果想将文字变成指定的颜色定义成指令使用,这个时候就需要用到Vue.directive</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 全局定义</span><br><span class="line">Vue.directive(&quot;change-color&quot;,function(el,binding,vnode)&#123;</span><br><span class="line">  el.style[&quot;color&quot;]= binding.value;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 使用</span><br><span class="line">&lt;template&gt;</span><br><span class="line">&lt;div v-change-color=“color”&gt;&#123;&#123;message&#125;&#125;&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        color:&apos;green&apos;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h4 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h4><p>1.bind 只调用一次，指令第一次绑定到元素时候调用，用这个钩子可以定义一个绑定时执行一次的初始化动作。<br>2.inserted:被绑定的元素插入父节点的时候调用(父节点存在即可调用，不必存在document中)<br>3.update: 被绑定与元素所在模板更新时调用，而且无论绑定值是否有变化，通过比较更新前后的绑定值，忽略不必要的模板更新<br>4.componentUpdate :被绑定的元素所在模板完成一次更新更新周期的时候调用<br>5.unbind: 只调用一次，指令月元素解绑的时候调用</p>
<h3 id="Vue-filter"><a href="#Vue-filter" class="headerlink" title="Vue.filter"></a>Vue.filter</h3><p>场景:时间戳转化成年月日这是一个公共方法,所以可以抽离成过滤器使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 使用</span><br><span class="line">// 在双花括号中</span><br><span class="line">&#123;&#123; message | capitalize &#125;&#125;</span><br><span class="line"></span><br><span class="line">// 在 `v-bind` 中</span><br><span class="line">&lt;div v-bind:id=&quot;rawId | formatId&quot;&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// 全局注册</span><br><span class="line">Vue.filter(&apos;stampToYYMMDD&apos;, (value) =&gt;&#123;</span><br><span class="line">  // 处理逻辑</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 局部注册</span><br><span class="line">filters: &#123;</span><br><span class="line">  stampToYYMMDD: (value)=&gt; &#123;</span><br><span class="line">    // 处理逻辑</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 多个过滤器全局注册</span><br><span class="line">// /src/common/filters.js</span><br><span class="line">let dateServer = value =&gt; value.replace(/(\d&#123;4&#125;)(\d&#123;2&#125;)(\d&#123;2&#125;)/g, &apos;$1-$2-$3&apos;) </span><br><span class="line">export &#123; dateServer &#125;</span><br><span class="line">// /src/main.js</span><br><span class="line">import * as custom from &apos;./common/filters/custom&apos;</span><br><span class="line">Object.keys(custom).forEach(key =&gt; Vue.filter(key, custom[key]))</span><br></pre></td></tr></table></figure>

<h3 id="Vue-compile"><a href="#Vue-compile" class="headerlink" title="Vue.compile"></a>Vue.compile</h3><p>场景:在 render 函数中编译模板字符串。只在独立构建时有效</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var res = Vue.compile(&apos;&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;&apos;)</span><br><span class="line"></span><br><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: &apos;hello&apos;</span><br><span class="line">  &#125;,</span><br><span class="line">  render: res.render,</span><br><span class="line">  staticRenderFns: res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Vue-version"><a href="#Vue-version" class="headerlink" title="Vue.version"></a>Vue.version</h3><p>场景:有些开发插件需要针对不同 vue 版本做兼容,所以就会用到 Vue.version<br>用法:Vue.version()可以获取 vue 版本</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">var version = Number(Vue.version.split(&apos;.&apos;)[0])</span><br><span class="line"></span><br><span class="line">if (version === 2) &#123;</span><br><span class="line">  // Vue v2.x.x</span><br><span class="line">&#125; else if (version === 1) &#123;</span><br><span class="line">  // Vue v1.x.x</span><br><span class="line">&#125; else &#123;</span><br><span class="line">  // Unsupported versions of Vue</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-set"><a href="#Vue-set" class="headerlink" title="Vue.set()"></a>Vue.set()</h3><p>场景:当你利用索引直接设置一个数组项时或你修改数组的长度时,由于 Object.defineprototype()方法限制,数据不响应式更新<br>不过vue.3.x 将利用 proxy 这个问题将得到解决<br>解决方案:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 利用 set</span><br><span class="line">this.$set(arr,index,item)</span><br><span class="line"></span><br><span class="line">// 利用数组 push(),splice()</span><br></pre></td></tr></table></figure>

<h3 id="Vue-config-keyCodes"><a href="#Vue-config-keyCodes" class="headerlink" title="Vue.config.keyCodes"></a>Vue.config.keyCodes</h3><p>场景:自定义按键修饰符别名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 将键码为 113 定义为 f2</span><br><span class="line">Vue.config.keyCodes.f2 = 113;</span><br><span class="line">&lt;input type=&quot;text&quot; @keyup.f2=&quot;add&quot;/&gt;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-config-performance"><a href="#Vue-config-performance" class="headerlink" title="Vue.config.performance"></a>Vue.config.performance</h3><p>场景:监听性能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.config.performance = true</span><br></pre></td></tr></table></figure>

<p>只适用于开发模式和支持 performance.mark API 的浏览器上</p>
<h3 id="Vue-config-errorHandler"><a href="#Vue-config-errorHandler" class="headerlink" title="Vue.config.errorHandler"></a>Vue.config.errorHandler</h3><p>1.场景:指定组件的渲染和观察期间未捕获错误的处理函数<br>2.规则:<br>  从 2.2.0 起，这个钩子也会捕获组件生命周期钩子里的错误。同样的，当这个钩子是 undefined 时，被捕获的错误会通过 console.error 输出而避免应用崩溃<br>  从 2.4.0 起，这个钩子也会捕获 Vue 自定义事件处理函数内部的错误了<br>  从 2.6.0 起，这个钩子也会捕获 v-on DOM 监听器内部抛出的错误。另外，如果任何被覆盖的钩子或处理函数返回一个 Promise 链 (例如 async 函数)，则来自其 Promise 链的错误也会被处理<br>3.使用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.config.errorHandler = function (err, vm, info) &#123;</span><br><span class="line">  // handle error</span><br><span class="line">  // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span><br><span class="line">  // 只在 2.2.0+ 可用</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vue-config-warnHandler"><a href="#Vue-config-warnHandler" class="headerlink" title="Vue.config.warnHandler"></a>Vue.config.warnHandler</h3><p>2.4.0 新增<br>1.场景:为 Vue 的运行时警告赋予一个自定义处理函数,只会在开发者环境下生效<br>2.用法:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Vue.config.warnHandler = function (msg, vm, trace) &#123;</span><br><span class="line">  // `trace` 是组件的继承关系追踪</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-pre"><a href="#v-pre" class="headerlink" title="v-pre"></a>v-pre</h3><p>场景:vue 是响应式系统,但是有些静态的标签不需要多次编译,这样可以节省性能</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span v-pre&gt;&#123;&#123; this will not be compiled &#125;&#125;&lt;/span&gt;   显示的是&#123;&#123; this will not be compiled &#125;&#125;</span><br><span class="line">&lt;span v-pre&gt;&#123;&#123;msg&#125;&#125;&lt;/span&gt;     即使data里面定义了msg这里仍然是显示的&#123;&#123;msg&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="v-cloak"><a href="#v-cloak" class="headerlink" title="v-cloak"></a>v-cloak</h3><p>场景:在网速慢的情况下,在使用vue绑定数据的时候，渲染页面时会出现变量闪烁<br>用法:这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 [v-cloak] { display: none } 一起用时，这个指令可以隐藏未编译的 Mustache 标签直到实例准备完毕</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// template 中</span><br><span class="line">&lt;div class=&quot;#app&quot; v-cloak&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123;value.name&#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">// css 中</span><br><span class="line">[v-cloak] &#123;</span><br><span class="line">    display: none;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这样就可以解决闪烁,但是会出现白屏,这样可以结合骨架屏使用</p>
<h3 id="v-once"><a href="#v-once" class="headerlink" title="v-once"></a>v-once</h3><p>场景:有些 template 中的静态 dom 没有改变,这时就只需要渲染一次,可以降低性能开销</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;span v-once&gt; 这时只需要加载一次的标签&lt;/span&gt;</span><br></pre></td></tr></table></figure>

<p>v-once 和 v-pre 的区别:<br>v-once只渲染一次；v-pre不编译,原样输出</p>
<h3 id="事件修饰符"><a href="#事件修饰符" class="headerlink" title="事件修饰符"></a>事件修饰符</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">.stop:阻止冒泡</span><br><span class="line">.prevent:阻止默认行为</span><br><span class="line">.self:仅绑定元素自身触发</span><br><span class="line">.once: 2.1.4 新增,只触发一次</span><br><span class="line">.passive: 2.3.0 新增,滚动事件的默认行为 (即滚动行为) 将会立即触发,不能和.prevent 一起使用</span><br></pre></td></tr></table></figure>

<h3 id="按键修饰符和按键码"><a href="#按键修饰符和按键码" class="headerlink" title="按键修饰符和按键码"></a>按键修饰符和按键码</h3><p>场景:有的时候需要监听键盘的行为,如按下 enter 去查询接口等</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 对应键盘上的关键字</span><br><span class="line">.enter</span><br><span class="line">.tab</span><br><span class="line">.delete (捕获“删除”和“退格”键)</span><br><span class="line">.esc</span><br><span class="line">.space</span><br><span class="line">.up</span><br><span class="line">.down</span><br><span class="line">.left</span><br><span class="line">.right</span><br></pre></td></tr></table></figure>

<h3 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h3><p>场景:Vue-router 是官方提供的路由插件</p>
<h4 id="缓存和动画"><a href="#缓存和动画" class="headerlink" title="缓存和动画"></a>缓存和动画</h4><p>1.路由是使用官方组件 vue-router,使用方法相信大家非常熟悉;<br>2.这里我就叙述下路由的缓存和动画;<br>3.可以用exclude(除了)或者include(包括),2.1.0 新增来坐判断</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;transition&gt;</span><br><span class="line">  &lt;keep-alive :include=&quot;[&apos;a&apos;, &apos;b&apos;]&quot;&gt;</span><br><span class="line">  //或include=&quot;a,b&quot; :include=&quot;/a|b/&quot;,a 和 b 表示组件的 name</span><br><span class="line">  //因为有些页面,如试试数据统计,要实时刷新,所以就不需要缓存</span><br><span class="line">    &lt;router-view/&gt; //路由标签</span><br><span class="line">  &lt;/keep-alive&gt;</span><br><span class="line">  &lt;router-view exclude=&quot;c&quot;/&gt; </span><br><span class="line">  // c 表示组件的 name值</span><br><span class="line">&lt;/transition&gt;</span><br></pre></td></tr></table></figure>

<p>注:匹配首先检查组件自身的 name 选项，如果 name 选项不可用，则匹配它的局部注册名称 (父组件 components 选项的键值)。匿名组件不能被匹配<br>4.用 v-if 做判断,组件会重新渲染,但是不用一一列举组件 name</p>
<h4 id="全局路由钩子"><a href="#全局路由钩子" class="headerlink" title="全局路由钩子"></a>全局路由钩子</h4><p>1.router.beforeEach</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">router.beforeEach((to, from, next) =&gt; &#123;</span><br><span class="line">  console.log(&apos;全局前置守卫：beforeEach -- next需要调用&apos;) //一般登录拦截用这个,也叫导航钩子守卫</span><br><span class="line">  if (path === &apos;/login&apos;) &#123;</span><br><span class="line">    next()</span><br><span class="line">    return</span><br><span class="line">  &#125;</span><br><span class="line">  if (token) &#123;</span><br><span class="line">    next();</span><br><span class="line">  &#125; </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>2.router.beforeResolve (v 2.5.0+)<br>和beforeEach类似，区别是在导航被确认之前，同时在所有组件内守卫和异步路由组件被解析之后，解析守卫就被调用<br>即在 beforeEach之后调用<br>3.router.afterEach<br>全局后置钩子<br>在所有路由跳转结束的时候调用<br>这些钩子不会接受 next 函数也不会改变导航本身</p>
<h4 id="组件路由钩子"><a href="#组件路由钩子" class="headerlink" title="组件路由钩子"></a>组件路由钩子</h4><p>1.beforeRouteEnter<br>在渲染该组件的对应路由被确认前调用，用法和参数与router.beforeEach类似，next需要被主动调用<br>此时组件实例还未被创建，不能访问this<br>可以通过传一个回调给 next来访问组件实例。在导航被确认的时候执行回调，并且把组件实例作为回调方法的参数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">beforeRouteEnter (to, from, next) &#123;</span><br><span class="line">  // 这里还无法访问到组件实例，this === undefined</span><br><span class="line">  next( vm =&gt; &#123;</span><br><span class="line">    // 通过 `vm` 访问组件实例</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>2.beforeRouteUpdate (v 2.2+)<br>在当前路由改变，并且该组件被复用时调用，可以通过this访问实例， next需要被主动调用，不能传回调<br>3.beforeRouteLeave<br>导航离开该组件的对应路由时调用，可以访问组件实例 this，next需要被主动调用，不能传回调</p>
<h4 id="路由模式"><a href="#路由模式" class="headerlink" title="路由模式"></a>路由模式</h4><p>设置 mode 属性:hash或 history</p>
<h4 id="Vue-router-1"><a href="#Vue-router-1" class="headerlink" title="Vue.$router"></a>Vue.$router</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$router.push():跳转到不同的url，但这个方法回向history栈添加一个记录，点击后退会返回到上一个页面</span><br><span class="line">this.$router.replace():不会有记录</span><br><span class="line">this.$router.go(n):n可为正数可为负数。正数返回上一个页面,类似 window.history.go(n)</span><br></pre></td></tr></table></figure>

<h4 id="Vue-route"><a href="#Vue-route" class="headerlink" title="Vue.$route"></a>Vue.$route</h4><p>表示当前跳转的路由对象,属性有:<br>name:路由名称<br>path:路径<br>query:传参接收值<br>params:传参接收值<br>fullPath:完成解析后的 URL，包含查询参数和 hash 的完整路径<br>matched:路由记录副本<br>redirectedFrom:如果存在重定向，即为重定向来源的路由的名字</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$route.params.id:获取通过 params 或/:id传参的参数</span><br><span class="line">this.$route.query.id:获取通过 query 传参的参数</span><br></pre></td></tr></table></figure>

<h4 id="router-view-的-key"><a href="#router-view-的-key" class="headerlink" title="router-view 的 key"></a>router-view 的 key</h4><p>场景:由于 Vue 会复用相同组件, 即 /page/1 =&gt; /page/2 或者 /page?id=1 =&gt; /page?id=2 这类链接跳转时, 将不在执行created, mounted之类的钩子</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-view :key=&quot;$route.fullpath&quot;&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure>

<p>这样组件的 created 和 mounted 就都会执行</p>
<h3 id="Object-freeze"><a href="#Object-freeze" class="headerlink" title="Object.freeze"></a>Object.freeze</h3><p>场景:一个长列表数据,一般不会更改,但是vue会做getter和setter的转换<br>用法:是ES5新增的特性，可以冻结一个对象，防止对象被修改<br>支持:vue 1.0.18+对其提供了支持，对于data或vuex里使用freeze冻结了的对象，vue不会做getter和setter的转换<br>注意:冻结只是冻结里面的单个属性,引用地址还是可以更改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    data: &#123;</span><br><span class="line">        // vue不会对list里的object做getter、setter绑定</span><br><span class="line">        list: Object.freeze([</span><br><span class="line">            &#123; value: 1 &#125;,</span><br><span class="line">            &#123; value: 2 &#125;</span><br><span class="line">        ])</span><br><span class="line">    &#125;,</span><br><span class="line">    mounted () &#123;</span><br><span class="line">        // 界面不会有响应,因为单个属性被冻结</span><br><span class="line">        this.list[0].value = 100;</span><br><span class="line"></span><br><span class="line">        // 下面两种做法，界面都会响应</span><br><span class="line">        this.list = [</span><br><span class="line">            &#123; value: 100 &#125;,</span><br><span class="line">            &#123; value: 200 &#125;</span><br><span class="line">        ];</span><br><span class="line">        this.list = Object.freeze([</span><br><span class="line">            &#123; value: 100 &#125;,</span><br><span class="line">            &#123; value: 200 &#125;</span><br><span class="line">        ]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="调试-template"><a href="#调试-template" class="headerlink" title="调试 template"></a>调试 template</h3><p>场景:在Vue开发过程中, 经常会遇到template模板渲染时JavaScript变量出错的问题, 此时也许你会通过console.log来进行调试<br>这时可以在开发环境挂载一个 log 函数</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// main.js</span><br><span class="line">Vue.prototype.$log = window.console.log;</span><br><span class="line"></span><br><span class="line">// 组件内部</span><br><span class="line">&lt;div&gt;&#123;&#123;$log(info)&#125;&#125;&lt;/div&gt;</span><br></pre></td></tr></table></figure>

<h3 id="vue-loader-小技巧"><a href="#vue-loader-小技巧" class="headerlink" title="vue-loader 小技巧"></a>vue-loader 小技巧</h3><h4 id="preserveWhitespace"><a href="#preserveWhitespace" class="headerlink" title="preserveWhitespace"></a>preserveWhitespace</h4><p>场景:开发 vue 代码一般会有空格,这个时候打包压缩如果不去掉空格会加大包的体积<br>配置preserveWhitespace可以减小包的体积</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  vue: &#123;</span><br><span class="line">    preserveWhitespace: false</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="transformToRequire"><a href="#transformToRequire" class="headerlink" title="transformToRequire"></a>transformToRequire</h4><p>场景:以前在写 Vue 的时候经常会写到这样的代码：把图片提前 require 传给一个变量再传给组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// page 代码</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;avatar :img-src=&quot;imgSrc&quot;&gt;&lt;/avatar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">  export default &#123;</span><br><span class="line">    created () &#123;</span><br><span class="line">      this.imgSrc = require(&apos;./assets/default-avatar.png&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>现在:通过配置 transformToRequire 后，就可以直接配置，这样vue-loader会把对应的属性自动 require 之后传给组件</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// vue-cli 2.x在vue-loader.conf.js 默认配置是</span><br><span class="line">transformToRequire: &#123;</span><br><span class="line">    video: [&apos;src&apos;, &apos;poster&apos;],</span><br><span class="line">    source: &apos;src&apos;,</span><br><span class="line">    img: &apos;src&apos;,</span><br><span class="line">    image: &apos;xlink:href&apos;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 配置文件,如果是vue-cli2.x 在vue-loader.conf.js里面修改</span><br><span class="line">  avatar: [&apos;default-src&apos;]</span><br><span class="line"></span><br><span class="line">// vue-cli 3.x 在vue.config.js</span><br><span class="line">// vue-cli 3.x 将transformToRequire属性换为了transformAssetUrls</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  pages,</span><br><span class="line">  chainWebpack: config =&gt; &#123;</span><br><span class="line">    config</span><br><span class="line">      .module</span><br><span class="line">        .rule(&apos;vue&apos;)</span><br><span class="line">        .use(&apos;vue-loader&apos;)</span><br><span class="line">        .loader(&apos;vue-loader&apos;)</span><br><span class="line">        .tap(options =&gt; &#123;</span><br><span class="line">      options.transformAssetUrls = &#123;</span><br><span class="line">        avatar: &apos;img-src&apos;,</span><br><span class="line">      &#125;</span><br><span class="line">      return options;</span><br><span class="line">      &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// page 代码可以简化为</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div&gt;</span><br><span class="line">    &lt;avatar img-src=&quot;./assets/default-avatar.png&quot;&gt;&lt;/avatar&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br></pre></td></tr></table></figure>

<h3 id="为路径设置别名"><a href="#为路径设置别名" class="headerlink" title="为路径设置别名"></a>为路径设置别名</h3><p>1.场景:在开发过程中，我们经常需要引入各种文件，如图片、CSS、JS等，为了避免写很长的相对路径（../），我们可以为不同的目录配置一个别名<br>2.vue-cli 2.x 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在 webpack.base.config.js中的 resolve 配置项，在其 alias 中增加别名</span><br><span class="line">resolve: &#123;</span><br><span class="line">    extensions: [&apos;.js&apos;, &apos;.vue&apos;, &apos;.json&apos;],</span><br><span class="line">    alias: &#123;</span><br><span class="line">      &apos;vue$&apos;: &apos;vue/dist/vue.esm.js&apos;,</span><br><span class="line">      &apos;@&apos;: resolve(&apos;src&apos;),</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure>

<p>3.vue-cli 3.x 配置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 在根目录下创建vue.config.js</span><br><span class="line">var path = require(&apos;path&apos;)</span><br><span class="line">function resolve (dir) &#123;</span><br><span class="line">  console.log(__dirname)</span><br><span class="line">  return path.join(__dirname, dir)</span><br><span class="line">&#125;</span><br><span class="line">module.exports = &#123;</span><br><span class="line">  chainWebpack: config =&gt; &#123;</span><br><span class="line">    config.resolve.alias</span><br><span class="line">      .set(key, value) // key,value自行定义，比如.set(&apos;@@&apos;, resolve(&apos;src/components&apos;))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="img-加载失败"><a href="#img-加载失败" class="headerlink" title="img 加载失败"></a>img 加载失败</h3><p>场景:有些时候后台返回图片地址不一定能打开,所以这个时候应该加一张默认图片</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// page 代码</span><br><span class="line">&lt;img :src=&quot;imgUrl&quot; @error=&quot;handleError&quot; alt=&quot;&quot;&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">export default&#123;</span><br><span class="line">  data()&#123;</span><br><span class="line">    return&#123;</span><br><span class="line">      imgUrl:&apos;&apos;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods:&#123;</span><br><span class="line">    handleError(e)&#123;</span><br><span class="line">      e.target.src=reqiure(&apos;图片路径&apos;) //当然如果项目配置了transformToRequire,参考上面 27.2</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>

<h3 id="css"><a href="#css" class="headerlink" title="css"></a>css</h3><h4 id="局部样式"><a href="#局部样式" class="headerlink" title="局部样式"></a>局部样式</h4><p>1.Vue中style标签的scoped属性表示它的样式只作用于当前模块，是样式私有化.<br>2.渲染的规则/原理：<br>给HTML的DOM节点添加一个 不重复的data属性 来表示 唯一性<br>在对应的 CSS选择器 末尾添加一个当前组件的 data属性选择器来私有化样式，如：.demo[data-v-2311c06a]{}<br>如果引入 less 或 sass 只会在最后一个元素上设置</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 原始代码</span><br><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=&quot;demo&quot;&gt;</span><br><span class="line">    &lt;span class=&quot;content&quot;&gt;</span><br><span class="line">      Vue.js scoped</span><br><span class="line">    &lt;/span&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">  .demo&#123;</span><br><span class="line">    font-size: 16px;</span><br><span class="line">    .content&#123;</span><br><span class="line">      color: red;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 浏览器渲染效果</span><br><span class="line">&lt;div data-v-fed36922&gt;</span><br><span class="line">  Vue.js scoped</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.demo[data-v-039c5b43] &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.demo .content[data-v-039c5b43] &#123; //.demo 上并没有加 data 属性</span><br><span class="line">  color: red;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

<h4 id="deep-属性"><a href="#deep-属性" class="headerlink" title="deep 属性"></a>deep 属性</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">// 上面样式加一个 /deep/</span><br><span class="line">&lt;style lang=&quot;less&quot; scoped&gt;</span><br><span class="line">  .demo&#123;</span><br><span class="line">    font-size: 14px;</span><br><span class="line">  &#125;</span><br><span class="line">  .demo /deep/ .content&#123;</span><br><span class="line">    color: blue;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/style&gt;</span><br><span class="line"></span><br><span class="line">// 浏览器编译后</span><br><span class="line">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class="line">.demo[data-v-039c5b43] &#123;</span><br><span class="line">  font-size: 14px;</span><br><span class="line">&#125;</span><br><span class="line">.demo[data-v-039c5b43] .content &#123;</span><br><span class="line">  color: blue;</span><br><span class="line">&#125;</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>vue</category>
      </categories>
      <tags>
        <tag>vue</tag>
      </tags>
  </entry>
</search>
